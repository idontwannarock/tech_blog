<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aop on Howard Tech Note</title>
    <link>https://blog.idontwannarock.dev/tags/aop/</link>
    <description>Recent content in Aop on Howard Tech Note</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>This website by Howard Wang is licensed under a Creative Common Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Tue, 10 Apr 2018 13:22:52 +0800</lastBuildDate>
    <atom:link href="https://blog.idontwannarock.dev/tags/aop/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AOP 及 Spring AOP 簡述</title>
      <link>https://blog.idontwannarock.dev/2018/04/aop_and_spring_aop_basic/</link>
      <pubDate>Tue, 10 Apr 2018 13:22:52 +0800</pubDate>
      <guid>https://blog.idontwannarock.dev/2018/04/aop_and_spring_aop_basic/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;這篇文章是初學的時候撰寫的，其中一些觀念並不正確，步驟也可能因為更新或觀念問題而不適用或者多餘，此篇文章僅為留做紀錄&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;AOP(Aspect-Oriented Programming) 是一種基於 OOP(Object-Oriented Programming) 的改進&lt;/li&gt;&#xA;&lt;li&gt;AOP 是基於動態代理 (Dynamic Proxy) 這種 design pattern&lt;/li&gt;&#xA;&lt;li&gt;AOP 主要的設計對象是切面 (Aspect)，而切面是用來模組化橫切關注點 (Cross-Cutting Concern)&lt;/li&gt;&#xA;&lt;li&gt;切面需要定義公共功能，但可以明確定義功能在哪裡或以什麼方式應用，而不必修改受影響的類別。如此切面關注點就可以被模組化到特殊的類別 (切面) 裡面&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;優點&#34;&gt;優點&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;交易相關的邏輯位於同一位置，便於維護與升級&lt;/li&gt;&#xA;&lt;li&gt;業務邏輯更簡潔，只包含核心業務代碼&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;術語及概念&#34;&gt;術語及概念&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Cross-Cutting Concern 橫切關注點&lt;/strong&gt;：橫跨應用系統多個流程、模組的功能，例如日誌 (Logging)、安全 (Security) 檢查、交易 (Transaction) 等動作，在許多流程的多個位置都需要執行，這種動作就被稱為橫切關注點&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Aspect 切面&lt;/strong&gt;：橫切關注點被模組化後的一種特殊物件；還未模組化前是橫切關注點，抽取後成為一組一組的切面；另一方面來說代理會將一個一個切面重組為橫切關注點&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Advice 通知&lt;/strong&gt;：切面必須要完成的工作或行為，也就是切面的實作內容。切面裡面的各個方法即是一個、一個的通知&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Target 目標&lt;/strong&gt;：被通知的物件，也就是要被橫切的業務邏輯類別&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Proxy 代理&lt;/strong&gt;：向目標物件通知之後創建的對象。容器會建立一個代理，依照設定去縫合 (weave) 切面到應用程式中&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;JoinPoint 連接點&lt;/strong&gt;：程序執行的某個特定位置或時機。例如某個類別的某個方法呼叫前、呼叫後、拋出異常後等等。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;連接點由兩個因素決定：&lt;strong&gt;以方法表示的程式執行點、相對執行點表示的方位&lt;/strong&gt;。例如 A 類別的 a() 方法執行前的 JoinPoint 連接點決定要素為：執行點 A#a()，方位為執行前的位置&lt;/li&gt;&#xA;&lt;li&gt;概念類比：&lt;strong&gt;JoinPoint 連接點相當於資料庫的紀錄，切面相當於查詢條件&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Pointcut 切面定義&lt;/strong&gt;：每個類別都有多個連接點，&lt;strong&gt;類別的所有方法某種程度上都可以想成是 JoinPoint 連接點&lt;/strong&gt;。AOP通過切面定位到特定的連接點&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;spring-aop&#34;&gt;Spring AOP&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;AspectJ：Java 社群最完整、最廣為人知的 AOP 實作&lt;/li&gt;&#xA;&lt;li&gt;Spring 2.0 以上，可以使用基於 AspectJ 的 annotation 註解或基於 XML 設定的 AOP&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;dependencies&#34;&gt;Dependencies&lt;/h2&gt;&#xA;&lt;h3 id=&#34;spring&#34;&gt;Spring&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;commons logging&lt;/li&gt;&#xA;&lt;li&gt;spring beans&lt;/li&gt;&#xA;&lt;li&gt;spring context&lt;/li&gt;&#xA;&lt;li&gt;spring core&lt;/li&gt;&#xA;&lt;li&gt;spring expression&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;spring-aop-1&#34;&gt;Spring AOP&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;aopalliance&lt;/li&gt;&#xA;&lt;li&gt;aspectj weaver&lt;/li&gt;&#xA;&lt;li&gt;spring aop&lt;/li&gt;&#xA;&lt;li&gt;spring aspects&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;註：Spring 框架的版本可以更動，但須一致&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
