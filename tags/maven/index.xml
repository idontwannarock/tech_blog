<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Maven on Howard Tech Note</title>
    <link>https://blog.idontwannarock.me/tags/maven/</link>
    <description>Recent content in Maven on Howard Tech Note</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>This website by Howard Wang is licensed under a Creative Common Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Wed, 14 Dec 2022 14:14:44 +0800</lastBuildDate>
    <atom:link href="https://blog.idontwannarock.me/tags/maven/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Maven &#43; Docker Multi-stage Build</title>
      <link>https://blog.idontwannarock.me/2022/12/maven_docker_multi_stage_build/</link>
      <pubDate>Wed, 14 Dec 2022 14:14:44 +0800</pubDate>
      <guid>https://blog.idontwannarock.me/2022/12/maven_docker_multi_stage_build/</guid>
      <description>&lt;p&gt;Java 專案整合 Docker multi-stage build 系列：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Maven + Docker Multi-stage build&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.idontwannarock.me/2022/12/gradle_docker_multi_stage_build/&#34;&gt;Gradle + Docker Multi-stage build&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;現代常見的 CI/CD 流程經常會使用容器化 (containerized) 的方式來幫助建置環境及部署&lt;/p&gt;&#xA;&lt;p&gt;以 Java + Maven 專案舉例，一個比較通用的 Dockerfile 可能長這樣：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FROM maven:3.8-openjdk-11&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WORKDIR /opt/app&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;COPY src/main/resources /opt/app/src/main/resources&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;COPY src/main/java /opt/app/src/main/java&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;COPY pom.xml .&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;RUN mvn -B -e clean package&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;EXPOSE &lt;span style=&#34;color:#bd93f9&#34;&gt;8080&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ENTRYPOINT &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;java&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;-jar&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;demo.jar&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這個 Dockerfile 其實沒有問題，完全可以正常運行，但它使用上有一個地方不太方便，就是每次運行到 &lt;code&gt;RUN mvn -B -e clean package&lt;/code&gt; 這行的時候，除非程式碼跟 &lt;code&gt;pom.xml&lt;/code&gt; 都沒有變動，否則所有 dependencies 都會重新下載一遍，如果專案比較大型，那光下載 dependencies 可能就會要花很久的時間&lt;/p&gt;&#xA;&lt;h1 id=&#34;docker-multi-stage-build&#34;&gt;Docker Multi-stage Build&lt;/h1&gt;&#xA;&lt;p&gt;於是就有人使出了 Docker multi-stage build 這招&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
