<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mysql on Howard Tech Note</title>
    <link>https://blog.idontwannarock.dev/tags/mysql/</link>
    <description>Recent content in Mysql on Howard Tech Note</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>This website by Howard Wang is licensed under a Creative Common Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Fri, 07 Feb 2025 09:39:10 +0800</lastBuildDate>
    <atom:link href="https://blog.idontwannarock.dev/tags/mysql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>如何在 MySQL 中進行 insert if not exists</title>
      <link>https://blog.idontwannarock.dev/2025/02/how_to_insert_if_not_exists_in_mysql/</link>
      <pubDate>Fri, 07 Feb 2025 09:39:10 +0800</pubDate>
      <guid>https://blog.idontwannarock.dev/2025/02/how_to_insert_if_not_exists_in_mysql/</guid>
      <description>&lt;p&gt;相信很多 Developer 都會真心的 &lt;em&gt;&lt;del&gt;幹譙&lt;/del&gt;&lt;/em&gt; 懷疑為什麼 MySQL 經過這麼多年都沒有 PostgreSQL 的 &lt;code&gt;INSERT … ON DUPLICATE KEY DO NOTHING&lt;/code&gt; 語法，偏偏這真的是一個很常會碰到的使用情境&lt;/p&gt;&#xA;&lt;p&gt;所以接下來探討一些單一 SQL 語法方面可行的做法&lt;/p&gt;&#xA;&lt;h2 id=&#34;準備&#34;&gt;準備&lt;/h2&gt;&#xA;&lt;p&gt;環境為 MySQL server 8.0.37&lt;/p&gt;&#xA;&lt;p&gt;首先建立以下 table (只是為了情境驗證，合理性就先不計較)&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;drop&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;table&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;exists&lt;/span&gt; test_user;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;create&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;table&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;exists&lt;/span&gt; test_user (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    id &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;int&lt;/span&gt; unsigned auto_increment &lt;span style=&#34;color:#ff79c6&#34;&gt;primary&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;key&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    user_id &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;int&lt;/span&gt; unsigned &lt;span style=&#34;color:#ff79c6&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    is_active &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;constraint&lt;/span&gt; uk_user_id_user &lt;span style=&#34;color:#ff79c6&#34;&gt;unique&lt;/span&gt; (user_id)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;) engine &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; innodb charset &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; utf8mb4 &lt;span style=&#34;color:#ff79c6&#34;&gt;collate&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; utf8mb4_0900_ai_ci;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;情境就是要在表中新增一筆 user 紀錄，如果該 user id 已經存在，就不做任何變更&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;每個情境測試前都會重新建立整個 table，以避免其他問題影響測試結果&lt;/p&gt;&#xA;&lt;p&gt;取得 auto increment 數字前，可能需要 &lt;code&gt;analyze table&lt;/code&gt; 以校正數據&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;insert&#34;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;p&gt;第一個方法就是直接 &lt;code&gt;insert&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Percona XtraDB Cluster MySQL with Docker Compose</title>
      <link>https://blog.idontwannarock.dev/2024/10/pxc_mysql_docker_compose/</link>
      <pubDate>Wed, 16 Oct 2024 11:06:41 +0800</pubDate>
      <guid>https://blog.idontwannarock.dev/2024/10/pxc_mysql_docker_compose/</guid>
      <description>&lt;p&gt;因為公司 production 採用 Percona XtraDB Cluster 去架設 MySQL cluster，而 cluster mode 有很多預設的環境設定與非 cluster mode 的設定不同，例如 &lt;code&gt;pxc_strict_mode&lt;/code&gt; 在 cluster mode 下，預設為 &lt;code&gt;ENFORCING&lt;/code&gt; 或 &lt;code&gt;MASTER&lt;/code&gt;，但非 cluster mode 的 &lt;code&gt;pxc_strict_mode&lt;/code&gt; 預設為 &lt;code&gt;DISABLE&lt;/code&gt; 而且還不能調整為 &lt;code&gt;ENFORCING&lt;/code&gt;，導致有些 SQL 語法在 production 不支援&lt;/p&gt;&#xA;&lt;p&gt;為了能夠在本機直接比照 production 環境配置去測試 SQL，所以研究如何快速在本機搭建出 Percona XtraDB Cluster cluster mode 的 MySQL&lt;/p&gt;&#xA;&lt;h1 id=&#34;環境&#34;&gt;環境&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;WSL2 Ubuntu&lt;/li&gt;&#xA;&lt;li&gt;Docker and Docker Compose installed and accessible from terminal&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;作法&#34;&gt;作法&lt;/h1&gt;&#xA;&lt;p&gt;先在同一個資料夾建立以下幾個文件&lt;/p&gt;&#xA;&lt;h2 id=&#34;composeyml&#34;&gt;compose.yml&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;services&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;pxc-mysql&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;image&lt;/span&gt;: percona/percona-xtradb-cluster:8.0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;container_name&lt;/span&gt;: pxc-mysql&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;restart&lt;/span&gt;: always&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;privileged&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;environment&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - MYSQL_ROOT_PASSWORD=root&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - MYSQL_DATABASE=mmschat&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - CLUSTER_NAME=pxc-cluster&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - XTRABACKUP_PASSWORD=root&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;ports&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;3306:3306&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;volumes&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;pxc-mysql-data:/var/lib/mysql&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;./cert:/cert&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;./conf:/etc/percona-xtradb-cluster.conf.d&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;./init.sql:/docker-entrypoint-initdb.d/init.sql&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;volumes&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;pxc-mysql-data&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這份 docker compose 檔建立 pxc cluster mode 的 MySQL&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java Time 保存到 MySQL DATETIME 時區問題</title>
      <link>https://blog.idontwannarock.dev/2023/12/java_time_mapping_mysql_datetime_timezone/</link>
      <pubDate>Wed, 27 Dec 2023 09:26:23 +0800</pubDate>
      <guid>https://blog.idontwannarock.dev/2023/12/java_time_mapping_mysql_datetime_timezone/</guid>
      <description>&lt;p&gt;最近開發遇到一個對我的系統需求來說很合適，但我感覺不合理的狀況&lt;/p&gt;&#xA;&lt;p&gt;目前有 Spring Boot 系統在 JPA 是用 &lt;code&gt;OffsetDateTime&lt;/code&gt; 在 Entity 中對應 MySQL 表中的 &lt;code&gt;DATETIME&lt;/code&gt; 欄位，JVM 時區以及 MySQL 的系統時區都是 +8，沒有特別在任何地方進行時區設定，也就是所有地方應該都是預設設定&lt;/p&gt;&#xA;&lt;p&gt;然而當 &lt;code&gt;OffsetDateTime&lt;/code&gt; 保存到 &lt;code&gt;DATETIME&lt;/code&gt; 當中時，卻會被自動轉換成 UTC 時區的時間保存，並且之後再用 JPA 重新取出後，&lt;code&gt;OffsetDateTime&lt;/code&gt; 也依然是 UTC 時區&lt;/p&gt;&#xA;&lt;p&gt;這就讓人感覺很奇怪了，感覺要馬就應該是 MySQL &lt;code&gt;DATETIME&lt;/code&gt; 保存時用 JVM 跟 MySQL 相同的系統 +8 時區時間保存，取出也是 +8 時間；要馬就是保存時會轉成 UTC，但取出應該會自動轉換回 JVM 的 +8 才合理，畢竟 &lt;code&gt;DATETIME&lt;/code&gt; 欄位資料格式不保存時區資訊，所以要馬就是完全不轉換，要馬就是會依照某種機制保存時用 UTC，但使用時會自動轉換成 JVM 時區之類的模式才對&lt;/p&gt;&#xA;&lt;p&gt;雖然我原本就希望在系統中盡量都使用 UTC 時區而不要隨著 MySQL/JVM 時區變動以避免造成資料錯誤的問題，但機制不如預期就應該要弄清楚，免得其實是有什麼未知的狀況造成日後踩到坑&lt;/p&gt;&#xA;&lt;h1 id=&#34;pre-requisite&#34;&gt;Pre-requisite&lt;/h1&gt;&#xA;&lt;p&gt;首先要先說明這篇文章的研究都是基於下列版本，不同的版本「可能」會有不同的行為，請查詢官網文件或自行測試&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Spring Boot Data JPA 3.1.4&lt;/li&gt;&#xA;&lt;li&gt;Hibernate 6.2.9.Final&lt;/li&gt;&#xA;&lt;li&gt;MySQL JDBC Driver 8.0.33&lt;/li&gt;&#xA;&lt;li&gt;MySQL server 8.0.33&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;資料類型選擇的考量&#34;&gt;資料類型選擇的考量&lt;/h1&gt;&#xA;&lt;p&gt;首先說明為什麼要選擇用 &lt;code&gt;OffsetDateTime&lt;/code&gt; 對應 MySQL &lt;code&gt;DATETIME&lt;/code&gt; 的考量&lt;/p&gt;</description>
    </item>
    <item>
      <title>MySQL 8.0 使用 UTC_TIMESTAMP() 當作 DATETIME 欄位預設值 bug</title>
      <link>https://blog.idontwannarock.dev/2023/10/mysql_8_utc_timestamp_as_datetime_default_bug/</link>
      <pubDate>Tue, 31 Oct 2023 11:59:03 +0800</pubDate>
      <guid>https://blog.idontwannarock.dev/2023/10/mysql_8_utc_timestamp_as_datetime_default_bug/</guid>
      <description>&lt;h1 id=&#34;情境描述&#34;&gt;情境描述&lt;/h1&gt;&#xA;&lt;p&gt;最近在處理 MySQL 的時候採到一個坑&lt;/p&gt;&#xA;&lt;p&gt;我的使用情境是需要一個 create date 紀錄資料產生時的 UTC 時間精準到 millisecond&lt;/p&gt;&#xA;&lt;p&gt;首先考慮到 MySQL 的 &lt;code&gt;TIMESTAMP&lt;/code&gt; 資料型態是採用 epoch second 加上額外的 fractional seconds 精準到 microseconds，也就是最多記錄到 &amp;lsquo;2038-01-19 03:14:07.999999&amp;rsquo; 就會 overflow，如果採用 &lt;code&gt;DATETIME(3)&lt;/code&gt; 可以記錄到 &amp;lsquo;9999-12-31 23:59:59.999&amp;rsquo;&lt;/p&gt;&#xA;&lt;p&gt;接著因為欄位必填，所以考慮設定預設值，此時有幾種選擇，&lt;code&gt;NOW()&lt;/code&gt;、&lt;code&gt;CURRENT_TIMESTAMP&lt;/code&gt;、&lt;code&gt;UTC_TIMESTAMP&lt;/code&gt;，其中 &lt;code&gt;NOW()&lt;/code&gt; 與 &lt;code&gt;CURRENT_TIMESTAMP&lt;/code&gt; 都會依照 MySQL 系統時區產生時間，但是 &lt;code&gt;DATETIME&lt;/code&gt; 並不保存時區資訊，所以為了避免時區問題，所以選擇預設值設定為 &lt;code&gt;(UTC_TIMESTAMP(3))&lt;/code&gt;，剛好在 8.0.13 開始可以將 &lt;code&gt;DATETIME&lt;/code&gt; 資料型態的欄位預設值設為 function &lt;code&gt;(UTC_TIMESTAMP())&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;但是設定完後發生了很奇怪的問題，後續進行的 &lt;code&gt;ALTER TABLE&lt;/code&gt; DDL 操作都會失敗並拋出 &lt;code&gt;ERROR 1067: Invalid default value for &amp;lt;columnName&amp;gt;&lt;/code&gt; 錯誤，例如執行以下 sql&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;ALTER&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;TABLE&lt;/span&gt; tableName &lt;span style=&#34;color:#ff79c6&#34;&gt;ADD&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;COLUMN&lt;/span&gt; newColumnName &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;BIGINT&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;NULL&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;明明新增的是 &lt;code&gt;BIGINT&lt;/code&gt; 而且沒有預設值，卻拋出 &lt;code&gt;ERROR 1067: Invalid default value for createdDateColumn&lt;/code&gt; 的錯誤，簡直莫名其妙讓人丈二和尚摸不著頭腦&lt;/p&gt;</description>
    </item>
    <item>
      <title>4th Practice: Twitter Clone</title>
      <link>https://blog.idontwannarock.dev/2017/09/twitter_clone/</link>
      <pubDate>Fri, 15 Sep 2017 10:27:28 +0800</pubDate>
      <guid>https://blog.idontwannarock.dev/2017/09/twitter_clone/</guid>
      <description>&lt;h1 id=&#34;第四個目標&#34;&gt;第四個目標&lt;/h1&gt;&#xA;&lt;p&gt;練習 PHP、MySQL 跟 MVC，因為 Bootstrap 很方便，所以 HTML 跟 CSS 就這樣吧！廠廠~&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;作品：&lt;a href=&#34;https://goo.gl/PVUtXQ&#34;&gt;史上最簡陋 Twitter&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;參考：這參考太多了，只能說各種參考 orz&lt;/li&gt;&#xA;&lt;li&gt;原始碼：可以參考 &lt;a href=&#34;https://github.com/idontwannarock&#34;&gt;我的Github&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;還是要先講一下，這並不是我憑空寫出來的作品，是跟著 Udemy 網路課程教學作出來的。&lt;/p&gt;&#xA;&lt;h1 id=&#34;遇到困難&#34;&gt;遇到困難&lt;/h1&gt;&#xA;&lt;h2 id=&#34;對自己智商產生質疑&#34;&gt;對自己智商產生質疑&lt;/h2&gt;&#xA;&lt;p&gt;真的是這樣，之所以這麼廢的東西還能作這麼久，事後檢討的結果，絕大多數時間都浪費在因為智商太低產生的各種製造障礙，簡稱製障問題上。&lt;/p&gt;&#xA;&lt;p&gt;譬如說出現什麼 404 或 500 錯誤訊息，花了三個多小時觀看 stackoverflow 上高手討論，最後發現是 PHP 某一行少加了一個 &lt;code&gt;;&lt;/code&gt;，當天直接氣到作不下去之類的…&lt;/p&gt;&#xA;&lt;h2 id=&#34;debug&#34;&gt;debug&lt;/h2&gt;&#xA;&lt;p&gt;作這個真心受教了，要馬每一步都先作測試，要馬就要會查 bug，人生就是要接受 bug 的出現，沒 bug 絕對是陰德值爆滿。&lt;/p&gt;&#xA;&lt;p&gt;所以我目前領悟到的順序是：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;先查 code 有沒有漏加什麼 &lt;code&gt;;&lt;/code&gt; 或 &lt;code&gt;,&lt;/code&gt;或者哪裡括號沒關好，這些出現的頻率超乎你想像，即使有 autocomplete 功能也是一樣&lt;/li&gt;&#xA;&lt;li&gt;再來用 Chrome 的 &lt;code&gt;Inspect&lt;/code&gt; 或 Firefox 的 &lt;code&gt;Inspector&lt;/code&gt; 來查錯誤訊息，運氣好就會跟你說你程式碼哪一行有問題&lt;/li&gt;&#xA;&lt;li&gt;還找不到，先不要急著 google，先查 Log！先查 Log！先查 Log！很重要，所以講三次。通常 Log 也會跟你講執行到哪一行有問題&lt;/li&gt;&#xA;&lt;li&gt;最後真的都不行，再拿錯誤訊息去拜 google 大神&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;以上是我的切身之痛，其他的難點在這兩個困難底下，都已經不再重要…喔不是啦，還是補充一個。&lt;/p&gt;&#xA;&lt;h2 id=&#34;ajax&#34;&gt;AJAX&lt;/h2&gt;&#xA;&lt;p&gt;不太確定這算不算常識，但大家在使用 jQuery+AJAX 的時候要注意 jQuery 的版本，請不要用到 slim 版的喔， jQuery slim 版把 AJAX 功能拿掉了，所以最起碼要用 minified 或更完整的版本，切記切記！&lt;/p&gt;</description>
    </item>
    <item>
      <title>實作簡單登入會員系統 (1)</title>
      <link>https://blog.idontwannarock.dev/2017/09/login_signup_function_1/</link>
      <pubDate>Mon, 11 Sep 2017 07:11:59 +0800</pubDate>
      <guid>https://blog.idontwannarock.dev/2017/09/login_signup_function_1/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;這篇文章是初學的時候撰寫的，其中一些觀念並不正確，步驟也可能因為更新或觀念問題而不適用或者多餘，此篇文章僅為留做紀錄&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;學習目標&#34;&gt;學習目標&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;實作簡單會員系統，有加入會員、登入、登出&lt;/li&gt;&#xA;&lt;li&gt;cookie&lt;/li&gt;&#xA;&lt;li&gt;防範 SQL Injection+XSS&lt;/li&gt;&#xA;&lt;li&gt;hash 密碼&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h1 id=&#34;學習內容&#34;&gt;學習內容&lt;/h1&gt;&#xA;&lt;h2 id=&#34;構思&#34;&gt;構思&lt;/h2&gt;&#xA;&lt;p&gt;坦白說，我有自學過一點點前後端的 Udemy 網路課程，所以前端的部分，簡單的 HTML, CSS, Javascript, jQuery 我還可以，大概是不會寫也可以谷哥看別人怎麼寫的程度。後端也是學過簡單的 PHP 跟 MySQL 這樣。所以後面的說明很可能會省略很多基礎，而只記錄我不太會或不太熟的部分。&lt;/p&gt;&#xA;&lt;p&gt;關於會員系統，Udemy 課程的老師其實有教過這個部分，但當時似懂非懂，幾乎就是 copy 老師的程式碼，糊里糊塗就寫出來，PHP 跟 MySQL 的部分一片模糊，所以先來嘗試自己重新寫一遍，不行再來找找看網路教學。&lt;/p&gt;&#xA;&lt;p&gt;要寫登入登出的功能，我第一個想到就是要用 HTML 的 &lt;code&gt;form&lt;/code&gt; 先做三個 &lt;code&gt;input&lt;/code&gt; 跟一個 &lt;code&gt;button&lt;/code&gt;，若要串接資料庫，應該還要再作一個 &lt;code&gt;button&lt;/code&gt; 切換 Sign Up 跟 Login 畫面來作區別。預計應該要用 jQuery 控制切換 Sign Up/Login 的功能。&lt;/p&gt;&#xA;&lt;p&gt;然後後端邏輯應該就是先作 Sign Up/Login 資料的驗證部分，用 &lt;code&gt;ajax&lt;/code&gt; 傳輸資料到後端，檢查輸入的 &lt;code&gt;username&lt;/code&gt;、&lt;code&gt;email&lt;/code&gt; 跟 &lt;code&gt;password&lt;/code&gt; 是否空白、格式是否正確以及是否重複，用 &lt;code&gt;echo&lt;/code&gt; 輸出錯誤提示訊息給前端。&lt;/p&gt;&#xA;&lt;p&gt;接著作 Sign Up 部分，接著剛剛驗證完資料正確後，檢查資料庫有無重複資料後，再把 &lt;code&gt;username&lt;/code&gt;、&lt;code&gt;email&lt;/code&gt; 跟 &lt;code&gt;password&lt;/code&gt; 存進資料庫。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
