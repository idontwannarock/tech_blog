<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring-Boot on Howard Tech Note</title>
    <link>https://blog.idontwannarock.me/tags/spring-boot/</link>
    <description>Recent content in Spring-Boot on Howard Tech Note</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>This website by Howard Wang is licensed under a Creative Common Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Mon, 12 Dec 2022 09:24:17 +0800</lastBuildDate>
    <atom:link href="https://blog.idontwannarock.me/tags/spring-boot/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SpringFox to SpringDoc</title>
      <link>https://blog.idontwannarock.me/2022/12/springfox_to_springdoc/</link>
      <pubDate>Mon, 12 Dec 2022 09:24:17 +0800</pubDate>
      <guid>https://blog.idontwannarock.me/2022/12/springfox_to_springdoc/</guid>
      <description>&lt;p&gt;以 Spring Boot 生態來說，比較主流的 documentation 方式應該就是 Swagger，以往應該多數人都是使用 SpringFox library，但近幾年也漸漸興起使用 SpringDoc，所以就做了一點筆記，紀錄要怎麼從 SpringFox 轉移到 SpringDoc&lt;/p&gt;&#xA;&lt;h1 id=&#34;比較&#34;&gt;比較&lt;/h1&gt;&#xA;&lt;p&gt;這兩者同樣都有實作 OpenAPI 3.0，為什麼我們需要從 SpringFox 轉移使用 SpringDoc？&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;springfox-boot-starter&lt;/code&gt; 包含許多 Spring 的 transitive dependencies；&lt;code&gt;springdoc-openapi-ui&lt;/code&gt; 則是 standalone 的 library，並沒有跟 Spring 的依賴&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;springfox-boot-starter&lt;/code&gt; 需要額外 dependency 才有 Swagger UI 的呈現；&lt;code&gt;springdoc-openapi-ui&lt;/code&gt; 則已經內含 Swagger UI&lt;/li&gt;&#xA;&lt;li&gt;SpringDoc 在一些細節功能上更強大，例如提供陣列參數更好的 UI 做輸入&lt;/li&gt;&#xA;&lt;li&gt;最重要的一點，SpringFox 幾乎已經不再更新；而 SpringDoc 還有在常態維護，因此也能跟較新版本的 Spring 有更好的整合，也能更即時的修正 bug&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;升級步驟&#34;&gt;升級步驟&lt;/h1&gt;&#xA;&lt;p&gt;相當簡單，參考 &lt;a href=&#34;https://springdoc.org/#migrating-from-springfox&#34;&gt;官方文件&lt;/a&gt; 即可&lt;/p&gt;&#xA;&lt;p&gt;因為都是實作 OpenAPI，就算 SpringFox 有實作 2.0 版，但跟 3.0 其實差異也不大&lt;/p&gt;&#xA;&lt;p&gt;主要就是改一下 dependency，然後 annotation 調整一下，其他幾乎沒有不同&lt;/p&gt;&#xA;&lt;h1 id=&#34;注意事項&#34;&gt;注意事項&lt;/h1&gt;&#xA;&lt;h2 id=&#34;spring-security&#34;&gt;Spring Security&lt;/h2&gt;&#xA;&lt;p&gt;若有整合 Spring Security，則可以在 controller 透過加註 &lt;code&gt;@AuthenticationPrincipal&lt;/code&gt; 註解注入驗證過的 principal 物件，但這個物件不需要呈現在 Swagger 上&lt;/p&gt;</description>
    </item>
    <item>
      <title>Spring Boot 整合 Quartz 集群執行預設及動態排程</title>
      <link>https://blog.idontwannarock.me/2022/11/quartz-cluster-fixed-and-dynamic-trigger-spring-boot-integration/</link>
      <pubDate>Tue, 15 Nov 2022 16:54:13 +0800</pubDate>
      <guid>https://blog.idontwannarock.me/2022/11/quartz-cluster-fixed-and-dynamic-trigger-spring-boot-integration/</guid>
      <description>&lt;p&gt;Quartz 系列：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.idontwannarock.me/2022/11/quartz-intro/&#34;&gt;Quartz 介紹&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Spring Boot 整合 Quartz 集群執行預設及動態排程&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.idontwannarock.me/2022/11/quartz-misfire-handling-instruction/&#34;&gt;Quartz Misfire Handling Instruction&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Spring Boot 官方本身就有 &lt;code&gt;spring-boot-starter-quartz&lt;/code&gt; 來提供 Quartz 整合，所以在 Spring Boot 當中使用基本 Quartz 功能已經非常簡單&lt;/p&gt;&#xA;&lt;p&gt;至於動態產生排程，網路上也很多教學，只是大多是採用 API 呼叫的方式去動態產生、運行、暫停、刪除排程等功能，而幾乎沒看到利用預設排程定時從 database 取得動態排程設定，並動態產生或移除排程的功能&lt;/p&gt;&#xA;&lt;p&gt;接下來探討如何在 Spring Boot 整合 Quartz 的框架中實作以上需求，來達成依照自訂動態排程來發通知的需求&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;以下討論採用 Spring Boot 2.7.5 及 Quartz 2.3.2 版本並搭配 MySQL 做持久化&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;database-schema&#34;&gt;Database Schema&lt;/h1&gt;&#xA;&lt;p&gt;首先需要在 MySQL 內建立相關的 schema，可以利用官方提供的這個 &lt;a href=&#34;https://github.com/quartz-scheduler/quartz/blob/master/quartz-core/src/main/resources/org/quartz/impl/jdbcjobstore/tables_mysql_innodb.sql&#34;&gt;script&lt;/a&gt; 來建立，並額外依照以下 sql 建立動態通知排程的 table：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;create&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;table&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;not&lt;/span&gt; exist NOTIFICATION_SCHEDULE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ID                &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;int&lt;/span&gt; auto_increment&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;primary&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;key&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    CRON              &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;varchar&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;)                          &lt;span style=&#34;color:#ff79c6&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;comment&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Quartz type cron&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    TIMEZONE          &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;varchar&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Asia/Taipei&amp;#39;&lt;/span&gt;     &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    TEMPLATE_ID       &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;int&lt;/span&gt;                                   &lt;span style=&#34;color:#ff79c6&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    IS_ONLINE         tinyint(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;)  &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;                 &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    IS_DELETED        tinyint(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;)  &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;                 &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    CREATE_TIME       datetime    &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;CURRENT_TIMESTAMP&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    UPDATE_TIME       datetime                              &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;on&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;update&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;CURRENT_TIMESTAMP&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;comment&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;紀錄通知排程資訊&amp;#39;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;dependency&#34;&gt;Dependency&lt;/h1&gt;&#xA;&lt;p&gt;接著在 pom 檔引用以下依賴：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Spring Boot 後端實作 XSS 防範</title>
      <link>https://blog.idontwannarock.me/2022/11/xss_prevention_spring_boot/</link>
      <pubDate>Tue, 01 Nov 2022 15:28:32 +0800</pubDate>
      <guid>https://blog.idontwannarock.me/2022/11/xss_prevention_spring_boot/</guid>
      <description>&lt;p&gt;XSS 系列：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.idontwannarock.me/2022/11/xss_prevention_intro/&#34;&gt;XSS 防範簡介&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Spring Boot 後端實作 XSS 防範&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;身為一個 Java 後端工程師，今天要來討論如何在 Spring Boot 的後端專案進行 general 的 XSS 防範。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;請還是注意，general 的手段並不能很良好的防範 XSS 攻擊，而只是提供一個基本程度的防範。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;csp-header&#34;&gt;CSP Header&lt;/h2&gt;&#xA;&lt;p&gt;如果專案有整合 Spring Security，Spring Security 原生就已經預設在 response header 中加入 &lt;code&gt;X-XSS-Protection: 1; mode=block&lt;/code&gt;，但因為 CSP 需要自行設定資源允許的來源，所以 Spring Security 並沒有預設，需要在 &lt;code&gt;SecurityFilterChain&lt;/code&gt; 當中設定，舉例如下：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@Bean&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SecurityFilterChain &lt;span style=&#34;color:#50fa7b&#34;&gt;filterChain&lt;/span&gt;(HttpSecurity httpSecurity) &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;throws&lt;/span&gt; Exception {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  httpSecurity.&lt;span style=&#34;color:#50fa7b&#34;&gt;headers&lt;/span&gt;().&lt;span style=&#34;color:#50fa7b&#34;&gt;contentSecurityPolicy&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;script-src &amp;#39;self&amp;#39;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如此就會在 response header 中加入 &lt;code&gt;Content-Security-Policy: script-src &#39;self&#39;&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;h2 id=&#34;output-encoding&#34;&gt;Output Encoding&lt;/h2&gt;&#xA;&lt;p&gt;再來，後端也可以對接收到或回傳的資料做 escape，例如採取將內容都做 escape，將符號都轉換成 HTML Entities 的方式。&lt;/p&gt;&#xA;&lt;p&gt;首先可以加入 Apache Commons Text dependency，有現成的方法可以處理文字中符號轉換的部分：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Spring Boot 實作 API 版本控制</title>
      <link>https://blog.idontwannarock.me/2019/09/spring_api_version_with_swagger_security/</link>
      <pubDate>Thu, 19 Sep 2019 15:53:36 +0800</pubDate>
      <guid>https://blog.idontwannarock.me/2019/09/spring_api_version_with_swagger_security/</guid>
      <description>&lt;p&gt;本文目的是為了探討在 Spring Boot Web 專案中，實作 API 版本控制，並兼容 Swagger 及 Spring Security 的解決方式&lt;/p&gt;&#xA;&lt;p&gt;需要有 Spring Boot、Spring MVC、Spring Security 及 Swagger 的基礎概念會比較好理解&lt;/p&gt;&#xA;&lt;h1 id=&#34;api-版本控制&#34;&gt;API 版本控制&lt;/h1&gt;&#xA;&lt;p&gt;常見的 API 版本控制方式有三種: URI, header, content-type&lt;/p&gt;&#xA;&lt;p&gt;考量到 RESTful API 其中的一個好處是方便快取，使用 header 跟 content-type 的方式則可能無法正確的快取以及達成 idempotent，所以我個人採用的是在 URI 中加入版本號的方式&lt;/p&gt;&#xA;&lt;p&gt;再來因為有時候面對的專案有數量眾多的 handler，導致每次修改版本號都要手動修改每一支 handler 對應的 uri，這樣既麻煩又不潮，所以一定要研究一下怎麼在 Spring Boot 專案中利用註解的方式自動幫 handler 對應的 uri 自動插入版本號&lt;/p&gt;&#xA;&lt;h1 id=&#34;tech-stack&#34;&gt;Tech Stack&lt;/h1&gt;&#xA;&lt;p&gt;專案採用的是 Spring Boot 2.0 架構，Java 1.8 版本&lt;/p&gt;&#xA;&lt;p&gt;有關 Maven 依賴如下:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;org.springframework.boot:spring-boot-starter-web:2.1.x&lt;/li&gt;&#xA;&lt;li&gt;org.springframework.boot:spring-boot-starter-security:2.1.x&lt;/li&gt;&#xA;&lt;li&gt;io.springfox:springfox-swagger2:2.9.2&lt;/li&gt;&#xA;&lt;li&gt;io.springfox:springfox-swagger-ui:2.9.2&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;這邊強調要採用 Spring Boot 主要是因為想要利用 Spring Boot auto configuration 的功能，也因為想要利用這個功能，所以過程才會這麼曲折&amp;hellip;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
