<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Github on Howard Tech Note</title>
    <link>https://blog.idontwannarock.me/tags/github/</link>
    <description>Recent content in Github on Howard Tech Note</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>This website by Howard Wang is licensed under a Creative Common Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Wed, 03 Nov 2021 16:29:03 +0800</lastBuildDate>
    <atom:link href="https://blog.idontwannarock.me/tags/github/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hugo 半自動部署</title>
      <link>https://blog.idontwannarock.me/2021/11/hugo_semi_auto_deploy/</link>
      <pubDate>Wed, 03 Nov 2021 16:29:03 +0800</pubDate>
      <guid>https://blog.idontwannarock.me/2021/11/hugo_semi_auto_deploy/</guid>
      <description>&lt;p&gt;這篇主要在講將以往所有手動的步驟，包括網站建置及發佈到 GitHub Pages 等，盡量調整為一個 script 來處理&lt;/p&gt;&#xA;&lt;p&gt;起因是因為種種因素，所以這個 Blog 停更了很久，其實也就是懶，還有之前沒有找到符合我要求的佈景主題。所以把手動的步驟減少，懶惰的理由就少了一個&lt;/p&gt;&#xA;&lt;p&gt;至於佈景主題我自己是有幾個要求:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;主要是給 Blog 用。這個要求是因為其實有很多佈景主題是給 Portfolio, Landing Page 等等使用的，所以首頁或 pages 的功能很強，文件都在講這些，但我都不需要&lt;/li&gt;&#xA;&lt;li&gt;文章要在側邊自動生成 Table of Content。這個就是 Blog 的要求，很多佈景主題是沒有支援這個功能的&lt;/li&gt;&#xA;&lt;li&gt;要有 Category 跟 Tag 的功能&lt;/li&gt;&#xA;&lt;li&gt;風格簡單&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;這些要求看起來很基本，但不知道為什麼，就算只滿足 2、3 項的交集都極少。目前找到最符合要求的就是 &lt;a href=&#34;https://themes.gohugo.io/themes/hugo-theme-diary/&#34;&gt;Diary&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;換 theme 的部分參考&lt;a href=&#34;https://gohugo.io/getting-started/quick-start/#step-3-add-a-theme&#34;&gt;官網&lt;/a&gt;，沒什麼好說的&lt;/p&gt;&#xA;&lt;p&gt;主要講如何部署到 GitHub Pages 的部分&lt;/p&gt;&#xA;&lt;h2 id=&#34;部署到-github-pages&#34;&gt;部署到 GitHub Pages&lt;/h2&gt;&#xA;&lt;p&gt;以我的了解，主要有三種方式&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;直接部署&lt;/li&gt;&#xA;&lt;li&gt;資料夾部署&lt;/li&gt;&#xA;&lt;li&gt;分支部署&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;直接部署&#34;&gt;直接部署&lt;/h3&gt;&#xA;&lt;p&gt;就是只單獨把建置 (&lt;code&gt;hugo&lt;/code&gt;) 出來的 &lt;code&gt;public&lt;/code&gt; 資料夾推到 GitHub main branch，然後在 repo 的 Pages 設定頁面指定 Source 為 main branch&lt;/p&gt;&#xA;&lt;h3 id=&#34;資料夾部署&#34;&gt;資料夾部署&lt;/h3&gt;&#xA;&lt;p&gt;這個方式是把整個專案包含原始檔都推到 GitHub main branch，然後在 repo 的 Pages 設定頁面指定 Source 為 main branch 的 docs 資料夾&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hugo 入門教學</title>
      <link>https://blog.idontwannarock.me/2019/05/hugo_tutorial/</link>
      <pubDate>Tue, 07 May 2019 16:03:07 +0800</pubDate>
      <guid>https://blog.idontwannarock.me/2019/05/hugo_tutorial/</guid>
      <description>&lt;p&gt;我個人在建立部落格的路上碰到了很多問題：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Wordpress 要花錢，雖然好像不多，但作為一個沒有人看的部落格，這樣還要花錢就是不爽&lt;/li&gt;&#xA;&lt;li&gt;沒有網路無法寫文章，就算寫了純文字的內容，等有網路後貼到 Wordpress 的編輯器還要重新設定字體大小等等&lt;/li&gt;&#xA;&lt;li&gt;沒辦法在自己的電腦或電腦們很方便的做備份，而且我只是個&lt;i&gt;&lt;del&gt;簡單的男人&lt;/del&gt;&lt;/i&gt;簡單的部落格，不需要備份一堆只有 Wordpress 能用的東西好嗎&lt;/li&gt;&#xA;&lt;li&gt;不能用工程師宅宅必備命令列工具裝潮，假裝駭客任務&lt;/li&gt;&#xA;&lt;li&gt;最重要的，身為一個工程師宅宅，用 Wordpress 寫部落格說得出口嗎？很顯然可以，但要付錢我就不想用&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;如果你對以上絕大多數的問題都有切身之痛，那可以考慮繼續閱讀下去，否則建議還是直接使用 Wordpress 或 Wix 吧&lt;/p&gt;&#xA;&lt;h1 id=&#34;hugo-與靜態網站&#34;&gt;Hugo 與靜態網站&lt;/h1&gt;&#xA;&lt;p&gt;唉唷，還繼續，那大概不是 M 就是工程師宅宅相關種，那靜態網站不用講了，Hugo 自己研究就好啦，本篇結束&lt;/p&gt;&#xA;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;&#xA;&lt;p&gt;不能醬喔？那好吧&lt;/p&gt;&#xA;&lt;p&gt;Hugo 是一種 Static Site Generator, SSG 靜態網站產生器，靜態網站簡單來說就是有固定內容的網站，所謂的固定內容就是 HTML 這種瀏覽器可以直接開啟的網頁檔案，配合 CSS, Javascript 做美化，這些檔案只要沒有被修改過，每次打開都會產生固定的內容，所以稱為靜態網站&lt;/p&gt;&#xA;&lt;p&gt;而基於後面會提到 Hugo 這個工具的特性，它很適合用來產生部落格，使用者只需要撰寫 Markdown 這種純文字檔案作為每篇文章的內容，就可以透過 Hugo 快速的建立或修改網站，而不必每次都要修改相對應的 HTML 甚至 CSS 及 Javascript 檔案&lt;/p&gt;&#xA;&lt;p&gt;Hugo 作為一個世界範圍內前三熱門的 SSG 工具，它還有很多熱心工程師宅宅幫他寫了很多佈景主題讓使用者可以直接套用來產生網站，所以使用者只需要把文章內容寫成 Markdown 這種純文字檔案，就可以直接用 Hugo 將文章按照佈景主題產生出美美的網站了&lt;/p&gt;&#xA;&lt;h1 id=&#34;這樣誰看的到&#34;&gt;這樣誰看的到？&lt;/h1&gt;&#xA;&lt;p&gt;不過這樣產生出來的網站有一個關鍵的問題，這些檔案只放在你電腦裡，沒人看得到，除了你自己&lt;/p&gt;&#xA;&lt;p&gt;所以我們需要「把它放到網路上」&lt;/p&gt;&#xA;&lt;p&gt;一般要做到「把它放到網路上」並且「誰都看得見」，其實要做很多事情，例如租用網路空間、買域名、部署網站等等，Wordpress 的好處就在這，它提供一條龍的服務幫你做到底&lt;/p&gt;&#xA;&lt;p&gt;但現在沒有 Wordpress 而且要堅持不花錢的懶惰工程師宅宅原則，所以我們要走另一條路，使用 Git 跟 GitHub&lt;/p&gt;&#xA;&lt;h1 id=&#34;gitgithub-與-github-pages&#34;&gt;Git、GitHub 與 GitHub Pages&lt;/h1&gt;&#xA;&lt;p&gt;Git 是一種版本控制工具，簡單來說就是可以保存每次改動檔案的紀錄的工具，所以要做修改或要放棄修改，也不會因為存了檔或沒存檔就整個完蛋&lt;/p&gt;</description>
    </item>
    <item>
      <title>Git 及 GitHub 基礎認識</title>
      <link>https://blog.idontwannarock.me/2017/09/git_and_github_basic/</link>
      <pubDate>Thu, 14 Sep 2017 07:13:01 +0800</pubDate>
      <guid>https://blog.idontwannarock.me/2017/09/git_and_github_basic/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;這篇文章是初學的時候撰寫的，其中一些觀念並不正確，步驟也可能因為更新或觀念問題而不適用或者多餘，此篇文章僅為留做紀錄&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;學習目標&#34;&gt;學習目標&lt;/h1&gt;&#xA;&lt;p&gt;因為 Git 指令一直出問題，今天就來搞清楚 Git 跟 GitHub 的各種問題吧！&lt;/p&gt;&#xA;&lt;h1 id=&#34;學習內容&#34;&gt;學習內容&lt;/h1&gt;&#xA;&lt;h2 id=&#34;git-跟-github-是什麼&#34;&gt;Git 跟 GitHub 是什麼&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://zh.wikipedia.org/zh-tw/Git&#34;&gt;Git Wiki&lt;/a&gt; 則說 Git 是一種分散式版本控制軟體。&lt;/p&gt;&#xA;&lt;p&gt;詳細的說明可以參考 &lt;a href=&#34;https://goo.gl/YzDiHy&#34;&gt;Git Documentation&lt;/a&gt;，有中文版，不過只有前幾個主題有翻譯。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://zh.wikipedia.org/zh-tw/GitHub&#34;&gt;GitHub Wiki&lt;/a&gt;上說，GitHub 是一個透過 Git 進行版本控制的軟體原始碼代管服務，簡單來說就是可以放各種 Code 的地方，但其實也可以放一些文件跟圖片等，好像沒有空間限制，只是有單一檔案大小 1GB 的軟性限制。&lt;/p&gt;&#xA;&lt;h3 id=&#34;git-觀念&#34;&gt;Git 觀念&lt;/h3&gt;&#xA;&lt;p&gt;這裡我們來先解釋一下 Git版本控制的觀念，我覺得 &lt;a href=&#34;https://hellolynn.hpd.io/&#34;&gt;寫點科普&lt;/a&gt; 寫的這兩篇寫得非常平易近人而且完整，推薦給大家！&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://hellolynn.hpd.io/2017/01/18/git%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80%E6%95%99%E5%AD%B8-part-1/&#34;&gt;GIT新手入門教學 – PART 1&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://hellolynn.hpd.io/2017/01/18/git%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80%E6%95%99%E5%AD%B8-part-2/&#34;&gt;GIT新手入門教學 – PART 2&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;我的理解是譬如有一份作業需要大家一起作，大家先把原始的作業文件 (origin) 放在小組長那邊 (remote)，然後各自 copy 一份回家 (local) 寫自己要做的部分，然後拿回去給小組長，由小組長決定誰的作業寫得好，可以成為新一代的原始作業文件 (master)；或某人提交的作業寫得不完整，但寫過地那部分很好，就跟原始作業合併 (merge) 成一份新一代的原始作業文件。大家也可以 copy 別人寫的作業回去修改 (pull)，反正最後由小組長決定哪個版本的作業寫得最好，就可以成為新一代的原始作業文件這樣。&lt;/p&gt;&#xA;&lt;p&gt;而大家 copy 回家寫的作業也有三個階段，假如我在電腦上打作業，分成三個資料夾，一個是 Working Directory、一個是 Staging Area、一個是 Repository。&lt;/p&gt;&#xA;&lt;p&gt;第一個資料夾就是放 copy 回家的作業，然後我可能亂打了一些、新增修改了一些，但交出去很丟臉的部分；第二個資料夾就是放某些我覺得可以的部分作業，先暫時存起來；最後一個資料夾就是放我確定要提交的作業版本。&lt;/p&gt;&#xA;&lt;p&gt;所以我寫作業的流程就是這樣：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;先 copy 一份 (pull) 原始作業文件 (origin) 回家 (local)&lt;/li&gt;&#xA;&lt;li&gt;在 Working Directory 資料夾寫作業，找各種資料，新增刪減等等&lt;/li&gt;&#xA;&lt;li&gt;將比較滿意的部分暫存 (add) 到 Staging Area 資料夾&lt;/li&gt;&#xA;&lt;li&gt;當 Staging Area 資料夾有比較完整的作業版本後，再儲存 (commit) 到 Repository 資料夾中&lt;/li&gt;&#xA;&lt;li&gt;最後將 Repository 資料夾中要繳交的作業交出去 (push) 給小組長 (remote)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;建立-github-帳號&#34;&gt;建立 GitHub 帳號&lt;/h2&gt;&#xA;&lt;p&gt;接下來說明實際操作流程。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
