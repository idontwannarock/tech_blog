<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Howard Tech Note</title>
    <link>https://blog.idontwannarock.me/posts/</link>
    <description>Recent content in Posts on Howard Tech Note</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This website by Howard Wang is licensed under a Creative Common Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Tue, 31 Oct 2023 11:59:03 +0800</lastBuildDate><atom:link href="https://blog.idontwannarock.me/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MySQL 8.0 使用 UTC_TIMESTAMP() 當作 DATETIME 欄位預設值 bug</title>
      <link>https://blog.idontwannarock.me/2023/10/mysql_8_utc_timestamp_as_datetime_default_bug/</link>
      <pubDate>Tue, 31 Oct 2023 11:59:03 +0800</pubDate>
      
      <guid>https://blog.idontwannarock.me/2023/10/mysql_8_utc_timestamp_as_datetime_default_bug/</guid>
      <description>情境描述 最近在處理 MySQL 的時候採到一個坑
我的使用情境是需要一個 create date 紀錄資料產生時的 UTC 時間精準到 millisecond
首先考慮到 MySQL 的 TIMESTAMP 資料型態是採用 epoch second 加上額外的 fractional seconds 精準到 microseconds，也就是最多記錄到 &amp;lsquo;2038-01-19 03:14:07.999999&amp;rsquo; 就會 overflow，如果採用 DATETIME(3) 可以記錄到 &amp;lsquo;9999-12-31 23:59:59.999&amp;rsquo;
接著因為欄位必填，所以考慮設定預設值，此時有幾種選擇，NOW()、CURRENT_TIMESTAMP、UTC_TIMESTAMP，其中 NOW() 與 CURRENT_TIMESTAMP 都會依照 MySQL 系統時區產生時間，但是 DATETIME 並不保存時區資訊，所以為了避免時區問題，所以選擇預設值設定為 (UTC_TIMESTAMP(3))，剛好在 8.0.13 開始可以將 DATETIME 資料型態的欄位預設值設為 function (UTC_TIMESTAMP())
但是設定完後發生了很奇怪的問題，後續進行的 ALTER TABLE DDL 操作都會失敗並拋出 ERROR 1067: Invalid default value for &amp;lt;columnName&amp;gt; 錯誤，例如執行以下 sql
ALTER TABLE tableName ADD COLUMN newColumnName BIGINT NULL; 明明新增的是 BIGINT 而且沒有預設值，卻拋出 ERROR 1067: Invalid default value for createdDateColumn 的錯誤，簡直莫名其妙讓人丈二和尚摸不著頭腦</description>
    </item>
    
    <item>
      <title>Spring JPA Projection with Converter</title>
      <link>https://blog.idontwannarock.me/2023/09/spring_jpa_projection_converter/</link>
      <pubDate>Wed, 20 Sep 2023 09:37:21 +0800</pubDate>
      
      <guid>https://blog.idontwannarock.me/2023/09/spring_jpa_projection_converter/</guid>
      <description>Pre-requisite JDK 11+ Spring Boot 2+ 情境描述 使用 JPA 做單表查詢非常方便，但有時候因為效能考量，會出現 DB data type 與 Java data type 無法直接對應或需要做一些客製化調整
例如在保存狀態時，因為狀態通常有固定且少量的值，所以會考慮採用 int 而非 varchar 來保存，在存儲大小跟查詢效能上都較優
CREATE TABLE CHATROOM ( ... `STATUS` INT NOT NULL, ... ); 但在程式面都採用 Java 的 int 來操作狀態，可讀性相對較低，所以可能會考慮採用 enum 來操作，可讀性較佳且有 type check
public enum ChatroomStatus { CLOSED, ACTIVE } 設定 Converter 但 JPA 預設並不能將 Java enum 與 MySQL int 做 mapping，所以會需要提供 converter 讓 JPA 知道怎麼做轉換
首先需要調整 enum 如下
public enum ChatroomStatus { CLOSED(0), ACTIVE(1); private final int value; ChatroomStatus(int value) { this.</description>
    </item>
    
    <item>
      <title>Scoop 介紹及用法</title>
      <link>https://blog.idontwannarock.me/2023/06/scoop/</link>
      <pubDate>Tue, 20 Jun 2023 10:51:39 +0800</pubDate>
      
      <guid>https://blog.idontwannarock.me/2023/06/scoop/</guid>
      <description>Linux 有 apt, yum、MacOS 有 Homebrew、Windows 有 Chocolatey
但今天要介紹 Windows 環境的另外一個 command line 套件管理工具 Scoop
在 Windows 環境，比較有名的 command line 套件管理工具是 Chocolatey，但今天要介紹的 Scoop 有一項 Chocolatey 沒辦法做到的好處，就是可以切換 Path Environment Variable
安裝 Scoop 的安裝非常簡單，打開 非 Administrator (系統管理員) 的 Powershell，並輸入以下指令即可安裝
Set-ExecutionPolicy RemoteSigned -Scope CurrentUser irm get.scoop.sh | iex 使用 Scoop 既然是套件管理工具，那重要的工作就是安裝套件，而 Scoop 有支援什麼套件固然可以直接 Google 的到，但其實也不是沒有方式直接在 command line 搜尋
例如想安裝 7zip 壓縮工具，可以在 powershell 當中這樣搜尋
scoop search 7zip 應該會出現如下的結果
第一行說明代表這次結果是在本地的 bucket 當中搜尋到的，表格當中的 Name 就是套件名稱，之後所有操作都要輸入 Name 當中顯示的完整名稱，Source 就是指套件所在的 bucket</description>
    </item>
    
    <item>
      <title>Gradle &#43; Docker Multi-stage build</title>
      <link>https://blog.idontwannarock.me/2022/12/gradle_docker_multi_stage_build/</link>
      <pubDate>Thu, 15 Dec 2022 10:18:10 +0800</pubDate>
      
      <guid>https://blog.idontwannarock.me/2022/12/gradle_docker_multi_stage_build/</guid>
      <description>Java 專案整合 Docker multi-stage build 系列：
Maven + Docker Multi-stage build Gradle + Docker Multi-stage build 前一篇講過 Maven 配合 Docker multi-stage build 的優化概念跟實作，這篇順便來講一下 Gradle 的部分
Docker Multi-stage Build 前一篇已經介紹過建置 Java 專案配合 Docker multi-stage build 的優化概念，這邊就不再贅述，直接上 Dockerfile：
FROM gradle:7.6-alpine AS Cache WORKDIR /opt/app ENV GRADLE_USER_HOME /cache COPY build.gradle ./ RUN gradle --no-daemon dependencies --stacktrace FROM gradle:7.6-jdk11-alpine AS Builder WORKDIR /opt/app COPY --from=Cache /cache /home/gradle/.gradle COPY build.gradle settings.gradle ./ COPY src /opt/app/src RUN gradle --no-daemon build --stacktrace --offline FROM azul/zulu-openjdk-alpine:11-jre-headless WORKDIR /opt/app COPY --from=Builder /opt/app/build/libs/*.</description>
    </item>
    
    <item>
      <title>Maven &#43; Docker Multi-stage Build</title>
      <link>https://blog.idontwannarock.me/2022/12/maven_docker_multi_stage_build/</link>
      <pubDate>Wed, 14 Dec 2022 14:14:44 +0800</pubDate>
      
      <guid>https://blog.idontwannarock.me/2022/12/maven_docker_multi_stage_build/</guid>
      <description>Java 專案整合 Docker multi-stage build 系列：
Maven + Docker Multi-stage build Gradle + Docker Multi-stage build 現代常見的 CI/CD 流程經常會使用容器化 (containerized) 的方式來幫助建置環境及部署
以 Java + Maven 專案舉例，一個比較通用的 Dockerfile 可能長這樣：
FROM maven:3.8-openjdk-11 WORKDIR /opt/app COPY src/main/resources /opt/app/src/main/resources COPY src/main/java /opt/app/src/main/java COPY pom.xml . RUN mvn -B -e clean package EXPOSE 8080 ENTRYPOINT [&amp;#34;java&amp;#34;, &amp;#34;-jar&amp;#34;, &amp;#34;demo.jar&amp;#34;] 這個 Dockerfile 其實沒有問題，完全可以正常運行，但它使用上有一個地方不太方便，就是每次運行到 RUN mvn -B -e clean package 這行的時候，除非程式碼跟 pom.xml 都沒有變動，否則所有 dependencies 都會重新下載一遍，如果專案比較大型，那光下載 dependencies 可能就會要花很久的時間
Docker Multi-stage Build 於是就有人使出了 Docker multi-stage build 這招</description>
    </item>
    
    <item>
      <title>SpringFox to SpringDoc</title>
      <link>https://blog.idontwannarock.me/2022/12/springfox_to_springdoc/</link>
      <pubDate>Mon, 12 Dec 2022 09:24:17 +0800</pubDate>
      
      <guid>https://blog.idontwannarock.me/2022/12/springfox_to_springdoc/</guid>
      <description>以 Spring Boot 生態來說，比較主流的 documentation 方式應該就是 Swagger，以往應該多數人都是使用 SpringFox library，但近幾年也漸漸興起使用 SpringDoc，所以就做了一點筆記，紀錄要怎麼從 SpringFox 轉移到 SpringDoc
比較 這兩者同樣都有實作 OpenAPI 3.0，為什麼我們需要從 SpringFox 轉移使用 SpringDoc？
springfox-boot-starter 包含許多 Spring 的 transitive dependencies；springdoc-openapi-ui 則是 standalone 的 library，並沒有跟 Spring 的依賴 springfox-boot-starter 需要額外 dependency 才有 Swagger UI 的呈現；springdoc-openapi-ui 則已經內含 Swagger UI SpringDoc 在一些細節功能上更強大，例如提供陣列參數更好的 UI 做輸入 最重要的一點，SpringFox 幾乎已經不再更新；而 SpringDoc 還有在常態維護，因此也能跟較新版本的 Spring 有更好的整合，也能更即時的修正 bug 升級步驟 相當簡單，參考 官方文件 即可
因為都是實作 OpenAPI，就算 SpringFox 有實作 2.0 版，但跟 3.0 其實差異也不大
主要就是改一下 dependency，然後 annotation 調整一下，其他幾乎沒有不同
注意事項 Spring Security 若有整合 Spring Security，則可以在 controller 透過加註 @AuthenticationPrincipal 註解注入驗證過的 principal 物件，但這個物件不需要呈現在 Swagger 上</description>
    </item>
    
    <item>
      <title>Quartz Misfire Handling Instruction</title>
      <link>https://blog.idontwannarock.me/2022/11/quartz-misfire-handling-instruction/</link>
      <pubDate>Tue, 29 Nov 2022 15:21:19 +0800</pubDate>
      
      <guid>https://blog.idontwannarock.me/2022/11/quartz-misfire-handling-instruction/</guid>
      <description>Quartz 系列：
Quartz 介紹 Spring Boot 整合 Quartz 集群執行預設及動態排程 Quartz Misfire Handling Instruction 使用 Quartz 來幫助排程管理很方便，但還有一個需要注意的地方，就是設定 misfire handling instruction
Misfire 概念 首先要來釐清在 Quartz 的架構下，什麼情況能稱為 misfire，其實講到底就只有一種：「Job 在到達預定該觸發的時間未觸發」
但怎樣算是未觸發，其實主要有兩個條件，第一個是設定的「觸發時間」，第二個則是「misfireThreshold」
舉例來說如果有一個 Job 設定 12:00 觸發，並且 Quartz 的 misfireThreshold 設定為 2min，因此當我在 12:01 準備要執行的時候，因為已經超過設定的觸發時間，但還沒有超過 misfireThreshold 的 2min，所以並不會被 Quartz 認為是 misfire
那另一方面來說，以同樣的例子而言，如果 Quartz 準備要執行的時候已經是 12:03，那這個 Job 的這次執行就會被認為是 misfire，這時候 Quartz 就會依照設定好的 misfire handling instruction 來執行未觸發時的動作
這樣舉例就能很清楚的理解 misfireThreshold 的意義
要在 Spring Boot 整合 Quartz 專案中設定 misfireThreshold，可在 properties 檔中設定 spring.</description>
    </item>
    
    <item>
      <title>Spring Boot 整合 Quartz 集群執行預設及動態排程</title>
      <link>https://blog.idontwannarock.me/2022/11/quartz-cluster-fixed-and-dynamic-trigger-spring-boot-integration/</link>
      <pubDate>Tue, 15 Nov 2022 16:54:13 +0800</pubDate>
      
      <guid>https://blog.idontwannarock.me/2022/11/quartz-cluster-fixed-and-dynamic-trigger-spring-boot-integration/</guid>
      <description>Quartz 系列：
Quartz 介紹 Spring Boot 整合 Quartz 集群執行預設及動態排程 Quartz Misfire Handling Instruction Spring Boot 官方本身就有 spring-boot-starter-quartz 來提供 Quartz 整合，所以在 Spring Boot 當中使用基本 Quartz 功能已經非常簡單
至於動態產生排程，網路上也很多教學，只是大多是採用 API 呼叫的方式去動態產生、運行、暫停、刪除排程等功能，而幾乎沒看到利用預設排程定時從 database 取得動態排程設定，並動態產生或移除排程的功能
接下來探討如何在 Spring Boot 整合 Quartz 的框架中實作以上需求，來達成依照自訂動態排程來發通知的需求
以下討論採用 Spring Boot 2.7.5 及 Quartz 2.3.2 版本並搭配 MySQL 做持久化
Database Schema 首先需要在 MySQL 內建立相關的 schema，可以利用官方提供的這個 script 來建立，並額外依照以下 sql 建立動態通知排程的 table：
create table if not exist NOTIFICATION_SCHEDULE ( ID int auto_increment primary key, CRON varchar(100) not null comment &amp;#39;Quartz type cron&amp;#39;, TIMEZONE varchar(64) default &amp;#39;Asia/Taipei&amp;#39; null, TEMPLATE_ID int not null, IS_ONLINE tinyint(1) default 1 null, IS_DELETED tinyint(1) default 0 null, CREATE_TIME datetime default CURRENT_TIMESTAMP null, UPDATE_TIME datetime null on update CURRENT_TIMESTAMP ) comment &amp;#39;紀錄通知排程資訊&amp;#39;; Dependency 接著在 pom 檔引用以下依賴：</description>
    </item>
    
    <item>
      <title>Quartz 介紹</title>
      <link>https://blog.idontwannarock.me/2022/11/quartz-intro/</link>
      <pubDate>Tue, 15 Nov 2022 16:24:46 +0800</pubDate>
      
      <guid>https://blog.idontwannarock.me/2022/11/quartz-intro/</guid>
      <description>Quartz 系列：
Quartz 介紹 Spring Boot 整合 Quartz 集群執行預設及動態排程 Quartz Misfire Handling Instruction Quartz 是 Java 生態中一套成熟的開源排程框架，其完整的排程功能包含多樣排程設定、自動任務調度、任務持久化，以及支援分散式排程調度、自動負載平衡，讓排程可以輕鬆運行、應用可以輕鬆 scale out
概念 核心元件 Job: 任務需要執行的內容；Job 有區分是否可併行執行，不能併行執行意思是只有上一次觸發的任務執行完後才能觸發下一次執行；另外，一個 Job 可以關聯到多個 Trigger，也就是同一個 Job 可以以不同時間規則多次觸發，但一個 Trigger 只能關聯一個 Job JobDetail: 包含任務的設定，也就是要實例化 Job 時的相關設定；由 JobKey (Job 名稱 name 和分組 group)、JobClass、JobDataMap (任務相關數據)、JobBuilder 組成，並可以設定任務調度的方案和策略，並指定要調度的 Job 類別 Trigger: 設定觸發執行 Job 實例的時間規則；Scheduler 負責掃描需要執行的 Job 任務，而 Trigger 負責告訴 Scheduler 何時執行；Quartz 2.3.2 版提供 SimpleTrigger、CronTrigger、DailyTimeIntervalTrigger 及 CalendarIntervalTrigger 等 Trigger Scheduler: 任務調度器，會讀取 Trigger 從而觸發以 JobDetail 產生的 Job 實例；一個調度器中可以註冊多個 JobDetail 及 Trigger，只要 JobDetail 與 Trigger 組合，就可以被 Scheduler 調度 單體 stand-alone 模式運作 流程很簡單，就是 Scheduler 負責管理 Trigger 及 Job，會讀取 Trigger 並按照設定觸發時間規則，到時間就依照 JobDetail 設定產生跟該 Trigger 關聯的 Job 實例並運行</description>
    </item>
    
    <item>
      <title>Spring Boot 後端實作 XSS 防範</title>
      <link>https://blog.idontwannarock.me/2022/11/xss_prevention_spring_boot/</link>
      <pubDate>Tue, 01 Nov 2022 15:28:32 +0800</pubDate>
      
      <guid>https://blog.idontwannarock.me/2022/11/xss_prevention_spring_boot/</guid>
      <description>XSS 系列：
XSS 防範簡介 Spring Boot 後端實作 XSS 防範 身為一個 Java 後端工程師，今天要來討論如何在 Spring Boot 的後端專案進行 general 的 XSS 防範。
請還是注意，general 的手段並不能很良好的防範 XSS 攻擊，而只是提供一個基本程度的防範。
CSP Header 如果專案有整合 Spring Security，Spring Security 原生就已經預設在 response header 中加入 X-XSS-Protection: 1; mode=block，但因為 CSP 需要自行設定資源允許的來源，所以 Spring Security 並沒有預設，需要在 SecurityFilterChain 當中設定，舉例如下：
@Bean SecurityFilterChain filterChain(HttpSecurity httpSecurity) throws Exception { httpSecurity.headers().contentSecurityPolicy(&amp;#34;script-src &amp;#39;self&amp;#39;&amp;#34;); ... } 如此就會在 response header 中加入 Content-Security-Policy: script-src &#39;self&#39;。
Output Encoding 再來，後端也可以對接收到或回傳的資料做 escape，例如採取將內容都做 escape，將符號都轉換成 HTML Entities 的方式。
首先可以加入 Apache Commons Text dependency，有現成的方法可以處理文字中符號轉換的部分：</description>
    </item>
    
    <item>
      <title>XSS 防範簡介</title>
      <link>https://blog.idontwannarock.me/2022/11/xss_prevention_intro/</link>
      <pubDate>Tue, 01 Nov 2022 14:00:26 +0800</pubDate>
      
      <guid>https://blog.idontwannarock.me/2022/11/xss_prevention_intro/</guid>
      <description>XSS 系列：
XSS 防範簡介 Spring Boot 後端實作 XSS 防範 跨網站指令碼 Cross-site Scripting, XSS，是一種代碼注入的攻擊，讓攻擊者在網頁上注入代碼，而其他使用者在觀看網頁的時候就會受到影響。
攻擊模式 以電商系統舉例，例如管理後台網頁表單的商品描述輸入欄位 Input 在沒有進行相對應防範的前提下，攻擊者可以藉由輸入 &amp;lt;script&amp;gt;alert(document.cookie)&amp;lt;/script&amp;gt; 這段內容，並透過 API 保存到資料庫，如此一來下次其他使用者在瀏覽該商品的時候，也同樣從後端取得資料庫中的這段描述內容，並且顯示在網頁上，則使用者在載入網頁的時候，瀏覽器就可能會跳出彈窗並把使用者當下的 cookie 直接顯示出來。
當然實際的攻擊不會只有跳出彈窗並印出資料這麼簡單，可能是竊取 cookie 或任何 JavaScript 可以存取的敏感資料、側錄使用者行為，或跳轉惡意網址等等行為。
當然注入的代碼也不僅限於 JavaScript，也可以是 Java、VBScript 等，甚至是普通的 HTML。
跟 CSRF 的區別 另一種常搞混的攻擊是跨站請求偽造 Cross-site Request Forgery, CSRF，是一種挾制使用者在當前已登入的 Web 應用程式上執行非本意的操作的攻擊方法。
例如使用者可能使用某網路銀行做轉帳，當使用者不小心存取到惡意的網址，就可能因為瀏覽器中之前登錄該網路銀行的登錄資訊尚未過期，所以被存取的網路銀行因為信任瀏覽器保存的登錄資訊，而認為是真正的使用者在進行操作而去執行某些動作。
跟 XSS 相比，XSS 利用的是「使用者對指定網站的信任」，CSRF 利用的則是「網站對使用者網頁瀏覽器的信任」。
防範措施 OWASP 網站 有提出一些基本的防範措施，但要能真正達到成效，是需要多種手段結合、前後端合作才能達到。並且攻擊手段常常是並用，所以採取防範措施的時候，也要考慮並防範其他種攻擊手段。
Output Encoding 這部分首先會需要了解使用的 Web Framework 的安全措施跟限制在哪。
例如 React 預設會對 render 內容進行跳脫處理 (escape)，將所有的資料都視為文字字串，等同使用原生的 textContent；但有些時候我們就是需要 React 將內容也 render 成 HTML，因此需要使用 dangerouslySetInnerHTML 來做 render，那可能就沒辦法依靠框架預設的方式去阻止 XSS，而是要使用其他手段來做處理。</description>
    </item>
    
    <item>
      <title>Java Optional 為何不推薦做為類別屬性</title>
      <link>https://blog.idontwannarock.me/2022/10/java_optional_not_recommand_as_field/</link>
      <pubDate>Sat, 01 Oct 2022 21:44:34 +0800</pubDate>
      
      <guid>https://blog.idontwannarock.me/2022/10/java_optional_not_recommand_as_field/</guid>
      <description>大家有在寫 Java 1.8+ 的時候使用新出的 Optional 類別來處理 null 的問題嗎？
那在使用的時候有沒有碰到 IntelliJ 提示 Optional 不推薦用來當作類別的 field 的黃色警告 (warning) 呢？訊息應該大致如下
/** * A container object which may or may not contain a non-{@code null} value. * If a value is present, {@code isPresent()} returns {@code true}. If no * value is present, the object is considered &amp;lt;i&amp;gt;empty&amp;lt;/i&amp;gt; and * {@code isPresent()} returns {@code false}. * * &amp;lt;p&amp;gt;Additional methods that depend on the presence or absence of a contained * value are provided, such as {@link #orElse(Object) orElse()} * (returns a default value if no value is present) and * {@link #ifPresent(Consumer) ifPresent()} (performs an * action if a value is present).</description>
    </item>
    
    <item>
      <title>ProtoBuf FlatBuf Benchmark in Java</title>
      <link>https://blog.idontwannarock.me/2022/01/protobuf_flatbuf_java/</link>
      <pubDate>Tue, 04 Jan 2022 15:36:17 +0800</pubDate>
      
      <guid>https://blog.idontwannarock.me/2022/01/protobuf_flatbuf_java/</guid>
      <description>繼續之前研究的 gRPC，除了 HTTP/2 以外，另外一個支柱就是 Protocol Buffers (ProtoBuf)
ProtoBuf 是一種二進制的序列化資料格式，透過介面描述語言 (Interface description language, IDL) 來描述資料結構，再利用工具依據 IDL 產生程式碼，這些程式碼可以用來生成或解析代表這些資料結構的位元組流
ProtoBuf 是 Google 原本用來內部使用的資料格式，但現在已開源，加上被 gRPC 原生支援，現在已經是重要的序列化 library
Google 官方支援了許多語言的工具用來轉換 IDL 為代碼，但其中很不巧的不包含我目前工作上避不開的 Lua 或 TypeScript，所以我又另外找到同樣也是 Google 推出的 FlatBuffers (FlatBuf)，同樣也是二進制的序列化 library，但官方支援的語系就很多了，正好也包括 Lua 及 TypeScript
雖然 Google 官方已經在努力讓 FlatBuf 也被 gRPC 支援，但目前官方文件上還只有 C++ 的版本，並沒有我日常使用的語言
不過沒關係，我工作上的專案目前並不是一定要使用 gRPC，我完全可以利用其他傳輸協定例如 HTTP, WebSocket 或甚至 Socket 來傳輸資料，我只需要一種能夠讓各語系通用的資料格式，並且盡可能有官方長期支援即可
Benchmark 方法 雖然剛好 FlatBuf 都符合我的需求，但 FlatBuf 使用的人似乎還不多，雖然官方文件上說 Facebook 已經將 FlatBuf 使用在 Android App 上，不過總是沒有自己親身試驗來的準，也一併試驗開發的困難度
所以乾脆來做 ProtoBuf 跟 FlatBuf 的 benchmark 來比較一下各自序列化的速度以及記憶體大致用量</description>
    </item>
    
    <item>
      <title>gRPC 概念</title>
      <link>https://blog.idontwannarock.me/2021/12/grpc/</link>
      <pubDate>Mon, 27 Dec 2021 09:44:31 +0800</pubDate>
      
      <guid>https://blog.idontwannarock.me/2021/12/grpc/</guid>
      <description>在前幾篇大略了解 HTTP/2 的概念後，就可以來了解 gRPC 的運作概念了
HTTP/2 系列:
HTTP/2 系列 - HTTP/2 概念 HTTP/2 系列 - HTTP Server Push 技術 概念 gRPC 原本是 Google 內部的 RPC 系統，後來開源後，近年成為很熱門的 RPC 系統，採用 HTTP/2 做傳輸，ProtoBuf 作為介面描述語言 (interface description language)，提供身分驗證 (authentication)、雙向串流 (bidirectional streaming)、流量控制 (flow control)、阻塞或非阻塞綁定 (blocking or nonblocking binding)、取消 (cancellation) 及逾時 (timeouts) 等特性
RPC Remote Procedure Call 遠端程序呼叫指服務之間互相溝通就如同呼叫本地程式一般，不須關注呼叫互動的細節。例如以前的 CORBA, Java RMI 等
使用 gRPC API 主要是透過 .proto 檔定義 service 結構，再透過 ProtoBuf compiler 的幫助產生各語言的 client/server 端代碼
client 端會有一個本地物件 stub 實作 service 中相同的方法，讓 client 端可以直接呼叫該本地物件的方法，gRPC 會處理發出 request 以及從 server 端的 ProtoBuf response server 端會真正實作 service 中宣告的方法，並運行 gRPC server 來處理 client 端的呼叫，gRPC infra 會將 request 解碼，執行 service 方法，再將 service response 編碼 Image from gRPC Official Documentation</description>
    </item>
    
    <item>
      <title>HTTP/2 系列 - HTTP Server Push 技術</title>
      <link>https://blog.idontwannarock.me/2021/12/http_server_push/</link>
      <pubDate>Fri, 24 Dec 2021 15:49:27 +0800</pubDate>
      
      <guid>https://blog.idontwannarock.me/2021/12/http_server_push/</guid>
      <description>這篇預計是 HTTP/2 系列的最後一篇，之前在系列前面已經釐清了 HTTP/2 的概念了，其中我比較有興趣的就是 HTTP/2 的 server push 新特性，這邊就繼續來了解一下吧~
HTTP/2 系列:
HTTP/2 系列 - HTTP/2 概念 HTTP/2 系列 - HTTP Server Push 技術 HTTP Server Push 技術 首先來探討一下有哪些基於 HTTP 協定的 server push 技術
相對於 request-response 模型必須要一端發出 request 後另一端再對應的發出 response，server push 一般是指不經 client 端發出指定的 request 就由 server 端發出 message 給 client 端
這種技術在某些情況是很有用的，像是需要「即時」更新資料的應用場景，例如比賽分數，當然這可以在 client 端採用定時輪詢 (polling) 的方式來實作，但這樣其實對於 client 端或 server 端都會造成資源的浪費，因為可能大多數請求實際上都沒有需要更新的資料，實際上知道資料有變動的就是 server 端，如果可以由 server 端在資料真正有變動的時候主動通知 client 端，就可以將資料元的浪費降到最低
也因為在許多需要「即時」的情況下由 server 端主動通知 client 端都可以節省大量效能浪費，所以才會一直都有追求 server push 技術的需求存在</description>
    </item>
    
    <item>
      <title>HTTP/2 系列 - HTTP/2 概念</title>
      <link>https://blog.idontwannarock.me/2021/12/http2/</link>
      <pubDate>Tue, 21 Dec 2021 09:06:29 +0800</pubDate>
      
      <guid>https://blog.idontwannarock.me/2021/12/http2/</guid>
      <description>從 2015 年 RFC 7540 正式發表後，至今 HTTP/2 已經被絕大多數主流瀏覽器所支援，並且是正當紅的 gRPC 的基礎，在研究 gPRC 之前，先來釐清一下 HTTP/2 的概念
這篇是 HTTP/2 系列文章的第一篇:
HTTP/2 系列 - HTTP/2 概念 HTTP/2 系列 - HTTP Server Push 技術 不過，我其實只想研究我想研究的部分，所以不見得會把 HTTP/2 所有相關的內容都研究一遍
從遠古 HTTP/1.0 開始 HTTP 是定義在 OSI 模型第七層 Application Layer 網路協議，HTTP/1.0 採取先進先出 (first-in first-out, FIFO) 策略，每次請求/回應都是有序的，必須等到請求收到對應回應後，才能進行下一次請求
HTTP 在 Transport Layer 採用 TCP 連線來通訊，而 TCP 要在 client/server 之間建立連線，是靠著三向交握 (three-way handshake) 來完成；而傳輸完成要斷線時則要做四次握手 (four-way handshake)。如果還有 TLS，那握手的來回通訊次數 (round-trip time, RTT) 就更多次了
而在最初的 HTTP/1.0 的年代，硬體普遍效能都不高，為了提高系統的效率，所以 HTTP/1.</description>
    </item>
    
    <item>
      <title>在 Batch Script 壓縮檔案</title>
      <link>https://blog.idontwannarock.me/2021/12/zip_in_batch_script/</link>
      <pubDate>Thu, 16 Dec 2021 15:32:25 +0800</pubDate>
      
      <guid>https://blog.idontwannarock.me/2021/12/zip_in_batch_script/</guid>
      <description>因為目前公司沒有專職 SRE 或 DevOps 幫忙做 CI/CD，身為小小後端工程師只好自己想辦法，偏偏目前用到的 tech stack 包括 .net framework，所以必須跟 Windows 環境的 batch file 打交道來替代習慣的 shell 檔，其中有個步驟必須要壓縮/解壓縮資料夾
Tar 研究了一下，很興奮的發現 tar 在 command prompt 跟 powershell 都可以用，那代表我在 batch 檔裡面使用沒問題ＲＲＲ
所以可以這樣用
:: zip tar -cvzf &amp;#34;path and name to archive.tar&amp;#34; &amp;#34;path to folder to compress&amp;#34; :: unzip tar -xvzf &amp;#34;path and name to archive.tar&amp;#34; Microsoft.Powershell.Archive Module 很可惜，這個方法有一個小小的問題
tar 基本上是從 Windows 10 或 Windows Server 2019 才開始支援，很不巧，我手上有個環境是 Windows Server 2016&amp;hellip;
基於可以用原生就絕不多安裝東西的自虐原則，好險又找到了另一個方法，powershell 有個 archive 的模組可以用！</description>
    </item>
    
    <item>
      <title>Sql Server 備份方式</title>
      <link>https://blog.idontwannarock.me/2021/11/sql_server_backup/</link>
      <pubDate>Tue, 16 Nov 2021 11:58:47 +0800</pubDate>
      
      <guid>https://blog.idontwannarock.me/2021/11/sql_server_backup/</guid>
      <description>最近工作上碰到需要對 Sql Server 做 snapshot 的場合，所以就順便來研究一下怎麼對 Sql Server 做備份
按照過去的經驗，我第一個想法就是找 Sql Server 有沒有類似 mysqldump 或 pg_dump 的工具可以直接將 schema 及 data 導出成 SQL 檔，這樣方便閱讀也方便各種場景下重建資料庫，尤其是在資料庫的 table 數量及資料量並不算大的前提下
結果，我太天真了，Microsoft 怎麼可能這麼好用 (誤)，人家就是要走自己的路！
備份檔案格式 Sql Server 備份出來的檔案格式有以下幾種
bak: schema + data + log + file，適合做定時備份，因為他會保持包含 index 在內的資料以維持 single point of time 的 transactionally consistent DACPAC: schema，適合建立測試環境或比對各環境版本；但也支持下參數加上 data 的備份。實際上是 xml 的壓縮檔 BACPAC: schema + data，適合轉移或 archive db。schema 部分與 DACPAC 相同，只是加上用 BCP 匯出資料 sql 備份工具 主要有以下幾種備份工具
SqlCmd (官方) BCP (官方) SMO (官方) SqlPackage.</description>
    </item>
    
    <item>
      <title>Hugo 半自動部署</title>
      <link>https://blog.idontwannarock.me/2021/11/hugo_semi_auto_deploy/</link>
      <pubDate>Wed, 03 Nov 2021 16:29:03 +0800</pubDate>
      
      <guid>https://blog.idontwannarock.me/2021/11/hugo_semi_auto_deploy/</guid>
      <description>這篇主要在講將以往所有手動的步驟，包括網站建置及發佈到 GitHub Pages 等，盡量調整為一個 script 來處理
起因是因為種種因素，所以這個 Blog 停更了很久，其實也就是懶，還有之前沒有找到符合我要求的佈景主題。所以把手動的步驟減少，懶惰的理由就少了一個
至於佈景主題我自己是有幾個要求:
主要是給 Blog 用。這個要求是因為其實有很多佈景主題是給 Portfolio, Landing Page 等等使用的，所以首頁或 pages 的功能很強，文件都在講這些，但我都不需要 文章要在側邊自動生成 Table of Content。這個就是 Blog 的要求，很多佈景主題是沒有支援這個功能的 要有 Category 跟 Tag 的功能 風格簡單 這些要求看起來很基本，但不知道為什麼，就算只滿足 2、3 項的交集都極少。目前找到最符合要求的就是 Diary
換 theme 的部分參考官網，沒什麼好說的
主要講如何部署到 GitHub Pages 的部分
部署到 GitHub Pages 以我的了解，主要有三種方式
直接部署 資料夾部署 分支部署 直接部署 就是只單獨把建置 (hugo) 出來的 public 資料夾推到 GitHub main branch，然後在 repo 的 Pages 設定頁面指定 Source 為 main branch
資料夾部署 這個方式是把整個專案包含原始檔都推到 GitHub main branch，然後在 repo 的 Pages 設定頁面指定 Source 為 main branch 的 docs 資料夾</description>
    </item>
    
    <item>
      <title>Spring Boot 實作 API 版本控制</title>
      <link>https://blog.idontwannarock.me/2019/09/spring_api_version_with_swagger_security/</link>
      <pubDate>Thu, 19 Sep 2019 15:53:36 +0800</pubDate>
      
      <guid>https://blog.idontwannarock.me/2019/09/spring_api_version_with_swagger_security/</guid>
      <description>本文目的是為了探討在 Spring Boot Web 專案中，實作 API 版本控制，並兼容 Swagger 及 Spring Security 的解決方式
需要有 Spring Boot、Spring MVC、Spring Security 及 Swagger 的基礎概念會比較好理解
API 版本控制 常見的 API 版本控制方式有三種: URI, header, content-type
考量到 RESTful API 其中的一個好處是方便快取，使用 header 跟 content-type 的方式則可能無法正確的快取以及達成 idempotent，所以我個人採用的是在 URI 中加入版本號的方式
再來因為有時候面對的專案有數量眾多的 handler，導致每次修改版本號都要手動修改每一支 handler 對應的 uri，這樣既麻煩又不潮，所以一定要研究一下怎麼在 Spring Boot 專案中利用註解的方式自動幫 handler 對應的 uri 自動插入版本號
Tech Stack 專案採用的是 Spring Boot 2.0 架構，Java 1.8 版本
有關 Maven 依賴如下:
org.springframework.boot:spring-boot-starter-web:2.1.x org.springframework.boot:spring-boot-starter-security:2.1.x io.springfox:springfox-swagger2:2.9.2 io.springfox:springfox-swagger-ui:2.9.2 這邊強調要採用 Spring Boot 主要是因為想要利用 Spring Boot auto configuration 的功能，也因為想要利用這個功能，所以過程才會這麼曲折&amp;hellip;</description>
    </item>
    
    <item>
      <title>Spring Security 整合 RBAC</title>
      <link>https://blog.idontwannarock.me/2019/05/spring_security_rbac/</link>
      <pubDate>Thu, 30 May 2019 15:33:07 +0800</pubDate>
      
      <guid>https://blog.idontwannarock.me/2019/05/spring_security_rbac/</guid>
      <description>目前比較主流的 Role-based Access Control, RBAC 算是比較成熟且彈性的權限架構，若要在 Spring Security 實作 RBAC 並搭配 JWT 或 OAuth 2.0，大概要探討兩個問題
是否值得為了減少查詢資料源的次數，而將角色或權限直接置入 JWT 或 Authorization Server 回傳的 token 是否採取 Spring Security 原生只使用最細粒度的權限來進行存取控制 關於第一個問題，目前的思考點大概就是考量系統的併發度跟使用者總數
如果需要高併發，那自然希望盡量減少查詢資料的次數或資料量，盡量避免同時大量消耗 DB 資源；相反的，如果不需要高併發，那每次驗證都重新取得角色及權限資料也沒關係
使用者數量的考量也是類似，如果每次查詢的成本太高，則盡量減少查詢的次數
而第二個問題，則是要考量實際的業務場景
如果角色跟權限很大量且複雜，或可能要考慮角色分層甚至使用者群組，或不同 Domain 有不同的權限邏輯，則可能用 Spring Security 原生方式會不敷使用，相對如果角色權限結構簡單，則直接使用原生方式可能成本較低
所以以下探討主要專注於使用 Spring Security 提供的自訂空間來實作較為複雜的存取控制
Spring Security 權限架構 首先要探討 Spring Security 原生提供的權限架構
GrantedAuthority: 可以將每個 GrantedAuthority 想成是個別的 privilege，所以在 Spring Security 中，authority 就是 privilege 的概念 Role: 在 Spring Security 中為了保持彈性，Role 可以當作 Authority 也可以當作一組 Authority 的組合 Role as Authority: 直接把 Role 當成一種 Authority 的情況，就是將 Role 當作一個有 ROLE_ 前綴的字串，這種情況下 Role 跟 Authority 就只是語意上的差別 Role as Container: Role 可以包含一組 Authority，Spring Security 在這個概念上沒有提供太多指引說明，需要自行實作 Granted Authority Versus Role in Spring Security</description>
    </item>
    
    <item>
      <title>Github Flow 簡介</title>
      <link>https://blog.idontwannarock.me/2019/05/github_flow_intro/</link>
      <pubDate>Wed, 29 May 2019 10:52:45 +0800</pubDate>
      
      <guid>https://blog.idontwannarock.me/2019/05/github_flow_intro/</guid>
      <description>Understanding the GitHub flow
GitHub flow 只有一條原則：
在 master 的任何 commit 永遠都是可以被部署的
所以所有要做開發的 branch 都直接從 master 分支出去，不論是 feature 或 fix
開發的每個 commit 都要寫清楚 message，註明該 commit 做的變動以及理由等等
當開發到一定階段後，就可以對 master 開 Pull Request, PR，這在 GitHub flow 很重要
如果是用 Fork &amp;amp; Pull 模式，PR 就是用來通知專案維護者關於你希望他們考慮的變更；如果是用 Shared Repository 模式，則 PR 就像是用來開一個討論空間，在 merge 到 master 之前來做 code review 或針對特定變更的討論
Fork &amp;amp; Pull 模式就是需要先 fork 後再 pull 到本機做開發，完成並 push 後，開 PR 要求合併到主專案
Shared Repository 模式則是直接可以對主專案開 branch 做開發</description>
    </item>
    
    <item>
      <title>Hugo 入門教學</title>
      <link>https://blog.idontwannarock.me/2019/05/hugo_tutorial/</link>
      <pubDate>Tue, 07 May 2019 16:03:07 +0800</pubDate>
      
      <guid>https://blog.idontwannarock.me/2019/05/hugo_tutorial/</guid>
      <description>我個人在建立部落格的路上碰到了很多問題：
Wordpress 要花錢，雖然好像不多，但作為一個沒有人看的部落格，這樣還要花錢就是不爽 沒有網路無法寫文章，就算寫了純文字的內容，等有網路後貼到 Wordpress 的編輯器還要重新設定字體大小等等 沒辦法在自己的電腦或電腦們很方便的做備份，而且我只是個簡單的男人簡單的部落格，不需要備份一堆只有 Wordpress 能用的東西好嗎 不能用工程師宅宅必備命令列工具裝潮，假裝駭客任務 最重要的，身為一個工程師宅宅，用 Wordpress 寫部落格說得出口嗎？很顯然可以，但要付錢我就不想用 如果你對以上絕大多數的問題都有切身之痛，那可以考慮繼續閱讀下去，否則建議還是直接使用 Wordpress 或 Wix 吧
Hugo 與靜態網站 唉唷，還繼續，那大概不是 M 就是工程師宅宅相關種，那靜態網站不用講了，Hugo 自己研究就好啦，本篇結束
不能醬喔？那好吧
Hugo 是一種 Static Site Generator, SSG 靜態網站產生器，靜態網站簡單來說就是有固定內容的網站，所謂的固定內容就是 HTML 這種瀏覽器可以直接開啟的網頁檔案，配合 CSS, Javascript 做美化，這些檔案只要沒有被修改過，每次打開都會產生固定的內容，所以稱為靜態網站
而基於後面會提到 Hugo 這個工具的特性，它很適合用來產生部落格，使用者只需要撰寫 Markdown 這種純文字檔案作為每篇文章的內容，就可以透過 Hugo 快速的建立或修改網站，而不必每次都要修改相對應的 HTML 甚至 CSS 及 Javascript 檔案
Hugo 作為一個世界範圍內前三熱門的 SSG 工具，它還有很多熱心工程師宅宅幫他寫了很多佈景主題讓使用者可以直接套用來產生網站，所以使用者只需要把文章內容寫成 Markdown 這種純文字檔案，就可以直接用 Hugo 將文章按照佈景主題產生出美美的網站了
這樣誰看的到？ 不過這樣產生出來的網站有一個關鍵的問題，這些檔案只放在你電腦裡，沒人看得到，除了你自己
所以我們需要「把它放到網路上」
一般要做到「把它放到網路上」並且「誰都看得見」，其實要做很多事情，例如租用網路空間、買域名、部署網站等等，Wordpress 的好處就在這，它提供一條龍的服務幫你做到底
但現在沒有 Wordpress 而且要堅持不花錢的懶惰工程師宅宅原則，所以我們要走另一條路，使用 Git 跟 GitHub
Git、GitHub 與 GitHub Pages Git 是一種版本控制工具，簡單來說就是可以保存每次改動檔案的紀錄的工具，所以要做修改或要放棄修改，也不會因為存了檔或沒存檔就整個完蛋</description>
    </item>
    
    <item>
      <title>AOP 及 Spring AOP 簡述</title>
      <link>https://blog.idontwannarock.me/2018/04/aop_and_spring_aop_basic/</link>
      <pubDate>Tue, 10 Apr 2018 13:22:52 +0800</pubDate>
      
      <guid>https://blog.idontwannarock.me/2018/04/aop_and_spring_aop_basic/</guid>
      <description>這篇文章是初學的時候撰寫的，其中一些觀念並不正確，步驟也可能因為更新或觀念問題而不適用或者多餘，此篇文章僅為留做紀錄
AOP(Aspect-Oriented Programming) 是一種基於 OOP(Object-Oriented Programming) 的改進 AOP 是基於動態代理 (Dynamic Proxy) 這種 design pattern AOP 主要的設計對象是切面 (Aspect)，而切面是用來模組化橫切關注點 (Cross-Cutting Concern) 切面需要定義公共功能，但可以明確定義功能在哪裡或以什麼方式應用，而不必修改受影響的類別。如此切面關注點就可以被模組化到特殊的類別 (切面) 裡面 優點 交易相關的邏輯位於同一位置，便於維護與升級 業務邏輯更簡潔，只包含核心業務代碼 術語及概念 Cross-Cutting Concern 橫切關注點：橫跨應用系統多個流程、模組的功能，例如日誌 (Logging)、安全 (Security) 檢查、交易 (Transaction) 等動作，在許多流程的多個位置都需要執行，這種動作就被稱為橫切關注點 Aspect 切面：橫切關注點被模組化後的一種特殊物件；還未模組化前是橫切關注點，抽取後成為一組一組的切面；另一方面來說代理會將一個一個切面重組為橫切關注點 Advice 通知：切面必須要完成的工作或行為，也就是切面的實作內容。切面裡面的各個方法即是一個、一個的通知 Target 目標：被通知的物件，也就是要被橫切的業務邏輯類別 Proxy 代理：向目標物件通知之後創建的對象。容器會建立一個代理，依照設定去縫合 (weave) 切面到應用程式中 JoinPoint 連接點：程序執行的某個特定位置或時機。例如某個類別的某個方法呼叫前、呼叫後、拋出異常後等等。 連接點由兩個因素決定：以方法表示的程式執行點、相對執行點表示的方位。例如 A 類別的 a() 方法執行前的 JoinPoint 連接點決定要素為：執行點 A#a()，方位為執行前的位置 概念類比：JoinPoint 連接點相當於資料庫的紀錄，切面相當於查詢條件 Pointcut 切面定義：每個類別都有多個連接點，類別的所有方法某種程度上都可以想成是 JoinPoint 連接點。AOP通過切面定位到特定的連接點 Spring AOP AspectJ：Java 社群最完整、最廣為人知的 AOP 實作 Spring 2.0 以上，可以使用基於 AspectJ 的 annotation 註解或基於 XML 設定的 AOP Dependencies Spring commons logging spring beans spring context spring core spring expression Spring AOP aopalliance aspectj weaver spring aop spring aspects 註：Spring 框架的版本可以更動，但須一致</description>
    </item>
    
    <item>
      <title>Java 字串判定</title>
      <link>https://blog.idontwannarock.me/2018/02/java_string_check/</link>
      <pubDate>Tue, 06 Feb 2018 14:09:25 +0800</pubDate>
      
      <guid>https://blog.idontwannarock.me/2018/02/java_string_check/</guid>
      <description>因為開始做專題，開始要作資料檢查，首先會要碰到的就是最基本的檢查是否有輸入資料，也就是要檢查字串，記錄一下 Java 當中有關字串檢查的東西。
去除字串空白 這主要分兩個部分，一是去掉頭尾空白，一是去掉字串中間空白。
去掉頭尾空白就用 .trim()，去掉字串中間空白則可以用 .replaceAll(&amp;quot; &amp;quot;, &amp;quot;&amp;quot;) 的方式簡單完成。
但用 replaceAll() 方法有個小小的問題，就是萬一碰到的是空白字元，例如 \t、\r 這種就會有困難，所以必須要用正規表示式來去除，例如：
String str = &amp;#34;\t&amp;#34;; str.replaceAll(&amp;#34;\\s+&amp;#34;, &amp;#34;&amp;#34;); 檢查空值 接著如果要檢查字串是否有東西，要分成檢查兩種狀態，null 或空字串。
這邊有幾個方法檢查這個部分，但要注意它們實際功能上的區別。
.length == 0 這個是 Java 最原始的功能，基本上就是檢查字串長度是否為 0，回傳值型態為 boolean。
.isEmpty() 這個方法是 Java 6.0 之後推出用來取代 .length() == 0 的方法。isEmpty() 其實也是在檢查字串長度是否為 0，回傳值型態一樣為 boolean。
.equals(&amp;quot;&amp;quot;) 這個功能是用字串的比對功能，比對是否為空字串，結果應該會跟前兩個方法相同。
!= null 前面幾個方法都有一個共同的問題：萬一字串為 null，全都來不及檢查就會跳 NullPointerException。
所以必須要用這個方式檢查是否為 Null，再檢查是否為空字串，也就是要寫成類似下面這樣：
String string; if (string != null &amp;amp;&amp;amp; string.isEmpty()) { // things to do when string is neither null nor blank; } &amp;quot;&amp;quot;.</description>
    </item>
    
    <item>
      <title>Java 樂透抽取算法初探</title>
      <link>https://blog.idontwannarock.me/2017/11/java_lottery_algorithm_basic/</link>
      <pubDate>Wed, 15 Nov 2017 14:26:17 +0800</pubDate>
      
      <guid>https://blog.idontwannarock.me/2017/11/java_lottery_algorithm_basic/</guid>
      <description>因為做到這個經典練習演算法的題目，雖然是非常入門級的，也是讓我想了很久，覺得都做了這麼久，不記錄下來也是蠻可惜。
題目 請隨機從正整數 1-42當中隨機抽出 6個數字，不用排序，但不可重複。
解法 樂透這個題目主要可以練習的有三個地方，隨機、迴圈，還有就是如何確保數字不重複。
以 Java 來說，隨機就是使用 java.lang.Math 類別裡的靜態方法 random()，但要注意Math.random() 之後產生的是大於等於 0、小於 1，也就是 0 &amp;lt;= Math.random() &amp;lt; 1 的 double 型態浮點常數。
因此，以這題來說，還要記得利用 (int) 轉換型態成整數型態的常數。
另外，若不放心浮點數轉換為整數後的值，可以利用一樣是 Math 類別裡的靜態方法 floor() 或 ceiling() 來取無條件進位或無條件捨去後的整數值。 而產生指定範圍內的亂數的公式為 Math.random() * 範圍個數 + 初值
然後因為已經確定要抽出的數目，所以可以使用元素個數不能變動的陣列，當然也可以用可以變動個數的 Collection 或其子介面去解決。關鍵就在於不可重複。
這篇只討論陣列的解法。
暴力解：重複檢查 最簡單的寫法肯定就是暴力解：每抽出一個數字就存到結果陣列，然後每抽一次，就跟陣列裡每個數字都比對一次，一有重複就重抽。
// 設定存儲樂透數字陣列 int[] randomArray = new int[6]; // 執行抽取樂透數字的動作 6次 for (int i = 0; i &amp;lt; randomArray.length; i++) { // 先將亂數出來的數字存入陣列第 i個位置 randomArray[i] = (int)(Math.</description>
    </item>
    
    <item>
      <title>Macbook Pro 的設置 2017 版</title>
      <link>https://blog.idontwannarock.me/2017/11/mbp_setup_2017/</link>
      <pubDate>Fri, 03 Nov 2017 09:05:02 +0800</pubDate>
      
      <guid>https://blog.idontwannarock.me/2017/11/mbp_setup_2017/</guid>
      <description>這篇文章是初學的時候撰寫的，其中一些觀念並不正確，步驟也可能因為更新或觀念問題而不適用或者多餘，此篇文章僅為留做紀錄
一直以來都是 PC 人，從來沒用過任何 Apple 或 Linux 的相關產品，剛好有買筆電的需求，想趁機接觸一下不同的作業系統生態，而且久聞 Apple 筆電品質很好，就添購了 Macbook Pro 來當我人生第一台筆電。
剛拿到筆電總是需要一些設置，盡量讓 PC 跟 MBP 之間資訊同步以及應用軟體上相通或相容，以達到同步並簡化作業環境的目標，提高生產效率。
於是跟朋友詢問以及上網稍作了解後，有了以下的設置。
軟體環境設置 因為是要習慣 Unix-based 的作業環境，所以我並沒有特別強求各方面都要設置到跟 Windows 環境類似，所以操作模式上並沒有更動。
但安裝的軟體上就有些考量，希望能達到集中管理，這就不得不提每個 MacOS 都應該必備的 Homebrew。
安裝 Homebrew Homebrew 是一套開源的 MacOS 系統的軟體套件管理系統，用來簡化 MacOS 系統上的軟體安裝、卸載等過程，是用 MacOS 內建的 Ruby 語言寫成。
但 Homebrew 在安裝前需要先安裝 Xcode，似乎是因為 Xcode 會一併安裝一些常用的 command line。
還好 Xcode 也是免費軟體，可以直接透過 App Store 下載，要注意檔案蠻大的，下載安裝的過程會要花一點時間。
Xcode 安裝好之後，就打開「終端機」，輸入下面這行來下載安裝 Homebrew：
$ ruby -e &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;#34; 注意第一個 $ 是開啟終端機就會顯示在你可以打字的那一行的開頭，不用重複輸入。
讓他自動跑完之後，就可以開始使用 brew 指令來操作啦！</description>
    </item>
    
    <item>
      <title>Markdown 語法</title>
      <link>https://blog.idontwannarock.me/2017/10/markdown_syntax/</link>
      <pubDate>Sun, 22 Oct 2017 15:42:04 +0800</pubDate>
      
      <guid>https://blog.idontwannarock.me/2017/10/markdown_syntax/</guid>
      <description>Markdown 特色 易編寫 相對於 HTML 需要注意各種 tag、屬性、特殊字元，Markdown 是更容易編寫的方式，雖然無法像 HTML 那樣可以直接透過各種屬性，甚至 CSS 來達到各種效果，但純粹以書寫來說，Markdown 的功能已經相當夠用。
轉換 HTML 不過如果有需要的話，Markdown 可以用各種方式轉換成 HTML，以方便我們發布成網頁或部落格文章，網路上有相當多的程式可以達到這點；相對之下，從 HTML 轉換回 Markdown 就沒這麼方便了，主要原因就是 HTML 有相當多屬性等並不被 Markdown 支援，所以有轉換回 Markdown 的困難。
但還是有補救的辦法，在編寫 Markdown 文件的時候，其實還是可以使用 HTML 語法的，我使用過的轉換器都可以讀取 HTML 語法，並正常顯示以及轉換，所以真的有什麼 Markdown 找不到的 HTML 功能，就直接寫 HTML 吧！當然這就需要對 HTML 語法有更多認識了。
編寫／視覺 跟 HTML 一樣，在編寫 Markdown 的時候呈現的畫面，跟實際呈現的畫面其實是不一樣的。
例如我們編寫 Markdown 如下：
- ***This*** is a [sample](http://example.com/ &amp;#34;example.com&amp;#34;). 實際呈現的畫面其實是這樣的：
This is a sample. 所以在編寫 Markdown 的時候，最好找個可以隨時觀看實際畫面的編輯器來確認實際畫面。
區塊元素 換行 原則上按 Enter 鍵就是換行。</description>
    </item>
    
    <item>
      <title>整數溢位 Integer Overflow</title>
      <link>https://blog.idontwannarock.me/2017/10/integer_overflow/</link>
      <pubDate>Sun, 01 Oct 2017 07:04:47 +0800</pubDate>
      
      <guid>https://blog.idontwannarock.me/2017/10/integer_overflow/</guid>
      <description>這是我查到一些資料後的理解，希望能多一點對整數溢位後為何會正負循環的了解。
數字系統 首先要了解的是數字系統，因為一般電腦是採用二進制 (Binary) 來作數字計算，而不是我們習慣的十進制 (Decimal)。
我們一般人都是用十進制，十進制就是用 0、1、2、3、4、5、6、7、8、9 十個數字來表達，一個位數就有十種狀態，從 0 開始往上累積，超過 9 就進一位。
而二進制是什麼呢？二進制就是用 0、1 兩個數字來表達，一個位數就只有兩種狀態表達，從 0 開始往上累積，超過 1 就進一位。
以十進制來說，13 這個數字其實應該寫成 1*10^1 + 3*10^0 這樣。10^0 是 1，也就是代表個位數，乘以幾就是這個位數累積到幾，超過 9 就進一位到 10^1 這一位，也就是十位數；再累積超過 9，就進位到 10^2 百位數，以此類推。
那二進制怎麼表達呢？例如有一個二進制的數字長這樣 1101，如同十進制，我們可以表達成 1*2^3 + 1*2^2 + 0*2^1 + 1*2^0。這樣公式算完的答案其實就是十進制的 13，大家可以算一下試試看。其實其他如八進制、十六進制也是相同原理，只不過超過十進制的進制系統，因為阿拉伯數字無法在單一位數表達 10 以上的數字大小，所以會配合英文字母 A、B、C、D 等等。
另外複習一下國小（國中？）數學，小數點的部分，以我們常用的十進制來說，小數點後第一位是 10^-1、第二位是 10^-2，以此類推；相對的二進制也是一樣規則，小數點後第一位是 2^-1、第二位是 2^-2 這樣。
電腦基本運算方式 前面說到一般電腦是用二進制運算，這是什麼意思？
舉個例子，今天假設一台電腦，我們拉了第一條電線在裡面，一條電線怎麼表達不同的狀態呢？對，就是通電，有通電是一種狀態，沒通電是一種狀態。當然比較實際的作法是透過電壓，高電壓是一種狀態，低電壓是一種狀態，這樣來表達兩種狀態。
因此一條電線就能表達兩種狀態，剛好符合二進制只用 0、1 兩個數字來表達所有數字的狀態，而這樣能表達兩種狀態（1 或 0）的一條電線就是 1 bit。順便講一下因為某些原因，8 bits 被規定為 1 byte。bit 就是我們常聽到的位元，byte 就是我們更常聽到的位元組。</description>
    </item>
    
    <item>
      <title>4th Practice: Twitter Clone</title>
      <link>https://blog.idontwannarock.me/2017/09/twitter_clone/</link>
      <pubDate>Fri, 15 Sep 2017 10:27:28 +0800</pubDate>
      
      <guid>https://blog.idontwannarock.me/2017/09/twitter_clone/</guid>
      <description>第四個目標 練習 PHP、MySQL 跟 MVC，因為 Bootstrap 很方便，所以 HTML 跟 CSS 就這樣吧！廠廠~
作品：史上最簡陋 Twitter 參考：這參考太多了，只能說各種參考 orz 原始碼：可以參考 我的Github 還是要先講一下，這並不是我憑空寫出來的作品，是跟著 Udemy 網路課程教學作出來的。
遇到困難 對自己智商產生質疑 真的是這樣，之所以這麼廢的東西還能作這麼久，事後檢討的結果，絕大多數時間都浪費在因為智商太低產生的各種製造障礙，簡稱製障問題上。
譬如說出現什麼 404 或 500 錯誤訊息，花了三個多小時觀看 stackoverflow 上高手討論，最後發現是 PHP 某一行少加了一個 ;，當天直接氣到作不下去之類的…
debug 作這個真心受教了，要馬每一步都先作測試，要馬就要會查 bug，人生就是要接受 bug 的出現，沒 bug 絕對是陰德值爆滿。
所以我目前領悟到的順序是：
先查 code 有沒有漏加什麼 ; 或 ,或者哪裡括號沒關好，這些出現的頻率超乎你想像，即使有 autocomplete 功能也是一樣 再來用 Chrome 的 Inspect 或 Firefox 的 Inspector 來查錯誤訊息，運氣好就會跟你說你程式碼哪一行有問題 還找不到，先不要急著 google，先查 Log！先查 Log！先查 Log！很重要，所以講三次。通常 Log 也會跟你講執行到哪一行有問題 最後真的都不行，再拿錯誤訊息去拜 google 大神 以上是我的切身之痛，其他的難點在這兩個困難底下，都已經不再重要…喔不是啦，還是補充一個。
AJAX 不太確定這算不算常識，但大家在使用 jQuery+AJAX 的時候要注意 jQuery 的版本，請不要用到 slim 版的喔， jQuery slim 版把 AJAX 功能拿掉了，所以最起碼要用 minified 或更完整的版本，切記切記！</description>
    </item>
    
    <item>
      <title>3rd Practice: Click Click Ben</title>
      <link>https://blog.idontwannarock.me/2017/09/click_click_ben/</link>
      <pubDate>Fri, 15 Sep 2017 10:11:46 +0800</pubDate>
      
      <guid>https://blog.idontwannarock.me/2017/09/click_click_ben/</guid>
      <description>第三個目標 練習 JavaScript 跟 random() 函數。
作品：Click Click Ben 參考：大帥哥 Ben Hsieh ~ 遇到困難 帥哥阿 Ben 照片太難挑 這是我製作這個作品中碰到最大的困難！太多太帥了，我無法選擇！！我的媽！！！誰來救救我！！！！
照片亂數出現位置及亂數間隔時間 其實這個問題我之前就有學過，所以這邊大概紀錄一下作法。
先用 JavaScript 的 Math.random() 來亂數產生 0-1 的浮點數，然後為了適應各種大小的視窗，要乘上 document.documentElement.clientHeight 或 document.documentElement.clientWidth 來亂數產生要往右或往下多少 px 的數字。
然後用 document.getElementById(&amp;quot;id&amp;quot;).style.top 或 document.getElementById(&amp;quot;id&amp;quot;).style.left 來設定位置。
亂數間隔時間則用 setTimeout() 來作，記得括號的兩個參數要用逗點分隔，第一個參數是暫停後要執行的程式，第二個是暫停的時間，單位是千分之一秒。
控制照片出現或消失 原本想都用 JavaScript 控制，但發現直接寫好所有 HTML+CSS 後，用 display: block; 跟 display: none; 來控制最方便。
控制次數 這也沒什麼好說的，只是做個記錄。
最基礎的做法就是設一個變數，然後用 if 判斷來控制次數。
控制次數感覺可以用 for 或 while loop 來寫，但中間要卡一個按的功能，不知道能不能行？</description>
    </item>
    
    <item>
      <title>2nd Practice: Retina Morning Post</title>
      <link>https://blog.idontwannarock.me/2017/09/retina_morning_post/</link>
      <pubDate>Fri, 15 Sep 2017 09:44:03 +0800</pubDate>
      
      <guid>https://blog.idontwannarock.me/2017/09/retina_morning_post/</guid>
      <description>第二個目標 練習報紙排版。
作品：視網膜早報 參考：視網膜 Retina FB圖片 遇到困難 分散對齊 首先遇到的問題就是要讓文字分散對齊，原本以為用 text-align: justify; 可以解決，結果才發現這只能用在超過一行的文字上哭哭。
然後查到一個 jQuery 解法如下，我大概理解原理，但細節還待研究。簡單來說就是算每個字元平均要佔該 div 多少 width 來作分散對齊。
$.fn.strech_text = function(){ var elmt = $(this), cont_width = elmt.width(), txt = elmt.html(), one_line = $(&amp;#39;&amp;#39; + txt + &amp;#39;&amp;#39;), nb_char = elmt.text().length, spacing = cont_width/nb_char, txt_width; elmt.html(one_line); txt_width = one_line.width(); if (txt_width &amp;lt; cont_width){ var char_width = txt_width/nb_char, ltr_spacing = spacing - char_width + (spacing - char_width)/nb_char; one_line.css({&amp;#39;letter-spacing&amp;#39;: ltr_spacing}); } else { one_line.</description>
    </item>
    
    <item>
      <title>1st Practice: Click Click Boom</title>
      <link>https://blog.idontwannarock.me/2017/09/click_click_boom/</link>
      <pubDate>Fri, 15 Sep 2017 07:36:23 +0800</pubDate>
      
      <guid>https://blog.idontwannarock.me/2017/09/click_click_boom/</guid>
      <description>第一個目標 寫個簡單作品來練習 HTML 跟 CSS
作品：Click Click Boom 黑白版本 粉紅大理石版本 黑色大理石版本 遇到困難 置中 左右置中很容易，但上下置中就麻煩了，還要隨瀏覽器視窗大小變動就更麻煩。
最後在 stackoverflow 查到一種解法，就是先設定 position: absolute;，然後 top、bottom、left、right 都設 0，再用 margin: 0; 來自動對齊。
套框 因為想要使用 HTML+CSS 作套框而不是用畫去背圖的方式，這真的殺死很多腦筋，內部框跟文字怎麼排都無法置中，對，又是無法上下置中，用 text-align 只能左右置中，vertical-align 完全不理我。
最後又是 stackoverflow 查到解法，要用 CSS3 的新 property，display: flex; 來解，然後設定 align-item: center; 跟 justify-content: center; 來上下左右置中，但當然衍伸出下個問題。
相容 瀏覽器太多種，新舊版本對 HTML5 或 CSS3 相容度又不一致，真的會搞死，實務上難道也是只能靠經驗？或出問題再來修改嗎？還是有更合理的作法？
最後是上 w3schools 一項一項 property 查相容再加相容敘述 -webkit- 或 -moz- 來解決。
iOS相容 這個真的超哭，我整個都做完了，就只有在 iOS 裝置上，按鈕按不下去！
我先是想說應該是 transform 可能不相容，所以一樣查了 w3schools 加上相容敘述，結果還是不行！</description>
    </item>
    
    <item>
      <title>Git 及 GitHub 基礎認識</title>
      <link>https://blog.idontwannarock.me/2017/09/git_and_github_basic/</link>
      <pubDate>Thu, 14 Sep 2017 07:13:01 +0800</pubDate>
      
      <guid>https://blog.idontwannarock.me/2017/09/git_and_github_basic/</guid>
      <description>這篇文章是初學的時候撰寫的，其中一些觀念並不正確，步驟也可能因為更新或觀念問題而不適用或者多餘，此篇文章僅為留做紀錄
學習目標 因為 Git 指令一直出問題，今天就來搞清楚 Git 跟 GitHub 的各種問題吧！
學習內容 Git 跟 GitHub 是什麼 Git Wiki 則說 Git 是一種分散式版本控制軟體。
詳細的說明可以參考 Git Documentation，有中文版，不過只有前幾個主題有翻譯。
GitHub Wiki上說，GitHub 是一個透過 Git 進行版本控制的軟體原始碼代管服務，簡單來說就是可以放各種 Code 的地方，但其實也可以放一些文件跟圖片等，好像沒有空間限制，只是有單一檔案大小 1GB 的軟性限制。
Git 觀念 這裡我們來先解釋一下 Git版本控制的觀念，我覺得 寫點科普 寫的這兩篇寫得非常平易近人而且完整，推薦給大家！
GIT新手入門教學 – PART 1 GIT新手入門教學 – PART 2 我的理解是譬如有一份作業需要大家一起作，大家先把原始的作業文件 (origin) 放在小組長那邊 (remote)，然後各自 copy 一份回家 (local) 寫自己要做的部分，然後拿回去給小組長，由小組長決定誰的作業寫得好，可以成為新一代的原始作業文件 (master)；或某人提交的作業寫得不完整，但寫過地那部分很好，就跟原始作業合併 (merge) 成一份新一代的原始作業文件。大家也可以 copy 別人寫的作業回去修改 (pull)，反正最後由小組長決定哪個版本的作業寫得最好，就可以成為新一代的原始作業文件這樣。
而大家 copy 回家寫的作業也有三個階段，假如我在電腦上打作業，分成三個資料夾，一個是 Working Directory、一個是 Staging Area、一個是 Repository。
第一個資料夾就是放 copy 回家的作業，然後我可能亂打了一些、新增修改了一些，但交出去很丟臉的部分；第二個資料夾就是放某些我覺得可以的部分作業，先暫時存起來；最後一個資料夾就是放我確定要提交的作業版本。</description>
    </item>
    
    <item>
      <title>實作簡單登入會員系統 (1)</title>
      <link>https://blog.idontwannarock.me/2017/09/login_signup_function_1/</link>
      <pubDate>Mon, 11 Sep 2017 07:11:59 +0800</pubDate>
      
      <guid>https://blog.idontwannarock.me/2017/09/login_signup_function_1/</guid>
      <description>這篇文章是初學的時候撰寫的，其中一些觀念並不正確，步驟也可能因為更新或觀念問題而不適用或者多餘，此篇文章僅為留做紀錄
學習目標 實作簡單會員系統，有加入會員、登入、登出 cookie 防範 SQL Injection+XSS hash 密碼 學習內容 構思 坦白說，我有自學過一點點前後端的 Udemy 網路課程，所以前端的部分，簡單的 HTML, CSS, Javascript, jQuery 我還可以，大概是不會寫也可以谷哥看別人怎麼寫的程度。後端也是學過簡單的 PHP 跟 MySQL 這樣。所以後面的說明很可能會省略很多基礎，而只記錄我不太會或不太熟的部分。
關於會員系統，Udemy 課程的老師其實有教過這個部分，但當時似懂非懂，幾乎就是 copy 老師的程式碼，糊里糊塗就寫出來，PHP 跟 MySQL 的部分一片模糊，所以先來嘗試自己重新寫一遍，不行再來找找看網路教學。
要寫登入登出的功能，我第一個想到就是要用 HTML 的 form 先做三個 input 跟一個 button，若要串接資料庫，應該還要再作一個 button 切換 Sign Up 跟 Login 畫面來作區別。預計應該要用 jQuery 控制切換 Sign Up/Login 的功能。
然後後端邏輯應該就是先作 Sign Up/Login 資料的驗證部分，用 ajax 傳輸資料到後端，檢查輸入的 username、email 跟 password 是否空白、格式是否正確以及是否重複，用 echo 輸出錯誤提示訊息給前端。
接著作 Sign Up 部分，接著剛剛驗證完資料正確後，檢查資料庫有無重複資料後，再把 username、email 跟 password 存進資料庫。</description>
    </item>
    
    <item>
      <title>XAMPP 安裝設定及簡單 PHP 練習</title>
      <link>https://blog.idontwannarock.me/2017/09/xampp_setup_and_php_practice/</link>
      <pubDate>Sun, 10 Sep 2017 07:39:23 +0800</pubDate>
      
      <guid>https://blog.idontwannarock.me/2017/09/xampp_setup_and_php_practice/</guid>
      <description>這篇文章是初學的時候撰寫的，其中一些觀念並不正確，步驟也可能因為更新或觀念問題而不適用或者多餘，此篇文章僅為留做紀錄
源起 之前提到的胡立大大在 Slack 群組裡發布了他擬的教學實驗計畫大綱，大概分為以下四段：
網頁後端相關（Session, Database, Server） 網頁前端相關（HTML, JavaScript, CSS, jQuery） 程式解題相關（帶大家做一些 ACM 一二星題或是基本演算法資料結構） 資訊安全相關（SQL Injection, CSRF, XSS） 裡面還有一堆細項，總之就從頭開始練習，第一項就是「在自己的電腦上成功運行 PHP」，還有給提示可以用 XAMPP 架環境，然後用 PHP 寫 hello world，那就來試試看吧。
學習目標 學習用 XAMPP 建構環境，並用 PHP 寫一句 hello world。
學習內容 什麼是 XAMPP XAMPP官網 的解釋是一個 PHP 開發環境，是一個 Apache 的發行版本，包含了 MariaDB、PHP 和 Perl。
完全看不懂，先來查一下名詞。
PHP 我大概知道，是一種後端的語言，理論上可以配合各種 SQL 語言跟資料庫作溝通，然後再跟前端連結作輸出。至於 PHP 到底算不算程式語言這種問題就跳過。
Apache 則是久聞其名但不知其詳。谷哥上的資料看起來是一種網頁伺服器，但伺服器是什麼？我沒念過計概，我也不知道計概教不教這個，總之就是沒概念，只好再查。
運氣很好，又找到這篇 [WDC] 淺談 Web Server 及 Application Server （上），終於有點概念，這邊說的 server 就是提供 web 服務的伺服器，而不是實體的機器。所以 Apache 就是提供 web 功能的伺服器程式。依照這個脈絡，所謂的 PHP 開發環境，應該是 XAMPP 提供可以運行 PHP 功能的 Apache 伺服器環境，也包括可以運行 MariaDB 跟 Perl。</description>
    </item>
    
    <item>
      <title>Hugo 練習 (2)</title>
      <link>https://blog.idontwannarock.me/2017/09/hugo_practice_2/</link>
      <pubDate>Sat, 09 Sep 2017 15:22:03 +0800</pubDate>
      
      <guid>https://blog.idontwannarock.me/2017/09/hugo_practice_2/</guid>
      <description>這篇文章是初學的時候撰寫的，其中一些觀念並不正確，步驟也可能因為更新或觀念問題而不適用或者多餘，此篇文章僅為留做紀錄
學習目標 學習怎麼使用 Hugo 架設網頁在 Github Pages。
學習內容 環境設定 我並非本科，所以以下作法全都是從各官網跟谷哥研究而來。先說明我只會用 Windows，而且是 Win10，所以想用 MacOS 或 Linux 的可以左轉出去自己上官網跟谷哥研究。
環境設定這邊需要作幾件事，設定 Hugo，設定 Git，新增 Github 帳號，跟設定 SSH，除了設定 SSH 要最後作以外，其他順序無所謂。
Hugo 環境設定 如同上一篇所述，Hugo 雖然是 Go 語言寫的，但現在的版本並不用安裝 Go，只要到 這個網址 下載最新版本，找地方解壓縮，然後將解壓縮後的 exe 檔路徑設定到 Path 環境變數裡面就可以了。
比較完整的流程應該是先創建 Hugo 目錄，例如 C:\Hugo，然後建兩個子資料夾 bin 和 Sites。下載 Hugo 最新版本的 zip 檔，解壓縮到 bin 資料夾裡面，若 exe 檔檔名不是 hugo.exe 就改成 hugo.exe。
然後要設定 Path 環境變數，厲害的人可以直接用 cmd 設定，就不講了。來講我這種菜鳥的方法，右鍵點開始鍵（就是狀態列 Windows 圖案的那個鈕），選「系統」，然後選右上方的「系統資訊」，跳出來視窗後，選左邊的「進階系統設定」，再跳出一個視窗後，選「進階」頁面下方的「環境變數(N)&amp;hellip;」，會再跳出一個視窗分成上下兩區塊，在上方的使用者變數區塊，變數那一欄找到 Path 後，連點兩下又會跳出一個新視窗，這次直接按右邊的「新增(N)」，然後填上剛剛 hugo.exe 的路徑，例如 C:\Hugo\bin，最後再一路按確定以及關閉視窗出去。
然後為了確定是否有設定成功，請再右鍵點一次開始鍵，選「Windows PowerShell(系統管理員)(A)」來打開 PowerShell，然後直接輸入 hugo version 後按 Enter 鍵，如果有顯示出版本資訊，那就是設定成功。</description>
    </item>
    
    <item>
      <title>Hugo 練習 (1)</title>
      <link>https://blog.idontwannarock.me/2017/09/hugo_practice_1/</link>
      <pubDate>Sat, 09 Sep 2017 00:17:31 +0800</pubDate>
      
      <guid>https://blog.idontwannarock.me/2017/09/hugo_practice_1/</guid>
      <description>這篇文章是初學的時候撰寫的，其中一些觀念並不正確，步驟也可能因為更新或觀念問題而不適用或者多餘，此篇文章僅為留做紀錄
源起 2017 年 9 月 7 日在 ptt Soft_Job 版看到胡立大大 po 文準備作一個計劃-建立 Slack 群組來幫助大家練習討論一些網頁相關的東西，而我需要多作一些練習，並且最好能有人詢問或討論所以加入。
而 9 月 8 日胡立大大就回信了，基本上就是解釋他想建立一個開放的群組，群組裡沒有老師，他擔任類似助教的腳色，會固定提出練習的題目，解答一些疑問跟提供一些資源這樣。
其中胡立大大有提到希望大家能養成自學、解決問題以及歸納知識的習慣，我覺得很有道理很重要，所以剛好他也有提到希望大家學習「怎麼用靜態部落格產生系統」，可以練習怎麼使用靜態部落格產生系統、Git 的基本操作以及 Github 的相關知識。
所以，就來吧！
學習目標 學習怎麼用靜態部落格產生系統 Hugo，並且把部落格架在 Github Pages 上面。
學習內容 什麼是靜態、動態 就我看網路多種說法，歸納的概念大概是部落格或網站本身顯示不需要重複跟 server 端交流的就算靜態，反之就算動態；最近因為 SEO 的興起，還有一種偽靜態。
什麼是靜態部落格 (網頁) 產生系統 Static Site Generator 在網路上找到 這篇文章，講得蠻清楚的。
在講什麼是靜態部落格（網頁）產生系統 Static Site Generator(SSG) 之前，應該講一下內容管理系統 Content Management System(CMS)，例如 Wordpress。
CMS 的理念是讓作者不用擔心部落格，也就是網頁輸出的各種技術問題，只需要選擇喜歡的模板 template，就可以使用 CMS 提供的文字編輯器寫作，節省很多技術上的麻煩，相信有用過 Wordpress 都能理解。
但相對之下 CMS 就有一些壞處，例如只能使用 CMS 提供的編輯功能（不然還是要會網頁或程式知識去作修改）、因為很多動態功能所以伺服器工作比較重可能影響效能、可能因為某些軟體或功能升級或資料庫出問題而導致網頁也出問題。
而 SSG 算是在 CMS 跟完全自己 coding 寫網頁架部落格的中間，比較知名的有 Jekyll 跟 Hugo，或胡立提到的 Hexo。</description>
    </item>
    
  </channel>
</rss>
