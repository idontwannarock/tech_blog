<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Implementation on Howard Tech Note</title>
    <link>https://blog.idontwannarock.dev/categories/implementation/</link>
    <description>Recent content in Implementation on Howard Tech Note</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>This website by Howard Wang is licensed under a Creative Common Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Fri, 07 Feb 2025 09:39:10 +0800</lastBuildDate>
    <atom:link href="https://blog.idontwannarock.dev/categories/implementation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>如何在 MySQL 中進行 insert if not exists</title>
      <link>https://blog.idontwannarock.dev/2025/02/how_to_insert_if_not_exists_in_mysql/</link>
      <pubDate>Fri, 07 Feb 2025 09:39:10 +0800</pubDate>
      <guid>https://blog.idontwannarock.dev/2025/02/how_to_insert_if_not_exists_in_mysql/</guid>
      <description>&lt;p&gt;相信很多 Developer 都會真心的 &lt;em&gt;&lt;del&gt;幹譙&lt;/del&gt;&lt;/em&gt; 懷疑為什麼 MySQL 經過這麼多年都沒有 PostgreSQL 的 &lt;code&gt;INSERT … ON DUPLICATE KEY DO NOTHING&lt;/code&gt; 語法，偏偏這真的是一個很常會碰到的使用情境&lt;/p&gt;&#xA;&lt;p&gt;所以接下來探討一些單一 SQL 語法方面可行的做法&lt;/p&gt;&#xA;&lt;h2 id=&#34;準備&#34;&gt;準備&lt;/h2&gt;&#xA;&lt;p&gt;環境為 MySQL server 8.0.37&lt;/p&gt;&#xA;&lt;p&gt;首先建立以下 table (只是為了情境驗證，合理性就先不計較)&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;drop&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;table&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;exists&lt;/span&gt; test_user;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;create&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;table&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;exists&lt;/span&gt; test_user (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    id &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;int&lt;/span&gt; unsigned auto_increment &lt;span style=&#34;color:#ff79c6&#34;&gt;primary&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;key&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    user_id &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;int&lt;/span&gt; unsigned &lt;span style=&#34;color:#ff79c6&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    is_active &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;constraint&lt;/span&gt; uk_user_id_user &lt;span style=&#34;color:#ff79c6&#34;&gt;unique&lt;/span&gt; (user_id)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;) engine &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; innodb charset &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; utf8mb4 &lt;span style=&#34;color:#ff79c6&#34;&gt;collate&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; utf8mb4_0900_ai_ci;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;情境就是要在表中新增一筆 user 紀錄，如果該 user id 已經存在，就不做任何變更&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;每個情境測試前都會重新建立整個 table，以避免其他問題影響測試結果&lt;/p&gt;&#xA;&lt;p&gt;取得 auto increment 數字前，可能需要 &lt;code&gt;analyze table&lt;/code&gt; 以校正數據&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;insert&#34;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;p&gt;第一個方法就是直接 &lt;code&gt;insert&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Percona XtraDB Cluster MySQL with Docker Compose</title>
      <link>https://blog.idontwannarock.dev/2024/10/pxc_mysql_docker_compose/</link>
      <pubDate>Wed, 16 Oct 2024 11:06:41 +0800</pubDate>
      <guid>https://blog.idontwannarock.dev/2024/10/pxc_mysql_docker_compose/</guid>
      <description>&lt;p&gt;因為公司 production 採用 Percona XtraDB Cluster 去架設 MySQL cluster，而 cluster mode 有很多預設的環境設定與非 cluster mode 的設定不同，例如 &lt;code&gt;pxc_strict_mode&lt;/code&gt; 在 cluster mode 下，預設為 &lt;code&gt;ENFORCING&lt;/code&gt; 或 &lt;code&gt;MASTER&lt;/code&gt;，但非 cluster mode 的 &lt;code&gt;pxc_strict_mode&lt;/code&gt; 預設為 &lt;code&gt;DISABLE&lt;/code&gt; 而且還不能調整為 &lt;code&gt;ENFORCING&lt;/code&gt;，導致有些 SQL 語法在 production 不支援&lt;/p&gt;&#xA;&lt;p&gt;為了能夠在本機直接比照 production 環境配置去測試 SQL，所以研究如何快速在本機搭建出 Percona XtraDB Cluster cluster mode 的 MySQL&lt;/p&gt;&#xA;&lt;h1 id=&#34;環境&#34;&gt;環境&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;WSL2 Ubuntu&lt;/li&gt;&#xA;&lt;li&gt;Docker and Docker Compose installed and accessible from terminal&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;作法&#34;&gt;作法&lt;/h1&gt;&#xA;&lt;p&gt;先在同一個資料夾建立以下幾個文件&lt;/p&gt;&#xA;&lt;h2 id=&#34;composeyml&#34;&gt;compose.yml&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;services&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;pxc-mysql&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;image&lt;/span&gt;: percona/percona-xtradb-cluster:8.0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;container_name&lt;/span&gt;: pxc-mysql&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;restart&lt;/span&gt;: always&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;privileged&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;environment&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - MYSQL_ROOT_PASSWORD=root&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - MYSQL_DATABASE=mmschat&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - CLUSTER_NAME=pxc-cluster&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - XTRABACKUP_PASSWORD=root&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;ports&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;3306:3306&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;volumes&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;pxc-mysql-data:/var/lib/mysql&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;./cert:/cert&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;./conf:/etc/percona-xtradb-cluster.conf.d&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;./init.sql:/docker-entrypoint-initdb.d/init.sql&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;volumes&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;pxc-mysql-data&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這份 docker compose 檔建立 pxc cluster mode 的 MySQL&lt;/p&gt;</description>
    </item>
    <item>
      <title>Spring JPA Projection with Converter</title>
      <link>https://blog.idontwannarock.dev/2023/09/spring_jpa_projection_converter/</link>
      <pubDate>Wed, 20 Sep 2023 09:37:21 +0800</pubDate>
      <guid>https://blog.idontwannarock.dev/2023/09/spring_jpa_projection_converter/</guid>
      <description>&lt;h1 id=&#34;pre-requisite&#34;&gt;Pre-requisite&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;JDK 11+&lt;/li&gt;&#xA;&lt;li&gt;Spring Boot 2+&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;情境描述&#34;&gt;情境描述&lt;/h1&gt;&#xA;&lt;p&gt;使用 JPA 做單表查詢非常方便，但有時候因為效能考量，會出現 DB data type 與 Java data type 無法直接對應或需要做一些客製化調整&lt;/p&gt;&#xA;&lt;p&gt;例如在保存狀態時，因為狀態通常有固定且少量的值，所以會考慮採用 &lt;code&gt;int&lt;/code&gt; 而非 &lt;code&gt;varchar&lt;/code&gt; 來保存，在存儲大小跟查詢效能上都較優&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;TABLE&lt;/span&gt; CHATROOM&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;STATUS&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;INT&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;NULL&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但在程式面都採用 Java 的 &lt;code&gt;int&lt;/code&gt; 來操作狀態，可讀性相對較低，所以可能會考慮採用 &lt;code&gt;enum&lt;/code&gt; 來操作，可讀性較佳且有 type check&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;enum&lt;/span&gt; ChatroomStatus {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    CLOSED, ACTIVE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;設定-converter&#34;&gt;設定 Converter&lt;/h1&gt;&#xA;&lt;p&gt;但 JPA 預設並不能將 Java &lt;code&gt;enum&lt;/code&gt; 與 MySQL &lt;code&gt;int&lt;/code&gt; 做 mapping，所以會需要提供 converter 讓 JPA 知道怎麼做轉換&lt;/p&gt;&#xA;&lt;p&gt;首先需要調整 &lt;code&gt;enum&lt;/code&gt; 如下&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;enum&lt;/span&gt; ChatroomStatus {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    CLOSED(0),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ACTIVE(1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; value;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ChatroomStatus(&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; value) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; value;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;static&lt;/span&gt; ChatroomStatus &lt;span style=&#34;color:#50fa7b&#34;&gt;of&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; value) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (ChatroomStatus target : ChatroomStatus.&lt;span style=&#34;color:#50fa7b&#34;&gt;values&lt;/span&gt;()) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (target.&lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; value) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; target;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接著要提供 converter&lt;/p&gt;</description>
    </item>
    <item>
      <title>Scoop 介紹及用法</title>
      <link>https://blog.idontwannarock.dev/2023/06/scoop/</link>
      <pubDate>Tue, 20 Jun 2023 10:51:39 +0800</pubDate>
      <guid>https://blog.idontwannarock.dev/2023/06/scoop/</guid>
      <description>&lt;p&gt;Linux 有 &lt;a href=&#34;https://salsa.debian.org/apt-team/apt&#34;&gt;apt&lt;/a&gt;, &lt;a href=&#34;http://yum.baseurl.org/gitweb/&#34;&gt;yum&lt;/a&gt;、MacOS 有 &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;、Windows 有 &lt;a href=&#34;https://chocolatey.org/&#34;&gt;Chocolatey&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;但今天要介紹 Windows 環境的另外一個 command line 套件管理工具 &lt;a href=&#34;https://scoop.sh/&#34;&gt;Scoop&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;在 Windows 環境，比較有名的 command line 套件管理工具是 Chocolatey，但今天要介紹的 Scoop 有一項 Chocolatey 沒辦法做到的好處，就是可以切換 Path Environment Variable&lt;/p&gt;&#xA;&lt;h1 id=&#34;安裝&#34;&gt;安裝&lt;/h1&gt;&#xA;&lt;p&gt;Scoop 的安裝非常簡單，打開 &lt;strong&gt;非&lt;/strong&gt; Administrator (系統管理員) 的 Powershell，並輸入以下指令即可安裝&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Set-ExecutionPolicy&lt;/span&gt; RemoteSigned -Scope CurrentUser&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;irm &lt;/span&gt;get.scoop.sh | &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;iex&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;使用&#34;&gt;使用&lt;/h1&gt;&#xA;&lt;p&gt;Scoop 既然是套件管理工具，那重要的工作就是安裝套件，而 Scoop 有支援什麼套件固然可以直接 Google 的到，但其實也不是沒有方式直接在 command line 搜尋&lt;/p&gt;&#xA;&lt;p&gt;例如想安裝 7zip 壓縮工具，可以在 powershell 當中這樣搜尋&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scoop search 7zip&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;應該會出現如下的結果&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dcvgho2zc/image/upload/v1687230278/Tech%20Blog/Scoop/image-20230620-014307.png&#34; alt=&#34;Scoop Search Result&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;第一行說明代表這次結果是在本地的 bucket 當中搜尋到的，表格當中的 Name 就是套件名稱，之後所有操作都要輸入 Name 當中顯示的完整名稱，Source 就是指套件所在的 bucket&lt;/p&gt;</description>
    </item>
    <item>
      <title>Gradle &#43; Docker Multi-stage build</title>
      <link>https://blog.idontwannarock.dev/2022/12/gradle_docker_multi_stage_build/</link>
      <pubDate>Thu, 15 Dec 2022 10:18:10 +0800</pubDate>
      <guid>https://blog.idontwannarock.dev/2022/12/gradle_docker_multi_stage_build/</guid>
      <description>&lt;p&gt;Java 專案整合 Docker multi-stage build 系列：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.idontwannarock.dev/2022/12/maven_docker_multi_stage_build/&#34;&gt;Maven + Docker Multi-stage build&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Gradle + Docker Multi-stage build&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;前一篇講過 Maven 配合 Docker multi-stage build 的優化概念跟實作，這篇順便來講一下 Gradle 的部分&lt;/p&gt;&#xA;&lt;h1 id=&#34;docker-multi-stage-build&#34;&gt;Docker Multi-stage Build&lt;/h1&gt;&#xA;&lt;p&gt;前一篇已經介紹過建置 Java 專案配合 Docker multi-stage build 的優化概念，這邊就不再贅述，直接上 Dockerfile：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FROM gradle:7.6-alpine AS Cache&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WORKDIR /opt/app&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ENV GRADLE_USER_HOME /cache&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;COPY build.gradle ./&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;RUN gradle --no-daemon dependencies --stacktrace&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FROM gradle:7.6-jdk11-alpine AS Builder&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WORKDIR /opt/app&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;COPY --from&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;Cache /cache /home/gradle/.gradle&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;COPY build.gradle settings.gradle ./&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;COPY src /opt/app/src&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;RUN gradle --no-daemon build --stacktrace --offline&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FROM azul/zulu-openjdk-alpine:11-jre-headless&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WORKDIR /opt/app&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;COPY --from&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;Builder /opt/app/build/libs/*.jar app.jar&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;EXPOSE &lt;span style=&#34;color:#bd93f9&#34;&gt;8080&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ENTRYPOINT &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;java&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;-jar&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;app.jar&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;步驟同樣大致如下：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Maven &#43; Docker Multi-stage Build</title>
      <link>https://blog.idontwannarock.dev/2022/12/maven_docker_multi_stage_build/</link>
      <pubDate>Wed, 14 Dec 2022 14:14:44 +0800</pubDate>
      <guid>https://blog.idontwannarock.dev/2022/12/maven_docker_multi_stage_build/</guid>
      <description>&lt;p&gt;Java 專案整合 Docker multi-stage build 系列：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Maven + Docker Multi-stage build&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.idontwannarock.dev/2022/12/gradle_docker_multi_stage_build/&#34;&gt;Gradle + Docker Multi-stage build&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;現代常見的 CI/CD 流程經常會使用容器化 (containerized) 的方式來幫助建置環境及部署&lt;/p&gt;&#xA;&lt;p&gt;以 Java + Maven 專案舉例，一個比較通用的 Dockerfile 可能長這樣：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FROM maven:3.8-openjdk-11&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WORKDIR /opt/app&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;COPY src/main/resources /opt/app/src/main/resources&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;COPY src/main/java /opt/app/src/main/java&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;COPY pom.xml .&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;RUN mvn -B -e clean package&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;EXPOSE &lt;span style=&#34;color:#bd93f9&#34;&gt;8080&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ENTRYPOINT &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;java&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;-jar&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;demo.jar&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這個 Dockerfile 其實沒有問題，完全可以正常運行，但它使用上有一個地方不太方便，就是每次運行到 &lt;code&gt;RUN mvn -B -e clean package&lt;/code&gt; 這行的時候，除非程式碼跟 &lt;code&gt;pom.xml&lt;/code&gt; 都沒有變動，否則所有 dependencies 都會重新下載一遍，如果專案比較大型，那光下載 dependencies 可能就會要花很久的時間&lt;/p&gt;&#xA;&lt;h1 id=&#34;docker-multi-stage-build&#34;&gt;Docker Multi-stage Build&lt;/h1&gt;&#xA;&lt;p&gt;於是就有人使出了 Docker multi-stage build 這招&lt;/p&gt;</description>
    </item>
    <item>
      <title>SpringFox to SpringDoc</title>
      <link>https://blog.idontwannarock.dev/2022/12/springfox_to_springdoc/</link>
      <pubDate>Mon, 12 Dec 2022 09:24:17 +0800</pubDate>
      <guid>https://blog.idontwannarock.dev/2022/12/springfox_to_springdoc/</guid>
      <description>&lt;p&gt;以 Spring Boot 生態來說，比較主流的 documentation 方式應該就是 Swagger，以往應該多數人都是使用 SpringFox library，但近幾年也漸漸興起使用 SpringDoc，所以就做了一點筆記，紀錄要怎麼從 SpringFox 轉移到 SpringDoc&lt;/p&gt;&#xA;&lt;h1 id=&#34;比較&#34;&gt;比較&lt;/h1&gt;&#xA;&lt;p&gt;這兩者同樣都有實作 OpenAPI 3.0，為什麼我們需要從 SpringFox 轉移使用 SpringDoc？&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;springfox-boot-starter&lt;/code&gt; 包含許多 Spring 的 transitive dependencies；&lt;code&gt;springdoc-openapi-ui&lt;/code&gt; 則是 standalone 的 library，並沒有跟 Spring 的依賴&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;springfox-boot-starter&lt;/code&gt; 需要額外 dependency 才有 Swagger UI 的呈現；&lt;code&gt;springdoc-openapi-ui&lt;/code&gt; 則已經內含 Swagger UI&lt;/li&gt;&#xA;&lt;li&gt;SpringDoc 在一些細節功能上更強大，例如提供陣列參數更好的 UI 做輸入&lt;/li&gt;&#xA;&lt;li&gt;最重要的一點，SpringFox 幾乎已經不再更新；而 SpringDoc 還有在常態維護，因此也能跟較新版本的 Spring 有更好的整合，也能更即時的修正 bug&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;升級步驟&#34;&gt;升級步驟&lt;/h1&gt;&#xA;&lt;p&gt;相當簡單，參考 &lt;a href=&#34;https://springdoc.org/#migrating-from-springfox&#34;&gt;官方文件&lt;/a&gt; 即可&lt;/p&gt;&#xA;&lt;p&gt;因為都是實作 OpenAPI，就算 SpringFox 有實作 2.0 版，但跟 3.0 其實差異也不大&lt;/p&gt;&#xA;&lt;p&gt;主要就是改一下 dependency，然後 annotation 調整一下，其他幾乎沒有不同&lt;/p&gt;&#xA;&lt;h1 id=&#34;注意事項&#34;&gt;注意事項&lt;/h1&gt;&#xA;&lt;h2 id=&#34;spring-security&#34;&gt;Spring Security&lt;/h2&gt;&#xA;&lt;p&gt;若有整合 Spring Security，則可以在 controller 透過加註 &lt;code&gt;@AuthenticationPrincipal&lt;/code&gt; 註解注入驗證過的 principal 物件，但這個物件不需要呈現在 Swagger 上&lt;/p&gt;</description>
    </item>
    <item>
      <title>Spring Boot 整合 Quartz 集群執行預設及動態排程</title>
      <link>https://blog.idontwannarock.dev/2022/11/quartz-cluster-fixed-and-dynamic-trigger-spring-boot-integration/</link>
      <pubDate>Tue, 15 Nov 2022 16:54:13 +0800</pubDate>
      <guid>https://blog.idontwannarock.dev/2022/11/quartz-cluster-fixed-and-dynamic-trigger-spring-boot-integration/</guid>
      <description>&lt;p&gt;Quartz 系列：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.idontwannarock.dev/2022/11/quartz-intro/&#34;&gt;Quartz 介紹&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Spring Boot 整合 Quartz 集群執行預設及動態排程&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.idontwannarock.dev/2022/11/quartz-misfire-handling-instruction/&#34;&gt;Quartz Misfire Handling Instruction&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Spring Boot 官方本身就有 &lt;code&gt;spring-boot-starter-quartz&lt;/code&gt; 來提供 Quartz 整合，所以在 Spring Boot 當中使用基本 Quartz 功能已經非常簡單&lt;/p&gt;&#xA;&lt;p&gt;至於動態產生排程，網路上也很多教學，只是大多是採用 API 呼叫的方式去動態產生、運行、暫停、刪除排程等功能，而幾乎沒看到利用預設排程定時從 database 取得動態排程設定，並動態產生或移除排程的功能&lt;/p&gt;&#xA;&lt;p&gt;接下來探討如何在 Spring Boot 整合 Quartz 的框架中實作以上需求，來達成依照自訂動態排程來發通知的需求&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;以下討論採用 Spring Boot 2.7.5 及 Quartz 2.3.2 版本並搭配 MySQL 做持久化&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;database-schema&#34;&gt;Database Schema&lt;/h1&gt;&#xA;&lt;p&gt;首先需要在 MySQL 內建立相關的 schema，可以利用官方提供的這個 &lt;a href=&#34;https://github.com/quartz-scheduler/quartz/blob/master/quartz-core/src/main/resources/org/quartz/impl/jdbcjobstore/tables_mysql_innodb.sql&#34;&gt;script&lt;/a&gt; 來建立，並額外依照以下 sql 建立動態通知排程的 table：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;create&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;table&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;not&lt;/span&gt; exist NOTIFICATION_SCHEDULE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ID                &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;int&lt;/span&gt; auto_increment&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;primary&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;key&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    CRON              &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;varchar&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;)                          &lt;span style=&#34;color:#ff79c6&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;comment&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Quartz type cron&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    TIMEZONE          &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;varchar&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Asia/Taipei&amp;#39;&lt;/span&gt;     &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    TEMPLATE_ID       &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;int&lt;/span&gt;                                   &lt;span style=&#34;color:#ff79c6&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    IS_ONLINE         tinyint(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;)  &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;                 &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    IS_DELETED        tinyint(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;)  &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;                 &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    CREATE_TIME       datetime    &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;CURRENT_TIMESTAMP&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    UPDATE_TIME       datetime                              &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;on&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;update&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;CURRENT_TIMESTAMP&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;comment&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;紀錄通知排程資訊&amp;#39;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;dependency&#34;&gt;Dependency&lt;/h1&gt;&#xA;&lt;p&gt;接著在 pom 檔引用以下依賴：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Spring Boot 後端實作 XSS 防範</title>
      <link>https://blog.idontwannarock.dev/2022/11/xss_prevention_spring_boot/</link>
      <pubDate>Tue, 01 Nov 2022 15:28:32 +0800</pubDate>
      <guid>https://blog.idontwannarock.dev/2022/11/xss_prevention_spring_boot/</guid>
      <description>&lt;p&gt;XSS 系列：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.idontwannarock.dev/2022/11/xss_prevention_intro/&#34;&gt;XSS 防範簡介&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Spring Boot 後端實作 XSS 防範&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;身為一個 Java 後端工程師，今天要來討論如何在 Spring Boot 的後端專案進行 general 的 XSS 防範。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;請還是注意，general 的手段並不能很良好的防範 XSS 攻擊，而只是提供一個基本程度的防範。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;csp-header&#34;&gt;CSP Header&lt;/h2&gt;&#xA;&lt;p&gt;如果專案有整合 Spring Security，Spring Security 原生就已經預設在 response header 中加入 &lt;code&gt;X-XSS-Protection: 1; mode=block&lt;/code&gt;，但因為 CSP 需要自行設定資源允許的來源，所以 Spring Security 並沒有預設，需要在 &lt;code&gt;SecurityFilterChain&lt;/code&gt; 當中設定，舉例如下：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@Bean&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SecurityFilterChain &lt;span style=&#34;color:#50fa7b&#34;&gt;filterChain&lt;/span&gt;(HttpSecurity httpSecurity) &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;throws&lt;/span&gt; Exception {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  httpSecurity.&lt;span style=&#34;color:#50fa7b&#34;&gt;headers&lt;/span&gt;().&lt;span style=&#34;color:#50fa7b&#34;&gt;contentSecurityPolicy&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;script-src &amp;#39;self&amp;#39;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如此就會在 response header 中加入 &lt;code&gt;Content-Security-Policy: script-src &#39;self&#39;&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;h2 id=&#34;output-encoding&#34;&gt;Output Encoding&lt;/h2&gt;&#xA;&lt;p&gt;再來，後端也可以對接收到或回傳的資料做 escape，例如採取將內容都做 escape，將符號都轉換成 HTML Entities 的方式。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ProtoBuf FlatBuf Benchmark in Java</title>
      <link>https://blog.idontwannarock.dev/2022/01/protobuf_flatbuf_java/</link>
      <pubDate>Tue, 04 Jan 2022 15:36:17 +0800</pubDate>
      <guid>https://blog.idontwannarock.dev/2022/01/protobuf_flatbuf_java/</guid>
      <description>&lt;p&gt;繼續之前研究的 gRPC，除了 HTTP/2 以外，另外一個支柱就是 Protocol Buffers (ProtoBuf)&lt;/p&gt;&#xA;&lt;p&gt;ProtoBuf 是一種二進制的序列化資料格式，透過介面描述語言 (Interface description language, IDL) 來描述資料結構，再利用工具依據 IDL 產生程式碼，這些程式碼可以用來生成或解析代表這些資料結構的位元組流&lt;/p&gt;&#xA;&lt;p&gt;ProtoBuf 是 Google 原本用來內部使用的資料格式，但現在已開源，加上被 gRPC 原生支援，現在已經是重要的序列化 library&lt;/p&gt;&#xA;&lt;p&gt;Google 官方支援了許多語言的工具用來轉換 IDL 為代碼，但其中很不巧的不包含我目前工作上避不開的 Lua 或 TypeScript，所以我又另外找到同樣也是 Google 推出的 FlatBuffers (FlatBuf)，同樣也是二進制的序列化 library，但官方支援的語系就很多了，正好也包括 Lua 及 TypeScript&lt;/p&gt;&#xA;&lt;p&gt;雖然 Google 官方已經在努力讓 FlatBuf 也被 gRPC 支援，但目前官方文件上還只有 C++ 的版本，並沒有我日常使用的語言&lt;/p&gt;&#xA;&lt;p&gt;不過沒關係，我工作上的專案目前並不是一定要使用 gRPC，我完全可以利用其他傳輸協定例如 HTTP, WebSocket 或甚至 Socket 來傳輸資料，我只需要一種能夠讓各語系通用的資料格式，並且盡可能有官方長期支援即可&lt;/p&gt;&#xA;&lt;h2 id=&#34;benchmark-方法&#34;&gt;Benchmark 方法&lt;/h2&gt;&#xA;&lt;p&gt;雖然剛好 FlatBuf 都符合我的需求，但 FlatBuf 使用的人似乎還不多，雖然官方文件上說 Facebook 已經將 FlatBuf 使用在 Android App 上，不過總是沒有自己親身試驗來的準，也一併試驗開發的困難度&lt;/p&gt;&#xA;&lt;p&gt;所以乾脆來做 ProtoBuf 跟 FlatBuf 的 benchmark 來比較一下各自序列化的速度以及記憶體大致用量&lt;/p&gt;</description>
    </item>
    <item>
      <title>在 Batch Script 壓縮檔案</title>
      <link>https://blog.idontwannarock.dev/2021/12/zip_in_batch_script/</link>
      <pubDate>Thu, 16 Dec 2021 15:32:25 +0800</pubDate>
      <guid>https://blog.idontwannarock.dev/2021/12/zip_in_batch_script/</guid>
      <description>&lt;p&gt;因為目前公司沒有專職 SRE 或 DevOps 幫忙做 CI/CD，身為小小後端工程師只好自己想辦法，偏偏目前用到的 tech stack 包括 .net framework，所以必須跟 Windows 環境的 batch file 打交道來替代習慣的 shell 檔，其中有個步驟必須要壓縮/解壓縮資料夾&lt;/p&gt;&#xA;&lt;h2 id=&#34;tar&#34;&gt;Tar&lt;/h2&gt;&#xA;&lt;p&gt;研究了一下，很興奮的發現 tar 在 command prompt 跟 powershell 都可以用，那代表我在 batch 檔裡面使用沒問題ＲＲＲ&lt;/p&gt;&#xA;&lt;p&gt;所以可以這樣用&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-batch&#34; data-lang=&#34;batch&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:&lt;span style=&#34;color:#6272a4&#34;&gt;: zip&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tar -cvzf &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;path and name to archive.tar&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;path to folder to compress&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:&lt;span style=&#34;color:#6272a4&#34;&gt;: unzip&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tar -xvzf &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;path and name to archive.tar&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;microsoftpowershellarchive-module&#34;&gt;Microsoft.Powershell.Archive Module&lt;/h2&gt;&#xA;&lt;p&gt;很可惜，這個方法有一個小小的問題&lt;/p&gt;&#xA;&lt;p&gt;tar 基本上是從 Windows 10 或 Windows Server 2019 才開始支援，很不巧，我手上有個環境是 Windows Server 2016&amp;hellip;&lt;/p&gt;&#xA;&lt;p&gt;基於可以用原生就絕不多安裝東西的自虐原則，好險又找到了另一個方法，powershell 有個 archive 的模組可以用！&lt;/p&gt;</description>
    </item>
    <item>
      <title>Spring Boot 實作 API 版本控制</title>
      <link>https://blog.idontwannarock.dev/2019/09/spring_api_version_with_swagger_security/</link>
      <pubDate>Thu, 19 Sep 2019 15:53:36 +0800</pubDate>
      <guid>https://blog.idontwannarock.dev/2019/09/spring_api_version_with_swagger_security/</guid>
      <description>&lt;p&gt;本文目的是為了探討在 Spring Boot Web 專案中，實作 API 版本控制，並兼容 Swagger 及 Spring Security 的解決方式&lt;/p&gt;&#xA;&lt;p&gt;需要有 Spring Boot、Spring MVC、Spring Security 及 Swagger 的基礎概念會比較好理解&lt;/p&gt;&#xA;&lt;h1 id=&#34;api-版本控制&#34;&gt;API 版本控制&lt;/h1&gt;&#xA;&lt;p&gt;常見的 API 版本控制方式有三種: URI, header, content-type&lt;/p&gt;&#xA;&lt;p&gt;考量到 RESTful API 其中的一個好處是方便快取，使用 header 跟 content-type 的方式則可能無法正確的快取以及達成 idempotent，所以我個人採用的是在 URI 中加入版本號的方式&lt;/p&gt;&#xA;&lt;p&gt;再來因為有時候面對的專案有數量眾多的 handler，導致每次修改版本號都要手動修改每一支 handler 對應的 uri，這樣既麻煩又不潮，所以一定要研究一下怎麼在 Spring Boot 專案中利用註解的方式自動幫 handler 對應的 uri 自動插入版本號&lt;/p&gt;&#xA;&lt;h1 id=&#34;tech-stack&#34;&gt;Tech Stack&lt;/h1&gt;&#xA;&lt;p&gt;專案採用的是 Spring Boot 2.0 架構，Java 1.8 版本&lt;/p&gt;&#xA;&lt;p&gt;有關 Maven 依賴如下:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;org.springframework.boot:spring-boot-starter-web:2.1.x&lt;/li&gt;&#xA;&lt;li&gt;org.springframework.boot:spring-boot-starter-security:2.1.x&lt;/li&gt;&#xA;&lt;li&gt;io.springfox:springfox-swagger2:2.9.2&lt;/li&gt;&#xA;&lt;li&gt;io.springfox:springfox-swagger-ui:2.9.2&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;這邊強調要採用 Spring Boot 主要是因為想要利用 Spring Boot auto configuration 的功能，也因為想要利用這個功能，所以過程才會這麼曲折&amp;hellip;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
