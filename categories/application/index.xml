<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>application on Howard Tech Note</title>
    <link>https://idontwannarock.github.io/tech_blog/categories/application/</link>
    <description>Recent content in application on Howard Tech Note</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This website by Howard Wang is licensed under a Creative Common Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Thu, 19 Sep 2019 15:53:36 +0800</lastBuildDate><atom:link href="https://idontwannarock.github.io/tech_blog/categories/application/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Spring Boot 實作 API 版本控制</title>
      <link>https://idontwannarock.github.io/tech_blog/2019/09/spring_api_version_with_swagger_security/</link>
      <pubDate>Thu, 19 Sep 2019 15:53:36 +0800</pubDate>
      
      <guid>https://idontwannarock.github.io/tech_blog/2019/09/spring_api_version_with_swagger_security/</guid>
      <description>本文目的是為了探討在 Spring Boot Web 專案中，實作 API 版本控制，並兼容 Swagger 及 Spring Security 的解決方式
需要有 Spring Boot、Spring MVC、Spring Security 及 Swagger 的基礎概念會比較好理解
API 版本控制 常見的 API 版本控制方式有三種: URI, header, content-type
考量到 RESTful API 其中的一個好處是方便快取，使用 header 跟 content-type 的方式則可能無法正確的快取以及達成 idempotent，所以我個人採用的是在 URI 中加入版本號的方式
再來因為有時候面對的專案有數量眾多的 handler，導致每次修改版本號都要手動修改每一支 handler 對應的 uri，這樣既麻煩又不潮，所以一定要研究一下怎麼在 Spring Boot 專案中利用註解的方式自動幫 handler 對應的 uri 自動插入版本號
Tech Stack 專案採用的是 Spring Boot 2.0 架構，Java 1.8 版本
有關 Maven 依賴如下:
 org.springframework.boot:spring-boot-starter-web:2.1.x org.springframework.boot:spring-boot-starter-security:2.1.x io.springfox:springfox-swagger2:2.9.2 io.springfox:springfox-swagger-ui:2.9.2  這邊強調要採用 Spring Boot 主要是因為想要利用 Spring Boot auto configuration 的功能，也因為想要利用這個功能，所以過程才會這麼曲折&amp;hellip;</description>
    </item>
    
    <item>
      <title>Hugo 入門教學</title>
      <link>https://idontwannarock.github.io/tech_blog/2019/05/hugo_tutorial/</link>
      <pubDate>Tue, 07 May 2019 16:03:07 +0800</pubDate>
      
      <guid>https://idontwannarock.github.io/tech_blog/2019/05/hugo_tutorial/</guid>
      <description>我個人在建立部落格的路上碰到了很多問題：
 Wordpress 要花錢，雖然好像不多，但作為一個沒有人看的部落格，這樣還要花錢就是不爽 沒有網路無法寫文章，就算寫了純文字的內容，等有網路後貼到 Wordpress 的編輯器還要重新設定字體大小等等 沒辦法在自己的電腦或電腦們很方便的做備份，而且我只是個簡單的男人簡單的部落格，不需要備份一堆只有 Wordpress 能用的東西好嗎 不能用工程師宅宅必備命令列工具裝潮，假裝駭客任務 最重要的，身為一個工程師宅宅，用 Wordpress 寫部落格說得出口嗎？很顯然可以，但要付錢我就不想用  如果你對以上絕大多數的問題都有切身之痛，那可以考慮繼續閱讀下去，否則建議還是直接使用 Wordpress 或 Wix 吧
Hugo 與靜態網站 唉唷，還繼續，那大概不是 M 就是工程師宅宅相關種，那靜態網站不用講了，Hugo 自己研究就好啦，本篇結束
不能醬喔？那好吧
Hugo 是一種 Static Site Generator, SSG 靜態網站產生器，靜態網站簡單來說就是有固定內容的網站，所謂的固定內容就是 HTML 這種瀏覽器可以直接開啟的網頁檔案，配合 CSS, Javascript 做美化，這些檔案只要沒有被修改過，每次打開都會產生固定的內容，所以稱為靜態網站
而基於後面會提到 Hugo 這個工具的特性，它很適合用來產生部落格，使用者只需要撰寫 Markdown 這種純文字檔案作為每篇文章的內容，就可以透過 Hugo 快速的建立或修改網站，而不必每次都要修改相對應的 HTML 甚至 CSS 及 Javascript 檔案
Hugo 作為一個世界範圍內前三熱門的 SSG 工具，它還有很多熱心工程師宅宅幫他寫了很多佈景主題讓使用者可以直接套用來產生網站，所以使用者只需要把文章內容寫成 Markdown 這種純文字檔案，就可以直接用 Hugo 將文章按照佈景主題產生出美美的網站了
這樣誰看的到？ 不過這樣產生出來的網站有一個關鍵的問題，這些檔案只放在你電腦裡，沒人看得到，除了你自己
所以我們需要「把它放到網路上」
一般要做到「把它放到網路上」並且「誰都看得見」，其實要做很多事情，例如租用網路空間、買域名、部署網站等等，Wordpress 的好處就在這，它提供一條龍的服務幫你做到底
但現在沒有 Wordpress 而且要堅持不花錢的懶惰工程師宅宅原則，所以我們要走另一條路，使用 Git 跟 GitHub</description>
    </item>
    
    <item>
      <title>Macbook Pro 的設置 2017 版</title>
      <link>https://idontwannarock.github.io/tech_blog/2017/11/mbp_setup_2017/</link>
      <pubDate>Fri, 03 Nov 2017 09:05:02 +0800</pubDate>
      
      <guid>https://idontwannarock.github.io/tech_blog/2017/11/mbp_setup_2017/</guid>
      <description>這篇文章是初學的時候撰寫的，其中一些觀念並不正確，步驟也可能因為更新或觀念問題而不適用或者多餘，此篇文章僅為留做紀錄
 一直以來都是 PC 人，從來沒用過任何 Apple 或 Linux 的相關產品，剛好有買筆電的需求，想趁機接觸一下不同的作業系統生態，而且久聞 Apple 筆電品質很好，就添購了 Macbook Pro 來當我人生第一台筆電。
剛拿到筆電總是需要一些設置，盡量讓 PC 跟 MBP 之間資訊同步以及應用軟體上相通或相容，以達到同步並簡化作業環境的目標，提高生產效率。
於是跟朋友詢問以及上網稍作了解後，有了以下的設置。
軟體環境設置 因為是要習慣 Unix-based 的作業環境，所以我並沒有特別強求各方面都要設置到跟 Windows 環境類似，所以操作模式上並沒有更動。
但安裝的軟體上就有些考量，希望能達到集中管理，這就不得不提每個 MacOS 都應該必備的 Homebrew。
安裝 Homebrew Homebrew 是一套開源的 MacOS 系統的軟體套件管理系統，用來簡化 MacOS 系統上的軟體安裝、卸載等過程，是用 MacOS 內建的 Ruby 語言寫成。
但 Homebrew 在安裝前需要先安裝 Xcode，似乎是因為 Xcode 會一併安裝一些常用的 command line。
還好 Xcode 也是免費軟體，可以直接透過 App Store 下載，要注意檔案蠻大的，下載安裝的過程會要花一點時間。
Xcode 安裝好之後，就打開「終端機」，輸入下面這行來下載安裝 Homebrew：
$ ruby -e &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;#34; 注意第一個 $ 是開啟終端機就會顯示在你可以打字的那一行的開頭，不用重複輸入。
讓他自動跑完之後，就可以開始使用 brew 指令來操作啦！</description>
    </item>
    
    <item>
      <title>Git 及 GitHub 基礎認識</title>
      <link>https://idontwannarock.github.io/tech_blog/2017/09/git_and_github_basic/</link>
      <pubDate>Thu, 14 Sep 2017 07:13:01 +0800</pubDate>
      
      <guid>https://idontwannarock.github.io/tech_blog/2017/09/git_and_github_basic/</guid>
      <description>這篇文章是初學的時候撰寫的，其中一些觀念並不正確，步驟也可能因為更新或觀念問題而不適用或者多餘，此篇文章僅為留做紀錄
 學習目標 因為 Git 指令一直出問題，今天就來搞清楚 Git 跟 GitHub 的各種問題吧！
學習內容 Git 跟 GitHub 是什麼 Git Wiki 則說 Git 是一種分散式版本控制軟體。
詳細的說明可以參考 Git Documentation，有中文版，不過只有前幾個主題有翻譯。
GitHub Wiki上說，GitHub 是一個透過 Git 進行版本控制的軟體原始碼代管服務，簡單來說就是可以放各種 Code 的地方，但其實也可以放一些文件跟圖片等，好像沒有空間限制，只是有單一檔案大小 1GB 的軟性限制。
Git 觀念 這裡我們來先解釋一下 Git版本控制的觀念，我覺得 寫點科普 寫的這兩篇寫得非常平易近人而且完整，推薦給大家！
 GIT新手入門教學 – PART 1 GIT新手入門教學 – PART 2  我的理解是譬如有一份作業需要大家一起作，大家先把原始的作業文件 (origin) 放在小組長那邊 (remote)，然後各自 copy 一份回家 (local) 寫自己要做的部分，然後拿回去給小組長，由小組長決定誰的作業寫得好，可以成為新一代的原始作業文件 (master)；或某人提交的作業寫得不完整，但寫過地那部分很好，就跟原始作業合併 (merge) 成一份新一代的原始作業文件。大家也可以 copy 別人寫的作業回去修改 (pull)，反正最後由小組長決定哪個版本的作業寫得最好，就可以成為新一代的原始作業文件這樣。
而大家 copy 回家寫的作業也有三個階段，假如我在電腦上打作業，分成三個資料夾，一個是 Working Directory、一個是 Staging Area、一個是 Repository。</description>
    </item>
    
    <item>
      <title>XAMPP 安裝設定及簡單 PHP 練習</title>
      <link>https://idontwannarock.github.io/tech_blog/2017/09/xampp_setup_and_php_practice/</link>
      <pubDate>Sun, 10 Sep 2017 07:39:23 +0800</pubDate>
      
      <guid>https://idontwannarock.github.io/tech_blog/2017/09/xampp_setup_and_php_practice/</guid>
      <description>這篇文章是初學的時候撰寫的，其中一些觀念並不正確，步驟也可能因為更新或觀念問題而不適用或者多餘，此篇文章僅為留做紀錄
 源起 之前提到的胡立大大在 Slack 群組裡發布了他擬的教學實驗計畫大綱，大概分為以下四段：
 網頁後端相關（Session, Database, Server） 網頁前端相關（HTML, JavaScript, CSS, jQuery） 程式解題相關（帶大家做一些 ACM 一二星題或是基本演算法資料結構） 資訊安全相關（SQL Injection, CSRF, XSS）  裡面還有一堆細項，總之就從頭開始練習，第一項就是「在自己的電腦上成功運行 PHP」，還有給提示可以用 XAMPP 架環境，然後用 PHP 寫 hello world，那就來試試看吧。
學習目標 學習用 XAMPP 建構環境，並用 PHP 寫一句 hello world。
學習內容 什麼是 XAMPP XAMPP官網 的解釋是一個 PHP 開發環境，是一個 Apache 的發行版本，包含了 MariaDB、PHP 和 Perl。
完全看不懂，先來查一下名詞。
PHP 我大概知道，是一種後端的語言，理論上可以配合各種 SQL 語言跟資料庫作溝通，然後再跟前端連結作輸出。至於 PHP 到底算不算程式語言這種問題就跳過。
Apache 則是久聞其名但不知其詳。谷哥上的資料看起來是一種網頁伺服器，但伺服器是什麼？我沒念過計概，我也不知道計概教不教這個，總之就是沒概念，只好再查。
運氣很好，又找到這篇 [WDC] 淺談 Web Server 及 Application Server （上），終於有點概念，這邊說的 server 就是提供 web 服務的伺服器，而不是實體的機器。所以 Apache 就是提供 web 功能的伺服器程式。依照這個脈絡，所謂的 PHP 開發環境，應該是 XAMPP 提供可以運行 PHP 功能的 Apache 伺服器環境，也包括可以運行 MariaDB 跟 Perl。</description>
    </item>
    
    <item>
      <title>Hugo 練習 (2)</title>
      <link>https://idontwannarock.github.io/tech_blog/2017/09/hugo_practice_2/</link>
      <pubDate>Sat, 09 Sep 2017 15:22:03 +0800</pubDate>
      
      <guid>https://idontwannarock.github.io/tech_blog/2017/09/hugo_practice_2/</guid>
      <description>這篇文章是初學的時候撰寫的，其中一些觀念並不正確，步驟也可能因為更新或觀念問題而不適用或者多餘，此篇文章僅為留做紀錄
 學習目標 學習怎麼使用 Hugo 架設網頁在 Github Pages。
學習內容 環境設定 我並非本科，所以以下作法全都是從各官網跟谷哥研究而來。先說明我只會用 Windows，而且是 Win10，所以想用 MacOS 或 Linux 的可以左轉出去自己上官網跟谷哥研究。
環境設定這邊需要作幾件事，設定 Hugo，設定 Git，新增 Github 帳號，跟設定 SSH，除了設定 SSH 要最後作以外，其他順序無所謂。
Hugo 環境設定 如同上一篇所述，Hugo 雖然是 Go 語言寫的，但現在的版本並不用安裝 Go，只要到 這個網址 下載最新版本，找地方解壓縮，然後將解壓縮後的 exe 檔路徑設定到 Path 環境變數裡面就可以了。
比較完整的流程應該是先創建 Hugo 目錄，例如 C:\Hugo，然後建兩個子資料夾 bin 和 Sites。下載 Hugo 最新版本的 zip 檔，解壓縮到 bin 資料夾裡面，若 exe 檔檔名不是 hugo.exe 就改成 hugo.exe。
然後要設定 Path 環境變數，厲害的人可以直接用 cmd 設定，就不講了。來講我這種菜鳥的方法，右鍵點開始鍵（就是狀態列 Windows 圖案的那個鈕），選「系統」，然後選右上方的「系統資訊」，跳出來視窗後，選左邊的「進階系統設定」，再跳出一個視窗後，選「進階」頁面下方的「環境變數(N)&amp;hellip;」，會再跳出一個視窗分成上下兩區塊，在上方的使用者變數區塊，變數那一欄找到 Path 後，連點兩下又會跳出一個新視窗，這次直接按右邊的「新增(N)」，然後填上剛剛 hugo.exe 的路徑，例如 C:\Hugo\bin，最後再一路按確定以及關閉視窗出去。
然後為了確定是否有設定成功，請再右鍵點一次開始鍵，選「Windows PowerShell(系統管理員)(A)」來打開 PowerShell，然後直接輸入 hugo version 後按 Enter 鍵，如果有顯示出版本資訊，那就是設定成功。</description>
    </item>
    
    <item>
      <title>Hugo 練習 (1)</title>
      <link>https://idontwannarock.github.io/tech_blog/2017/09/hugo_practice_1/</link>
      <pubDate>Sat, 09 Sep 2017 00:17:31 +0800</pubDate>
      
      <guid>https://idontwannarock.github.io/tech_blog/2017/09/hugo_practice_1/</guid>
      <description>這篇文章是初學的時候撰寫的，其中一些觀念並不正確，步驟也可能因為更新或觀念問題而不適用或者多餘，此篇文章僅為留做紀錄
 源起 2017 年 9 月 7 日在 ptt Soft_Job 版看到胡立大大 po 文準備作一個計劃-建立 Slack 群組來幫助大家練習討論一些網頁相關的東西，而我需要多作一些練習，並且最好能有人詢問或討論所以加入。
而 9 月 8 日胡立大大就回信了，基本上就是解釋他想建立一個開放的群組，群組裡沒有老師，他擔任類似助教的腳色，會固定提出練習的題目，解答一些疑問跟提供一些資源這樣。
其中胡立大大有提到希望大家能養成自學、解決問題以及歸納知識的習慣，我覺得很有道理很重要，所以剛好他也有提到希望大家學習「怎麼用靜態部落格產生系統」，可以練習怎麼使用靜態部落格產生系統、Git 的基本操作以及 Github 的相關知識。
所以，就來吧！
學習目標 學習怎麼用靜態部落格產生系統 Hugo，並且把部落格架在 Github Pages 上面。
學習內容 什麼是靜態、動態 就我看網路多種說法，歸納的概念大概是部落格或網站本身顯示不需要重複跟 server 端交流的就算靜態，反之就算動態；最近因為 SEO 的興起，還有一種偽靜態。
什麼是靜態部落格 (網頁) 產生系統 Static Site Generator 在網路上找到 這篇文章，講得蠻清楚的。
在講什麼是靜態部落格（網頁）產生系統 Static Site Generator(SSG) 之前，應該講一下內容管理系統 Content Management System(CMS)，例如 Wordpress。
CMS 的理念是讓作者不用擔心部落格，也就是網頁輸出的各種技術問題，只需要選擇喜歡的模板 template，就可以使用 CMS 提供的文字編輯器寫作，節省很多技術上的麻煩，相信有用過 Wordpress 都能理解。
但相對之下 CMS 就有一些壞處，例如只能使用 CMS 提供的編輯功能（不然還是要會網頁或程式知識去作修改）、因為很多動態功能所以伺服器工作比較重可能影響效能、可能因為某些軟體或功能升級或資料庫出問題而導致網頁也出問題。
而 SSG 算是在 CMS 跟完全自己 coding 寫網頁架部落格的中間，比較知名的有 Jekyll 跟 Hugo，或胡立提到的 Hexo。</description>
    </item>
    
  </channel>
</rss>
