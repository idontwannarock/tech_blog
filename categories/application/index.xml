<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Application on Howard Tech Note</title>
    <link>https://blog.idontwannarock.dev/categories/application/</link>
    <description>Recent content in Application on Howard Tech Note</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>This website by Howard Wang is licensed under a Creative Common Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Wed, 27 Dec 2023 09:26:23 +0800</lastBuildDate>
    <atom:link href="https://blog.idontwannarock.dev/categories/application/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java Time 保存到 MySQL DATETIME 時區問題</title>
      <link>https://blog.idontwannarock.dev/2023/12/java_time_mapping_mysql_datetime_timezone/</link>
      <pubDate>Wed, 27 Dec 2023 09:26:23 +0800</pubDate>
      <guid>https://blog.idontwannarock.dev/2023/12/java_time_mapping_mysql_datetime_timezone/</guid>
      <description>&lt;p&gt;最近開發遇到一個對我的系統需求來說很合適，但我感覺不合理的狀況&lt;/p&gt;&#xA;&lt;p&gt;目前有 Spring Boot 系統在 JPA 是用 &lt;code&gt;OffsetDateTime&lt;/code&gt; 在 Entity 中對應 MySQL 表中的 &lt;code&gt;DATETIME&lt;/code&gt; 欄位，JVM 時區以及 MySQL 的系統時區都是 +8，沒有特別在任何地方進行時區設定，也就是所有地方應該都是預設設定&lt;/p&gt;&#xA;&lt;p&gt;然而當 &lt;code&gt;OffsetDateTime&lt;/code&gt; 保存到 &lt;code&gt;DATETIME&lt;/code&gt; 當中時，卻會被自動轉換成 UTC 時區的時間保存，並且之後再用 JPA 重新取出後，&lt;code&gt;OffsetDateTime&lt;/code&gt; 也依然是 UTC 時區&lt;/p&gt;&#xA;&lt;p&gt;這就讓人感覺很奇怪了，感覺要馬就應該是 MySQL &lt;code&gt;DATETIME&lt;/code&gt; 保存時用 JVM 跟 MySQL 相同的系統 +8 時區時間保存，取出也是 +8 時間；要馬就是保存時會轉成 UTC，但取出應該會自動轉換回 JVM 的 +8 才合理，畢竟 &lt;code&gt;DATETIME&lt;/code&gt; 欄位資料格式不保存時區資訊，所以要馬就是完全不轉換，要馬就是會依照某種機制保存時用 UTC，但使用時會自動轉換成 JVM 時區之類的模式才對&lt;/p&gt;&#xA;&lt;p&gt;雖然我原本就希望在系統中盡量都使用 UTC 時區而不要隨著 MySQL/JVM 時區變動以避免造成資料錯誤的問題，但機制不如預期就應該要弄清楚，免得其實是有什麼未知的狀況造成日後踩到坑&lt;/p&gt;&#xA;&lt;h1 id=&#34;pre-requisite&#34;&gt;Pre-requisite&lt;/h1&gt;&#xA;&lt;p&gt;首先要先說明這篇文章的研究都是基於下列版本，不同的版本「可能」會有不同的行為，請查詢官網文件或自行測試&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Spring Boot Data JPA 3.1.4&lt;/li&gt;&#xA;&lt;li&gt;Hibernate 6.2.9.Final&lt;/li&gt;&#xA;&lt;li&gt;MySQL JDBC Driver 8.0.33&lt;/li&gt;&#xA;&lt;li&gt;MySQL server 8.0.33&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;資料類型選擇的考量&#34;&gt;資料類型選擇的考量&lt;/h1&gt;&#xA;&lt;p&gt;首先說明為什麼要選擇用 &lt;code&gt;OffsetDateTime&lt;/code&gt; 對應 MySQL &lt;code&gt;DATETIME&lt;/code&gt; 的考量&lt;/p&gt;</description>
    </item>
    <item>
      <title>Sql Server 備份方式</title>
      <link>https://blog.idontwannarock.dev/2021/11/sql_server_backup/</link>
      <pubDate>Tue, 16 Nov 2021 11:58:47 +0800</pubDate>
      <guid>https://blog.idontwannarock.dev/2021/11/sql_server_backup/</guid>
      <description>&lt;p&gt;最近工作上碰到需要對 Sql Server 做 snapshot 的場合，所以就順便來研究一下怎麼對 Sql Server 做備份&lt;/p&gt;&#xA;&lt;p&gt;按照過去的經驗，我第一個想法就是找 Sql Server 有沒有類似 mysqldump 或 pg_dump 的工具可以直接將 schema 及 data 導出成 SQL 檔，這樣方便閱讀也方便各種場景下重建資料庫，尤其是在資料庫的 table 數量及資料量並不算大的前提下&lt;/p&gt;&#xA;&lt;p&gt;結果，我太天真了，Microsoft 怎麼可能這麼好用 (誤)，人家就是要走自己的路！&lt;/p&gt;&#xA;&lt;h2 id=&#34;備份檔案格式&#34;&gt;備份檔案格式&lt;/h2&gt;&#xA;&lt;p&gt;Sql Server 備份出來的檔案格式有以下幾種&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;bak: schema + data + log + file，適合做定時備份，因為他會保持包含 index 在內的資料以維持 single point of time 的 transactionally consistent&lt;/li&gt;&#xA;&lt;li&gt;DACPAC: schema，適合建立測試環境或比對各環境版本；但也支持下參數加上 data 的備份。實際上是 xml 的壓縮檔&lt;/li&gt;&#xA;&lt;li&gt;BACPAC: schema + data，適合轉移或 archive db。schema 部分與 DACPAC 相同，只是加上用 BCP 匯出資料&lt;/li&gt;&#xA;&lt;li&gt;sql&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;備份工具&#34;&gt;備份工具&lt;/h2&gt;&#xA;&lt;p&gt;主要有以下幾種備份工具&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/sql/tools/sqlcmd-utility?view=sql-server-ver15&#34;&gt;SqlCmd (官方)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/sql/tools/bcp-utility?view=sql-server-ver15&#34;&gt;BCP (官方)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/sql/relational-databases/server-management-objects-smo/getting-started-in-smo?view=sql-server-ver15&#34;&gt;SMO (官方)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/sql/tools/sqlpackage/sqlpackage?view=sql-server-ver15&#34;&gt;SqlPackage.exe (官方)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://dbatools.io/&#34;&gt;dbatools&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/Microsoft/mssql-scripter&#34;&gt;mssql-scripter&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;sqlcmd-官方&#34;&gt;SqlCmd (官方)&lt;/h3&gt;&#xA;&lt;p&gt;需要安裝 Sql Server 或 Microsoft Command Line Utility。若 powershell 要使用，還需要安裝 SqlServer 模組&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hugo 半自動部署</title>
      <link>https://blog.idontwannarock.dev/2021/11/hugo_semi_auto_deploy/</link>
      <pubDate>Wed, 03 Nov 2021 16:29:03 +0800</pubDate>
      <guid>https://blog.idontwannarock.dev/2021/11/hugo_semi_auto_deploy/</guid>
      <description>&lt;p&gt;這篇主要在講將以往所有手動的步驟，包括網站建置及發佈到 GitHub Pages 等，盡量調整為一個 script 來處理&lt;/p&gt;&#xA;&lt;p&gt;起因是因為種種因素，所以這個 Blog 停更了很久，其實也就是懶，還有之前沒有找到符合我要求的佈景主題。所以把手動的步驟減少，懶惰的理由就少了一個&lt;/p&gt;&#xA;&lt;p&gt;至於佈景主題我自己是有幾個要求:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;主要是給 Blog 用。這個要求是因為其實有很多佈景主題是給 Portfolio, Landing Page 等等使用的，所以首頁或 pages 的功能很強，文件都在講這些，但我都不需要&lt;/li&gt;&#xA;&lt;li&gt;文章要在側邊自動生成 Table of Content。這個就是 Blog 的要求，很多佈景主題是沒有支援這個功能的&lt;/li&gt;&#xA;&lt;li&gt;要有 Category 跟 Tag 的功能&lt;/li&gt;&#xA;&lt;li&gt;風格簡單&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;這些要求看起來很基本，但不知道為什麼，就算只滿足 2、3 項的交集都極少。目前找到最符合要求的就是 &lt;a href=&#34;https://themes.gohugo.io/themes/hugo-theme-diary/&#34;&gt;Diary&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;換 theme 的部分參考&lt;a href=&#34;https://gohugo.io/getting-started/quick-start/#step-3-add-a-theme&#34;&gt;官網&lt;/a&gt;，沒什麼好說的&lt;/p&gt;&#xA;&lt;p&gt;主要講如何部署到 GitHub Pages 的部分&lt;/p&gt;&#xA;&lt;h2 id=&#34;部署到-github-pages&#34;&gt;部署到 GitHub Pages&lt;/h2&gt;&#xA;&lt;p&gt;以我的了解，主要有三種方式&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;直接部署&lt;/li&gt;&#xA;&lt;li&gt;資料夾部署&lt;/li&gt;&#xA;&lt;li&gt;分支部署&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;直接部署&#34;&gt;直接部署&lt;/h3&gt;&#xA;&lt;p&gt;就是只單獨把建置 (&lt;code&gt;hugo&lt;/code&gt;) 出來的 &lt;code&gt;public&lt;/code&gt; 資料夾推到 GitHub main branch，然後在 repo 的 Pages 設定頁面指定 Source 為 main branch&lt;/p&gt;&#xA;&lt;h3 id=&#34;資料夾部署&#34;&gt;資料夾部署&lt;/h3&gt;&#xA;&lt;p&gt;這個方式是把整個專案包含原始檔都推到 GitHub main branch，然後在 repo 的 Pages 設定頁面指定 Source 為 main branch 的 docs 資料夾&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hugo 入門教學</title>
      <link>https://blog.idontwannarock.dev/2019/05/hugo_tutorial/</link>
      <pubDate>Tue, 07 May 2019 16:03:07 +0800</pubDate>
      <guid>https://blog.idontwannarock.dev/2019/05/hugo_tutorial/</guid>
      <description>&lt;p&gt;我個人在建立部落格的路上碰到了很多問題：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Wordpress 要花錢，雖然好像不多，但作為一個沒有人看的部落格，這樣還要花錢就是不爽&lt;/li&gt;&#xA;&lt;li&gt;沒有網路無法寫文章，就算寫了純文字的內容，等有網路後貼到 Wordpress 的編輯器還要重新設定字體大小等等&lt;/li&gt;&#xA;&lt;li&gt;沒辦法在自己的電腦或電腦們很方便的做備份，而且我只是個&lt;i&gt;&lt;del&gt;簡單的男人&lt;/del&gt;&lt;/i&gt;簡單的部落格，不需要備份一堆只有 Wordpress 能用的東西好嗎&lt;/li&gt;&#xA;&lt;li&gt;不能用工程師宅宅必備命令列工具裝潮，假裝駭客任務&lt;/li&gt;&#xA;&lt;li&gt;最重要的，身為一個工程師宅宅，用 Wordpress 寫部落格說得出口嗎？很顯然可以，但要付錢我就不想用&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;如果你對以上絕大多數的問題都有切身之痛，那可以考慮繼續閱讀下去，否則建議還是直接使用 Wordpress 或 Wix 吧&lt;/p&gt;&#xA;&lt;h1 id=&#34;hugo-與靜態網站&#34;&gt;Hugo 與靜態網站&lt;/h1&gt;&#xA;&lt;p&gt;唉唷，還繼續，那大概不是 M 就是工程師宅宅相關種，那靜態網站不用講了，Hugo 自己研究就好啦，本篇結束&lt;/p&gt;&#xA;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;&#xA;&lt;p&gt;不能醬喔？那好吧&lt;/p&gt;&#xA;&lt;p&gt;Hugo 是一種 Static Site Generator, SSG 靜態網站產生器，靜態網站簡單來說就是有固定內容的網站，所謂的固定內容就是 HTML 這種瀏覽器可以直接開啟的網頁檔案，配合 CSS, Javascript 做美化，這些檔案只要沒有被修改過，每次打開都會產生固定的內容，所以稱為靜態網站&lt;/p&gt;&#xA;&lt;p&gt;而基於後面會提到 Hugo 這個工具的特性，它很適合用來產生部落格，使用者只需要撰寫 Markdown 這種純文字檔案作為每篇文章的內容，就可以透過 Hugo 快速的建立或修改網站，而不必每次都要修改相對應的 HTML 甚至 CSS 及 Javascript 檔案&lt;/p&gt;&#xA;&lt;p&gt;Hugo 作為一個世界範圍內前三熱門的 SSG 工具，它還有很多熱心工程師宅宅幫他寫了很多佈景主題讓使用者可以直接套用來產生網站，所以使用者只需要把文章內容寫成 Markdown 這種純文字檔案，就可以直接用 Hugo 將文章按照佈景主題產生出美美的網站了&lt;/p&gt;&#xA;&lt;h1 id=&#34;這樣誰看的到&#34;&gt;這樣誰看的到？&lt;/h1&gt;&#xA;&lt;p&gt;不過這樣產生出來的網站有一個關鍵的問題，這些檔案只放在你電腦裡，沒人看得到，除了你自己&lt;/p&gt;&#xA;&lt;p&gt;所以我們需要「把它放到網路上」&lt;/p&gt;&#xA;&lt;p&gt;一般要做到「把它放到網路上」並且「誰都看得見」，其實要做很多事情，例如租用網路空間、買域名、部署網站等等，Wordpress 的好處就在這，它提供一條龍的服務幫你做到底&lt;/p&gt;&#xA;&lt;p&gt;但現在沒有 Wordpress 而且要堅持不花錢的懶惰工程師宅宅原則，所以我們要走另一條路，使用 Git 跟 GitHub&lt;/p&gt;&#xA;&lt;h1 id=&#34;gitgithub-與-github-pages&#34;&gt;Git、GitHub 與 GitHub Pages&lt;/h1&gt;&#xA;&lt;p&gt;Git 是一種版本控制工具，簡單來說就是可以保存每次改動檔案的紀錄的工具，所以要做修改或要放棄修改，也不會因為存了檔或沒存檔就整個完蛋&lt;/p&gt;</description>
    </item>
    <item>
      <title>Macbook Pro 的設置 2017 版</title>
      <link>https://blog.idontwannarock.dev/2017/11/mbp_setup_2017/</link>
      <pubDate>Fri, 03 Nov 2017 09:05:02 +0800</pubDate>
      <guid>https://blog.idontwannarock.dev/2017/11/mbp_setup_2017/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;這篇文章是初學的時候撰寫的，其中一些觀念並不正確，步驟也可能因為更新或觀念問題而不適用或者多餘，此篇文章僅為留做紀錄&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;一直以來都是 PC 人，從來沒用過任何 Apple 或 Linux 的相關產品，剛好有買筆電的需求，想趁機接觸一下不同的作業系統生態，而且久聞 Apple 筆電品質很好，就添購了 Macbook Pro 來當我人生第一台筆電。&lt;/p&gt;&#xA;&lt;p&gt;剛拿到筆電總是需要一些設置，盡量讓 PC 跟 MBP 之間資訊同步以及應用軟體上相通或相容，以達到同步並簡化作業環境的目標，提高生產效率。&lt;/p&gt;&#xA;&lt;p&gt;於是跟朋友詢問以及上網稍作了解後，有了以下的設置。&lt;/p&gt;&#xA;&lt;h1 id=&#34;軟體環境設置&#34;&gt;軟體環境設置&lt;/h1&gt;&#xA;&lt;p&gt;因為是要習慣 Unix-based 的作業環境，所以我並沒有特別強求各方面都要設置到跟 Windows 環境類似，所以操作模式上並沒有更動。&lt;/p&gt;&#xA;&lt;p&gt;但安裝的軟體上就有些考量，希望能達到集中管理，這就不得不提每個 MacOS 都應該必備的 Homebrew。&lt;/p&gt;&#xA;&lt;h2 id=&#34;安裝-homebrew&#34;&gt;安裝 Homebrew&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; 是一套開源的 MacOS 系統的軟體套件管理系統，用來簡化 MacOS 系統上的軟體安裝、卸載等過程，是用 MacOS 內建的 Ruby 語言寫成。&lt;/p&gt;&#xA;&lt;p&gt;但 Homebrew 在安裝前需要先安裝 &lt;a href=&#34;https://itunes.apple.com/us/app/xcode/id497799835?mt=12&#34;&gt;Xcode&lt;/a&gt;，似乎是因為 Xcode 會一併安裝一些常用的 command line。&lt;/p&gt;&#xA;&lt;p&gt;還好 Xcode 也是免費軟體，可以直接透過 App Store 下載，要注意檔案蠻大的，下載安裝的過程會要花一點時間。&lt;/p&gt;&#xA;&lt;p&gt;Xcode 安裝好之後，就打開「終端機」，輸入下面這行來下載安裝 Homebrew：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ruby -e &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;$(&lt;/span&gt;curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意第一個 &lt;code&gt;$&lt;/code&gt; 是開啟終端機就會顯示在你可以打字的那一行的開頭，不用重複輸入。&lt;/p&gt;&#xA;&lt;p&gt;讓他自動跑完之後，就可以開始使用 &lt;code&gt;brew&lt;/code&gt; 指令來操作啦！&lt;/p&gt;&#xA;&lt;p&gt;日後要更新 Homebrew 這個軟體本身，也是一樣在終端機輸入 &lt;code&gt;brew update&lt;/code&gt; 以及 &lt;code&gt;brew tap homebrew/dupes&lt;/code&gt; 就可以了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Git 及 GitHub 基礎認識</title>
      <link>https://blog.idontwannarock.dev/2017/09/git_and_github_basic/</link>
      <pubDate>Thu, 14 Sep 2017 07:13:01 +0800</pubDate>
      <guid>https://blog.idontwannarock.dev/2017/09/git_and_github_basic/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;這篇文章是初學的時候撰寫的，其中一些觀念並不正確，步驟也可能因為更新或觀念問題而不適用或者多餘，此篇文章僅為留做紀錄&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;學習目標&#34;&gt;學習目標&lt;/h1&gt;&#xA;&lt;p&gt;因為 Git 指令一直出問題，今天就來搞清楚 Git 跟 GitHub 的各種問題吧！&lt;/p&gt;&#xA;&lt;h1 id=&#34;學習內容&#34;&gt;學習內容&lt;/h1&gt;&#xA;&lt;h2 id=&#34;git-跟-github-是什麼&#34;&gt;Git 跟 GitHub 是什麼&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://zh.wikipedia.org/zh-tw/Git&#34;&gt;Git Wiki&lt;/a&gt; 則說 Git 是一種分散式版本控制軟體。&lt;/p&gt;&#xA;&lt;p&gt;詳細的說明可以參考 &lt;a href=&#34;https://goo.gl/YzDiHy&#34;&gt;Git Documentation&lt;/a&gt;，有中文版，不過只有前幾個主題有翻譯。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://zh.wikipedia.org/zh-tw/GitHub&#34;&gt;GitHub Wiki&lt;/a&gt;上說，GitHub 是一個透過 Git 進行版本控制的軟體原始碼代管服務，簡單來說就是可以放各種 Code 的地方，但其實也可以放一些文件跟圖片等，好像沒有空間限制，只是有單一檔案大小 1GB 的軟性限制。&lt;/p&gt;&#xA;&lt;h3 id=&#34;git-觀念&#34;&gt;Git 觀念&lt;/h3&gt;&#xA;&lt;p&gt;這裡我們來先解釋一下 Git版本控制的觀念，我覺得 &lt;a href=&#34;https://hellolynn.hpd.io/&#34;&gt;寫點科普&lt;/a&gt; 寫的這兩篇寫得非常平易近人而且完整，推薦給大家！&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://hellolynn.hpd.io/2017/01/18/git%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80%E6%95%99%E5%AD%B8-part-1/&#34;&gt;GIT新手入門教學 – PART 1&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://hellolynn.hpd.io/2017/01/18/git%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80%E6%95%99%E5%AD%B8-part-2/&#34;&gt;GIT新手入門教學 – PART 2&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;我的理解是譬如有一份作業需要大家一起作，大家先把原始的作業文件 (origin) 放在小組長那邊 (remote)，然後各自 copy 一份回家 (local) 寫自己要做的部分，然後拿回去給小組長，由小組長決定誰的作業寫得好，可以成為新一代的原始作業文件 (master)；或某人提交的作業寫得不完整，但寫過地那部分很好，就跟原始作業合併 (merge) 成一份新一代的原始作業文件。大家也可以 copy 別人寫的作業回去修改 (pull)，反正最後由小組長決定哪個版本的作業寫得最好，就可以成為新一代的原始作業文件這樣。&lt;/p&gt;&#xA;&lt;p&gt;而大家 copy 回家寫的作業也有三個階段，假如我在電腦上打作業，分成三個資料夾，一個是 Working Directory、一個是 Staging Area、一個是 Repository。&lt;/p&gt;&#xA;&lt;p&gt;第一個資料夾就是放 copy 回家的作業，然後我可能亂打了一些、新增修改了一些，但交出去很丟臉的部分；第二個資料夾就是放某些我覺得可以的部分作業，先暫時存起來；最後一個資料夾就是放我確定要提交的作業版本。&lt;/p&gt;&#xA;&lt;p&gt;所以我寫作業的流程就是這樣：&lt;/p&gt;</description>
    </item>
    <item>
      <title>XAMPP 安裝設定及簡單 PHP 練習</title>
      <link>https://blog.idontwannarock.dev/2017/09/xampp_setup_and_php_practice/</link>
      <pubDate>Sun, 10 Sep 2017 07:39:23 +0800</pubDate>
      <guid>https://blog.idontwannarock.dev/2017/09/xampp_setup_and_php_practice/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;這篇文章是初學的時候撰寫的，其中一些觀念並不正確，步驟也可能因為更新或觀念問題而不適用或者多餘，此篇文章僅為留做紀錄&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;源起&#34;&gt;源起&lt;/h1&gt;&#xA;&lt;p&gt;之前提到的胡立大大在 Slack 群組裡發布了他擬的教學實驗計畫大綱，大概分為以下四段：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;網頁後端相關（Session, Database, Server）&lt;/li&gt;&#xA;&lt;li&gt;網頁前端相關（HTML, JavaScript, CSS, jQuery）&lt;/li&gt;&#xA;&lt;li&gt;程式解題相關（帶大家做一些 ACM 一二星題或是基本演算法資料結構）&lt;/li&gt;&#xA;&lt;li&gt;資訊安全相關（SQL Injection, CSRF, XSS）&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;裡面還有一堆細項，總之就從頭開始練習，第一項就是「在自己的電腦上成功運行 PHP」，還有給提示可以用 XAMPP 架環境，然後用 PHP 寫 hello world，那就來試試看吧。&lt;/p&gt;&#xA;&lt;h1 id=&#34;學習目標&#34;&gt;學習目標&lt;/h1&gt;&#xA;&lt;p&gt;學習用 XAMPP 建構環境，並用 PHP 寫一句 hello world。&lt;/p&gt;&#xA;&lt;h1 id=&#34;學習內容&#34;&gt;學習內容&lt;/h1&gt;&#xA;&lt;h2 id=&#34;什麼是-xampp&#34;&gt;什麼是 XAMPP&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.apachefriends.org/zh_tw/index.html&#34;&gt;XAMPP官網&lt;/a&gt; 的解釋是一個 PHP 開發環境，是一個 Apache 的發行版本，包含了 MariaDB、PHP 和 Perl。&lt;/p&gt;&#xA;&lt;p&gt;完全看不懂，先來查一下名詞。&lt;/p&gt;&#xA;&lt;p&gt;PHP 我大概知道，是一種後端的語言，理論上可以配合各種 SQL 語言跟資料庫作溝通，然後再跟前端連結作輸出。至於 PHP 到底算不算程式語言這種問題就跳過。&lt;/p&gt;&#xA;&lt;p&gt;Apache 則是久聞其名但不知其詳。谷哥上的資料看起來是一種網頁伺服器，但伺服器是什麼？我沒念過計概，我也不知道計概教不教這個，總之就是沒概念，只好再查。&lt;/p&gt;&#xA;&lt;p&gt;運氣很好，又找到這篇 &lt;a href=&#34;http://blog.ericsk.org/archives/662&#34;&gt;[WDC] 淺談 Web Server 及 Application Server （上）&lt;/a&gt;，終於有點概念，這邊說的 server 就是提供 web 服務的伺服器，而不是實體的機器。所以 Apache 就是提供 web 功能的伺服器程式。依照這個脈絡，所謂的 PHP 開發環境，應該是 XAMPP 提供可以運行 PHP 功能的 Apache 伺服器環境，也包括可以運行 MariaDB 跟 Perl。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hugo 練習 (2)</title>
      <link>https://blog.idontwannarock.dev/2017/09/hugo_practice_2/</link>
      <pubDate>Sat, 09 Sep 2017 15:22:03 +0800</pubDate>
      <guid>https://blog.idontwannarock.dev/2017/09/hugo_practice_2/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;這篇文章是初學的時候撰寫的，其中一些觀念並不正確，步驟也可能因為更新或觀念問題而不適用或者多餘，此篇文章僅為留做紀錄&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;學習目標&#34;&gt;學習目標&lt;/h1&gt;&#xA;&lt;p&gt;學習怎麼使用 Hugo 架設網頁在 Github Pages。&lt;/p&gt;&#xA;&lt;h1 id=&#34;學習內容&#34;&gt;學習內容&lt;/h1&gt;&#xA;&lt;h2 id=&#34;環境設定&#34;&gt;環境設定&lt;/h2&gt;&#xA;&lt;p&gt;我並非本科，所以以下作法全都是從各官網跟谷哥研究而來。先說明我只會用 Windows，而且是 Win10，所以想用 MacOS 或 Linux 的可以左轉出去自己上官網跟谷哥研究。&lt;/p&gt;&#xA;&lt;p&gt;環境設定這邊需要作幾件事，設定 Hugo，設定 Git，新增 Github 帳號，跟設定 SSH，除了設定 SSH 要最後作以外，其他順序無所謂。&lt;/p&gt;&#xA;&lt;h2 id=&#34;hugo-環境設定&#34;&gt;Hugo 環境設定&lt;/h2&gt;&#xA;&lt;p&gt;如同上一篇所述，Hugo 雖然是 Go 語言寫的，但現在的版本並不用安裝 Go，只要到 &lt;a href=&#34;https://github.com/gohugoio/hugo/releases&#34;&gt;這個網址&lt;/a&gt; 下載最新版本，找地方解壓縮，然後將解壓縮後的 exe 檔路徑設定到 Path 環境變數裡面就可以了。&lt;/p&gt;&#xA;&lt;p&gt;比較完整的流程應該是先創建 Hugo 目錄，例如 &lt;code&gt;C:\Hugo&lt;/code&gt;，然後建兩個子資料夾 &lt;code&gt;bin&lt;/code&gt; 和 &lt;code&gt;Sites&lt;/code&gt;。下載 Hugo 最新版本的 zip 檔，解壓縮到 &lt;code&gt;bin&lt;/code&gt; 資料夾裡面，若 exe 檔檔名不是 &lt;code&gt;hugo.exe&lt;/code&gt; 就改成 &lt;code&gt;hugo.exe&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;p&gt;然後要設定 Path 環境變數，厲害的人可以直接用 cmd 設定，就不講了。來講我這種菜鳥的方法，右鍵點開始鍵（就是狀態列 Windows 圖案的那個鈕），選「系統」，然後選右上方的「系統資訊」，跳出來視窗後，選左邊的「進階系統設定」，再跳出一個視窗後，選「進階」頁面下方的「環境變數(N)&amp;hellip;」，會再跳出一個視窗分成上下兩區塊，在上方的使用者變數區塊，變數那一欄找到 Path 後，連點兩下又會跳出一個新視窗，這次直接按右邊的「新增(N)」，然後填上剛剛 &lt;code&gt;hugo.exe&lt;/code&gt; 的路徑，例如 &lt;code&gt;C:\Hugo\bin&lt;/code&gt;，最後再一路按確定以及關閉視窗出去。&lt;/p&gt;&#xA;&lt;p&gt;然後為了確定是否有設定成功，請再右鍵點一次開始鍵，選「Windows PowerShell(系統管理員)(A)」來打開 PowerShell，然後直接輸入 &lt;code&gt;hugo version&lt;/code&gt; 後按 Enter 鍵，如果有顯示出版本資訊，那就是設定成功。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hugo 練習 (1)</title>
      <link>https://blog.idontwannarock.dev/2017/09/hugo_practice_1/</link>
      <pubDate>Sat, 09 Sep 2017 00:17:31 +0800</pubDate>
      <guid>https://blog.idontwannarock.dev/2017/09/hugo_practice_1/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;這篇文章是初學的時候撰寫的，其中一些觀念並不正確，步驟也可能因為更新或觀念問題而不適用或者多餘，此篇文章僅為留做紀錄&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;源起&#34;&gt;源起&lt;/h1&gt;&#xA;&lt;p&gt;2017 年 9 月 7 日在 ptt Soft_Job 版看到胡立大大 po 文準備作一個計劃-建立 Slack 群組來幫助大家練習討論一些網頁相關的東西，而我需要多作一些練習，並且最好能有人詢問或討論所以加入。&lt;/p&gt;&#xA;&lt;p&gt;而 9 月 8 日胡立大大就回信了，基本上就是解釋他想建立一個開放的群組，群組裡沒有老師，他擔任類似助教的腳色，會固定提出練習的題目，解答一些疑問跟提供一些資源這樣。&lt;/p&gt;&#xA;&lt;p&gt;其中胡立大大有提到希望大家能養成自學、解決問題以及歸納知識的習慣，我覺得很有道理很重要，所以剛好他也有提到希望大家學習「怎麼用靜態部落格產生系統」，可以練習怎麼使用靜態部落格產生系統、Git 的基本操作以及 Github 的相關知識。&lt;/p&gt;&#xA;&lt;p&gt;所以，就來吧！&lt;/p&gt;&#xA;&lt;h1 id=&#34;學習目標&#34;&gt;學習目標&lt;/h1&gt;&#xA;&lt;p&gt;學習怎麼用靜態部落格產生系統 Hugo，並且把部落格架在 Github Pages 上面。&lt;/p&gt;&#xA;&lt;h1 id=&#34;學習內容&#34;&gt;學習內容&lt;/h1&gt;&#xA;&lt;h2 id=&#34;什麼是靜態動態&#34;&gt;什麼是靜態、動態&lt;/h2&gt;&#xA;&lt;p&gt;就我看網路多種說法，歸納的概念大概是部落格或網站本身顯示不需要重複跟 server 端交流的就算靜態，反之就算動態；最近因為 SEO 的興起，還有一種偽靜態。&lt;/p&gt;&#xA;&lt;h2 id=&#34;什麼是靜態部落格-網頁-產生系統-static-site-generator&#34;&gt;什麼是靜態部落格 (網頁) 產生系統 Static Site Generator&lt;/h2&gt;&#xA;&lt;p&gt;在網路上找到 &lt;a href=&#34;https://www.sitepoint.com/7-reasons-use-static-site-generator/&#34;&gt;這篇文章&lt;/a&gt;，講得蠻清楚的。&lt;/p&gt;&#xA;&lt;p&gt;在講什麼是靜態部落格（網頁）產生系統 Static Site Generator(SSG) 之前，應該講一下內容管理系統 Content Management System(CMS)，例如 Wordpress。&lt;/p&gt;&#xA;&lt;p&gt;CMS 的理念是讓作者不用擔心部落格，也就是網頁輸出的各種技術問題，只需要選擇喜歡的模板 template，就可以使用 CMS 提供的文字編輯器寫作，節省很多技術上的麻煩，相信有用過 Wordpress 都能理解。&lt;/p&gt;&#xA;&lt;p&gt;但相對之下 CMS 就有一些壞處，例如只能使用 CMS 提供的編輯功能（不然還是要會網頁或程式知識去作修改）、因為很多動態功能所以伺服器工作比較重可能影響效能、可能因為某些軟體或功能升級或資料庫出問題而導致網頁也出問題。&lt;/p&gt;&#xA;&lt;p&gt;而 SSG 算是在 CMS 跟完全自己 coding 寫網頁架部落格的中間，比較知名的有 Jekyll 跟 Hugo，或胡立提到的 Hexo。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
