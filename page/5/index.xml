<?xml-stylesheet href="/rss.xsl" type="text/xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Howard Tech Note</title>
    <link>https://blog.idontwannarock.dev/</link>
    <description>Recent content on Howard Tech Note</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This website by Howard Wang is licensed under a Creative Common Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Fri, 07 Feb 2025 09:39:10 +0800</lastBuildDate>
    
        <atom:link href="https://blog.idontwannarock.dev/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>Hugo 練習 (2)</title>
        <link>https://blog.idontwannarock.dev/2017/09/hugo_practice_2/</link>
        <pubDate>Sat, 09 Sep 2017 15:22:03 +0800</pubDate>
        
        <guid>https://blog.idontwannarock.dev/2017/09/hugo_practice_2/</guid>
        <description>Howard Tech Note https://blog.idontwannarock.dev/2017/09/hugo_practice_2/ -&lt;blockquote&gt;
&lt;p&gt;這篇文章是初學的時候撰寫的，其中一些觀念並不正確，步驟也可能因為更新或觀念問題而不適用或者多餘，此篇文章僅為留做紀錄&lt;/p&gt;&lt;/blockquote&gt;
&lt;h1 id=&#34;學習目標&#34;&gt;學習目標&lt;/h1&gt;
&lt;p&gt;學習怎麼使用 Hugo 架設網頁在 Github Pages。&lt;/p&gt;
&lt;h1 id=&#34;學習內容&#34;&gt;學習內容&lt;/h1&gt;
&lt;h2 id=&#34;環境設定&#34;&gt;環境設定&lt;/h2&gt;
&lt;p&gt;我並非本科，所以以下作法全都是從各官網跟谷哥研究而來。先說明我只會用 Windows，而且是 Win10，所以想用 MacOS 或 Linux 的可以左轉出去自己上官網跟谷哥研究。&lt;/p&gt;
&lt;p&gt;環境設定這邊需要作幾件事，設定 Hugo，設定 Git，新增 Github 帳號，跟設定 SSH，除了設定 SSH 要最後作以外，其他順序無所謂。&lt;/p&gt;
&lt;h2 id=&#34;hugo-環境設定&#34;&gt;Hugo 環境設定&lt;/h2&gt;
&lt;p&gt;如同上一篇所述，Hugo 雖然是 Go 語言寫的，但現在的版本並不用安裝 Go，只要到 &lt;a href=&#34;https://github.com/gohugoio/hugo/releases&#34;&gt;這個網址&lt;/a&gt; 下載最新版本，找地方解壓縮，然後將解壓縮後的 exe 檔路徑設定到 Path 環境變數裡面就可以了。&lt;/p&gt;
&lt;p&gt;比較完整的流程應該是先創建 Hugo 目錄，例如 &lt;code&gt;C:\Hugo&lt;/code&gt;，然後建兩個子資料夾 &lt;code&gt;bin&lt;/code&gt; 和 &lt;code&gt;Sites&lt;/code&gt;。下載 Hugo 最新版本的 zip 檔，解壓縮到 &lt;code&gt;bin&lt;/code&gt; 資料夾裡面，若 exe 檔檔名不是 &lt;code&gt;hugo.exe&lt;/code&gt; 就改成 &lt;code&gt;hugo.exe&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;然後要設定 Path 環境變數，厲害的人可以直接用 cmd 設定，就不講了。來講我這種菜鳥的方法，右鍵點開始鍵（就是狀態列 Windows 圖案的那個鈕），選「系統」，然後選右上方的「系統資訊」，跳出來視窗後，選左邊的「進階系統設定」，再跳出一個視窗後，選「進階」頁面下方的「環境變數(N)&amp;hellip;」，會再跳出一個視窗分成上下兩區塊，在上方的使用者變數區塊，變數那一欄找到 Path 後，連點兩下又會跳出一個新視窗，這次直接按右邊的「新增(N)」，然後填上剛剛 &lt;code&gt;hugo.exe&lt;/code&gt; 的路徑，例如 &lt;code&gt;C:\Hugo\bin&lt;/code&gt;，最後再一路按確定以及關閉視窗出去。&lt;/p&gt;
&lt;p&gt;然後為了確定是否有設定成功，請再右鍵點一次開始鍵，選「Windows PowerShell(系統管理員)(A)」來打開 PowerShell，然後直接輸入 &lt;code&gt;hugo version&lt;/code&gt; 後按 Enter 鍵，如果有顯示出版本資訊，那就是設定成功。&lt;/p&gt;
&lt;h2 id=&#34;安裝-git申請-github-帳號及設定-ssh&#34;&gt;安裝 Git、申請 Github 帳號及設定 SSH&lt;/h2&gt;
&lt;p&gt;這段建議直接參考另外一篇筆記來操作。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.idontwannarock.dev/2017/09/git_and_github_basic/&#34;&gt;Git及 Github基礎認識&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;生成基本網頁&#34;&gt;生成基本網頁&lt;/h2&gt;
&lt;p&gt;這邊會用到一個簡單的指令，跟一些 Hugo 本身的指令。主要會用到移到資料夾位置的 &lt;code&gt;cd&lt;/code&gt; 指令，所以不太會的人可以谷哥了解一下。&lt;/p&gt;
&lt;p&gt;請先打開前面建立好的 &lt;code&gt;C:\Hugo\Sites&lt;/code&gt; 資料夾，對資料夾內空白處點右鍵，選擇 Git Bash Here 開啟 Git Bash，這樣就預設好路徑是在 &lt;code&gt;Sites&lt;/code&gt; 資料夾內。&lt;/p&gt;
&lt;p&gt;接著輸入以下指令生成基本的網頁。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;hugo new site Hugo-Blog
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這樣就會在 &lt;code&gt;Sites&lt;/code&gt; 資料夾內生成 &lt;code&gt;Hugo-Blog&lt;/code&gt; 資料夾，並有以下目錄結構：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;|--archetypes 
   |--default.md # 生成文章的模板  
|--content       # md 檔案存放位置  
|--data  
|--layouts  
|--static        # 圖片等存放位置  
|--themes        # 模板主題目錄  
config.toml      # 網站配置屬性
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;config.toml&lt;/code&gt; 是紀錄網站配置屬性的文件；&lt;code&gt;content&lt;/code&gt; 則是放網頁的內容，之後寫的 md 檔會放在這邊；&lt;code&gt;static&lt;/code&gt; 資料夾則存放圖片等東西。&lt;/p&gt;
&lt;h2 id=&#34;生成新文章&#34;&gt;生成新文章&lt;/h2&gt;
&lt;p&gt;網頁的內容 md 檔建議在同樣的 Git Bash 用以下命令生成，因為用命令生成的 md 檔會有內建的 &lt;code&gt;front matter&lt;/code&gt;，記錄三項必備資訊，&lt;code&gt;title&lt;/code&gt;、&lt;code&gt;date（生成時間）&lt;/code&gt;及&lt;code&gt;draft（草稿狀態）&lt;/code&gt;。裡面比較重要的是 &lt;code&gt;draft&lt;/code&gt;，預設是 &lt;code&gt;true&lt;/code&gt;，意思是還是草稿，網頁上並不會顯示出來；若完成後想發布到網頁上顯示出來，請記得將此項改為 &lt;code&gt;false&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;cd&lt;/span&gt; Hugo-Blog  &lt;span style=&#34;color:#6272a4&#34;&gt;# 切換到 Hugo-Blog 資料夾路徑  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo new post/firstPost.md
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如此，Hugo 就會自動在 &lt;code&gt;content&lt;/code&gt; 資料夾中建立 &lt;code&gt;post&lt;/code&gt; 資料夾，並在其中建立 &lt;code&gt;firstPost.md&lt;/code&gt; 這個 md 檔案。&lt;/p&gt;
&lt;p&gt;剛剛有提到，裡面生成的 &lt;code&gt;front matter&lt;/code&gt; 包含了一些資訊，然後就可以在 &lt;code&gt;front matter&lt;/code&gt; 區塊底下開始用 &lt;a href=&#34;http://markdown.tw/&#34;&gt;Markdown語法&lt;/a&gt;寫 blog 了。&lt;/p&gt;
&lt;h2 id=&#34;設定-theme&#34;&gt;設定 theme&lt;/h2&gt;
&lt;p&gt;接下來可以選擇喜歡的網站主題，可以到這邊選擇 &lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;Hugo themes&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;這邊有個問題我還沒找到解法，就是這些 theme 幾乎都提供 &lt;code&gt;git clone&lt;/code&gt; 的方式下載，ssh 連線方式沒問題，但我不知道為什麼用 https 連線的方式從來沒有成功過。不知道有沒有人知道可能的原因？&lt;/p&gt;
&lt;p&gt;接下來以我選擇的 &lt;a href=&#34;https://themes.gohugo.io/casper/&#34;&gt;casper主題&lt;/a&gt; 來示範 ssh 連線的作法。&lt;/p&gt;
&lt;p&gt;首先進入 &lt;a href=&#34;https://themes.gohugo.io/casper/&#34;&gt;casper主題&lt;/a&gt; 點選 Download 進入其 Github 資料夾，點右邊綠色 Clone or download 按鈕，點藍色 Use SSH 連結切換到 Clone with SSH，再複製 url。&lt;/p&gt;
&lt;p&gt;接著同樣用剛才打開的 Git Bash 輸入以下指令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir themes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;cd&lt;/span&gt; themes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone git@github.com:vjeantet/hugo-theme-casper.git casper
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這幾行指令就是先在 &lt;code&gt;Hugo-Blog&lt;/code&gt; 資料夾內建立 &lt;code&gt;themes&lt;/code&gt; 資料夾，然後移動路徑到 &lt;code&gt;themes&lt;/code&gt; 資料夾內，再下載 casper 主題到 &lt;code&gt;themes&lt;/code&gt; 資料夾。&lt;/p&gt;
&lt;p&gt;接著針對 &lt;code&gt;Hugo-Blog&lt;/code&gt; 資料夾內的 &lt;code&gt;config.toml&lt;/code&gt; 檔案作一些修改。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;baseURL = &amp;#34;https://idontwannarock.github.io/Hugo-Blog&amp;#34;  
languageCode = &amp;#34;zh-TW&amp;#34;  
title = &amp;#34;Wang&amp;#39;s Blog&amp;#34;  
paginate = 5  
DisqusShortname = &amp;#34;Wang Cheng Hao&amp;#34;  
Copyright = &amp;#34;&amp;amp;copy; All rights reserved - 2017&amp;#34;  
canonifyurls = false  
  
[params]  
description = &amp;#34;Ignorance is a bliss...&amp;#34;  
cover = &amp;#34;images/cover.jpg&amp;#34;  
author = &amp;#34;Wang Cheng Hao&amp;#34;  
authorlocation = &amp;#34;Taipei, Taiwan&amp;#34;  
authorwebsite = &amp;#34;https://idontwannarock.github.io/Hugo-Blog&amp;#34;  
authorbio= &amp;#34;邁向軟體工程師&amp;#34;  
logo = &amp;#34;images/logo.jpg&amp;#34;  
#googleAnalyticsUserID = &amp;#34;&amp;#34;  
#Optional RSS-Link, if not provided it defaults to the standard index.xml  
#RSSLink = &amp;#34;http://feeds.feedburner.com/...&amp;#34;  
githubName = &amp;#34;idontwannarock&amp;#34;  
twitterName = &amp;#34;CH_Howard_Wang&amp;#34;  
facebookName = &amp;#34;howard.wang.3990&amp;#34;  
linkedinName = &amp;#34;cheng-hao-wang-a2298289&amp;#34;  
#set true if you are not proud of using Hugo (true will hide the footer note &amp;#34;Proudly published with HUGO.....&amp;#34;)  
hideHUGOSupport = false  
 
[[menu.main]]  
name = &amp;#34;Blog&amp;#34;  
weight = 200  
identifier = &amp;#34;blog&amp;#34;  
url = &amp;#34;/&amp;#34;  

[[menu.main]]  
name = &amp;#34;About me&amp;#34;  
weight = 190  
identifier = &amp;#34;about&amp;#34;  
url = &amp;#34;/about&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中比較重要的就是 &lt;code&gt;baseURL&lt;/code&gt;，&lt;code&gt;https://使用者名稱.github.io&lt;/code&gt; 是 Github Pages 固定生成的網址，後面則是接你預計要儲存資料的 Repository 的名稱。&lt;/p&gt;
&lt;p&gt;然後 &lt;code&gt;canonifyurls&lt;/code&gt; 要記得設置為 &lt;code&gt;false&lt;/code&gt;，否則生成的網頁會抓不到主題配置。&lt;/p&gt;
&lt;p&gt;當然我也會相應的將選好的 &lt;code&gt;cover.jpg&lt;/code&gt; 以及 &lt;code&gt;logo.jpg&lt;/code&gt; 兩張圖片放到 &lt;code&gt;static\images&lt;/code&gt; 資料夾當中。&lt;/p&gt;
&lt;p&gt;其他資訊都可以自己修改或參考 &lt;a href=&#34;https://themes.gohugo.io/casper/&#34;&gt;casper主題&lt;/a&gt;的說明。&lt;/p&gt;
&lt;h2 id=&#34;生成測試網頁&#34;&gt;生成測試網頁&lt;/h2&gt;
&lt;p&gt;接著建議用 Hugo 自帶的 server 功能作一下測試，在剛才打開的 Git Bash 中輸入以下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;cd&lt;/span&gt; .. &lt;span style=&#34;color:#6272a4&#34;&gt;# 切換到上一層 Hugo-Blog 資料夾路徑  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo server -t casper
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;若成功，在瀏覽器網址列輸入 &lt;code&gt;http://localhost:1313/Hugo-Blog/&lt;/code&gt; 來預覽，有哪裡不喜歡或不舒服就直接修改 md 文件或 &lt;code&gt;config.toml&lt;/code&gt;；有錯誤就依照 Git Bash 指示的問題去改。&lt;/p&gt;
&lt;h2 id=&#34;生成網頁&#34;&gt;生成網頁&lt;/h2&gt;
&lt;p&gt;若測試沒問題，就可以執行以下命令來正式生成網頁：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;hugo -t casper
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這時 Hugo 會用選定的 casper theme 來生成網頁，並放在自動建立的 &lt;code&gt;public&lt;/code&gt; 資料夾當中。&lt;/p&gt;
&lt;h2 id=&#34;上傳到-github&#34;&gt;上傳到 Github&lt;/h2&gt;
&lt;p&gt;接著再上傳整個 &lt;code&gt;public&lt;/code&gt; 資料夾到 Github 上之前，請先用瀏覽器到 Github 上面建立一個 Repository，假設叫做 Hugo-Blog。建立好之後，請點中間 SSH 那個按鈕，後面會生成 SSH 的 url 網址，把那個網址複製下來；若建立 Repo 的時候有勾 README 選項，則按右邊綠色 Clone or download 按鈕，點藍色 Use SSH連 結切換到 Clone with SSH，再複製 url。&lt;/p&gt;
&lt;p&gt;接著在剛才的 Git Bash 輸入以下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;cd&lt;/span&gt; public &lt;span style=&#34;color:#6272a4&#34;&gt;# 切換到 public 資料夾路徑&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git init &lt;span style=&#34;color:#6272a4&#34;&gt;# 生成 Git 紀錄&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git add . &lt;span style=&#34;color:#6272a4&#34;&gt;# 將 public 資料夾內全部檔案 staging&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git commit -m &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Initial commit.&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;# commit 所有已 staging 的檔案  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git remote add origin git@github.com:idontwannarock/Hugo-Blog.git &lt;span style=&#34;color:#6272a4&#34;&gt;# 加入遠端資訊&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push -u origin master &lt;span style=&#34;color:#6272a4&#34;&gt;# 將本地的 master branch push 到 Github 上的 origin/master branch&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中 &lt;code&gt;git remote&lt;/code&gt; 那行後面的網址請貼上你在 Github 複製的 SSH url。&lt;/p&gt;
&lt;p&gt;等 Git Bash 顯示上傳完成後，上 Github 的 Hugo-Blog Repository 檢查資料都上傳好之後，就可以到 &lt;code&gt;config.toml&lt;/code&gt; 這個檔案裡面 &lt;code&gt;baseURL&lt;/code&gt; 所記錄的網址去看新生成的網頁；這個網址也可以到 Github 對應的 Repo 裡面，Settings 底下的 Github Pages 區塊找到。&lt;/p&gt;
&lt;p&gt;這邊是一些基本的 Git 功能，將 &lt;code&gt;public&lt;/code&gt; 資料夾內的東西上傳到 Github 已經建立好的 Hugo-Blog 這個名稱的 Repo，Github Pages 就會抓取其中 &lt;code&gt;index.html&lt;/code&gt; 檔案來生成靜態網頁。&lt;/p&gt;
&lt;p&gt;後續如果新寫了一些 md 檔存在 &lt;code&gt;content\post&lt;/code&gt; 資料夾中想要上傳到網頁上，只需要進到 &lt;code&gt;public&lt;/code&gt; 資料夾右鍵打開 Git Bash，執行以下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git pull origin master &lt;span style=&#34;color:#6272a4&#34;&gt;# 先把 Github 的主版本抓下來以免衝突&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;cd&lt;/span&gt; .. &lt;span style=&#34;color:#6272a4&#34;&gt;# 切換到 Hugo-Blog 資料夾路徑&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo server -t casper &lt;span style=&#34;color:#6272a4&#34;&gt;# 一樣先測試網頁看有沒有需要修改&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo -t casper &lt;span style=&#34;color:#6272a4&#34;&gt;# 生成網頁&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;cd&lt;/span&gt; public &lt;span style=&#34;color:#6272a4&#34;&gt;# 切換到 public 資料夾路徑&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git add .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git commit -m &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;說明文字&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push origin master
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;即可更新變動。&lt;/p&gt;
&lt;p&gt;如果覺得這些 Git 指令太麻煩，其實可以用 Github Desktop 來完成上傳的操作，非常方便。&lt;/p&gt;
&lt;p&gt;大 guy 4 醬。&lt;/p&gt;
&lt;p&gt;如果對 Git 指令不熟悉，可以參考我另外寫的 &lt;a href=&#34;https://blog.idontwannarock.dev/2017/09/git_and_github_basic/&#34;&gt;這篇筆記&lt;/a&gt;。&lt;/p&gt;
- https://blog.idontwannarock.dev/2017/09/hugo_practice_2/ - This website by Howard Wang is licensed under a Creative Common Attribution-ShareAlike 4.0 International License.</description>
        </item>
    
    
    
        <item>
        <title>Hugo 練習 (1)</title>
        <link>https://blog.idontwannarock.dev/2017/09/hugo_practice_1/</link>
        <pubDate>Sat, 09 Sep 2017 00:17:31 +0800</pubDate>
        
        <guid>https://blog.idontwannarock.dev/2017/09/hugo_practice_1/</guid>
        <description>Howard Tech Note https://blog.idontwannarock.dev/2017/09/hugo_practice_1/ -&lt;blockquote&gt;
&lt;p&gt;這篇文章是初學的時候撰寫的，其中一些觀念並不正確，步驟也可能因為更新或觀念問題而不適用或者多餘，此篇文章僅為留做紀錄&lt;/p&gt;&lt;/blockquote&gt;
&lt;h1 id=&#34;源起&#34;&gt;源起&lt;/h1&gt;
&lt;p&gt;2017 年 9 月 7 日在 ptt Soft_Job 版看到胡立大大 po 文準備作一個計劃-建立 Slack 群組來幫助大家練習討論一些網頁相關的東西，而我需要多作一些練習，並且最好能有人詢問或討論所以加入。&lt;/p&gt;
&lt;p&gt;而 9 月 8 日胡立大大就回信了，基本上就是解釋他想建立一個開放的群組，群組裡沒有老師，他擔任類似助教的腳色，會固定提出練習的題目，解答一些疑問跟提供一些資源這樣。&lt;/p&gt;
&lt;p&gt;其中胡立大大有提到希望大家能養成自學、解決問題以及歸納知識的習慣，我覺得很有道理很重要，所以剛好他也有提到希望大家學習「怎麼用靜態部落格產生系統」，可以練習怎麼使用靜態部落格產生系統、Git 的基本操作以及 Github 的相關知識。&lt;/p&gt;
&lt;p&gt;所以，就來吧！&lt;/p&gt;
&lt;h1 id=&#34;學習目標&#34;&gt;學習目標&lt;/h1&gt;
&lt;p&gt;學習怎麼用靜態部落格產生系統 Hugo，並且把部落格架在 Github Pages 上面。&lt;/p&gt;
&lt;h1 id=&#34;學習內容&#34;&gt;學習內容&lt;/h1&gt;
&lt;h2 id=&#34;什麼是靜態動態&#34;&gt;什麼是靜態、動態&lt;/h2&gt;
&lt;p&gt;就我看網路多種說法，歸納的概念大概是部落格或網站本身顯示不需要重複跟 server 端交流的就算靜態，反之就算動態；最近因為 SEO 的興起，還有一種偽靜態。&lt;/p&gt;
&lt;h2 id=&#34;什麼是靜態部落格-網頁-產生系統-static-site-generator&#34;&gt;什麼是靜態部落格 (網頁) 產生系統 Static Site Generator&lt;/h2&gt;
&lt;p&gt;在網路上找到 &lt;a href=&#34;https://www.sitepoint.com/7-reasons-use-static-site-generator/&#34;&gt;這篇文章&lt;/a&gt;，講得蠻清楚的。&lt;/p&gt;
&lt;p&gt;在講什麼是靜態部落格（網頁）產生系統 Static Site Generator(SSG) 之前，應該講一下內容管理系統 Content Management System(CMS)，例如 Wordpress。&lt;/p&gt;
&lt;p&gt;CMS 的理念是讓作者不用擔心部落格，也就是網頁輸出的各種技術問題，只需要選擇喜歡的模板 template，就可以使用 CMS 提供的文字編輯器寫作，節省很多技術上的麻煩，相信有用過 Wordpress 都能理解。&lt;/p&gt;
&lt;p&gt;但相對之下 CMS 就有一些壞處，例如只能使用 CMS 提供的編輯功能（不然還是要會網頁或程式知識去作修改）、因為很多動態功能所以伺服器工作比較重可能影響效能、可能因為某些軟體或功能升級或資料庫出問題而導致網頁也出問題。&lt;/p&gt;
&lt;p&gt;而 SSG 算是在 CMS 跟完全自己 coding 寫網頁架部落格的中間，比較知名的有 Jekyll 跟 Hugo，或胡立提到的 Hexo。&lt;/p&gt;
&lt;p&gt;對 SSG 我的認知是有點像在前端方面簡化的 CMS。還是有 template 或 themes，但寫作部分一般用 Markdown 語法寫作來簡化文字編輯功能，但也給予很大的自由度，因為有些近似自己寫 HTML，所以要修改什麼功能或加什麼 widget，都不用像 Wordpress 要透過 plugin 的方式加入，而是可以直接嵌入，但相對的其實也需要對 HTML 語法有一些認識。&lt;/p&gt;
&lt;p&gt;而後端方面 SSG 跟 CMS 就很相似，通常兩者都有作後端一條龍的服務（要收費），也可以自己另外選擇伺服器跟資料庫儲存網頁內容。&lt;/p&gt;
&lt;p&gt;所以 SSG 好處就跟 CMS 相對，如自由度比較大、因為靜態網頁不需要一直跟伺服器交換資料而提高效能、因為原則上只使用基本 HTML+Markdown 所以網頁出問題機會小。&lt;/p&gt;
&lt;p&gt;另外有一些其他好處，如因為幾乎沒有伺服器端的功能所以安全性高、因為類似在寫網頁而能作到版本控管（事實上 Wordpress 也有這個功能，但只限於草稿的樣子）。&lt;/p&gt;
&lt;p&gt;當然 SSG 最大的問題就是技術門檻明顯比 CMS 要高得多，而且因為 Markdown 語法本身的限制，文字排版美觀等功能比較受限制，只能靠技術跟美感自己去修正。&lt;/p&gt;
&lt;h2 id=&#34;什麼是-markdown-語法&#34;&gt;什麼是 Markdown 語法&lt;/h2&gt;
&lt;p&gt;剛剛講到 Markdown 語法，算是一種更簡化的 HTML 語法。我是因為 Github 的 README 說明檔都用 Markdown 撰寫而接觸過，但要注意 Markdown 在 Github 跟一般網頁的顯示會稍有不同。&lt;/p&gt;
&lt;p&gt;因為簡化過，所以非常簡單，可以參考 &lt;a href=&#34;http://markdown.tw/&#34;&gt;這個網頁&lt;/a&gt; 來學習。&lt;/p&gt;
&lt;p&gt;當然 Markdown 語法的簡化導致它本身並不能作太多排版跟美化，但相對的好處就是一致性，這在寫筆記或說明的時候相當有用。&lt;/p&gt;
&lt;p&gt;另外，若習慣寫筆記歸類在 Evernote 上，其實 Evernote 也能讀 Markdown，只是沒辦法直接在 Evernote 上編輯，方法需要自己找。我自己是用 Sublime Text 的 plugin 來編輯跟上傳 Markdown 筆記到 Evernote 上，這應該能給大家一個方向。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;註：目前 Evernote 因為安全因素已經關閉 hook，所以目前應該是做不到用 Sublime Text 的 plugin 來上傳筆記到 Evernote。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;什麼是-github&#34;&gt;什麼是 Github&lt;/h2&gt;
&lt;p&gt;剛剛提到 Github，感覺這是目前寫程式必備，因為是基於版本管理工具 Git 建立，算是跟其他工程師交流兼有履歷的功能吧，工作上不知道使用度如何。我有點把它當文件儲存空間，因為基本上沒有空間限制，只有針對單檔、Repository 的大小限制。&lt;/p&gt;
&lt;p&gt;原本的版本管理工具 Git 是一種幫助專案協作的工具，因為其版本管理功能強大而受到廣泛的使用。問題就是因為要一直用 command 命令來使用功能，而且儲存的空間有時不方便遠距協作，於是 Github 就誕生了。&lt;/p&gt;
&lt;p&gt;Github 有點像網路共享空間，讓大家可以把 code 都放在網路空間，並配合 Git 的版本控制功能，採用圖形介面不用 command 來使用功能，大大的方便了協作，並且促進了 open source 的討論跟合作。但因為 Github 本身文字編輯的功能並不強而且幾乎沒有測試運行的功能，所以多數人還是習慣在自己電腦本機上作業後上傳，而且上傳常常還是在本機電腦用各種 Git command 來作基本版本管理並上傳，所以還不是非常方便。&lt;/p&gt;
&lt;p&gt;但是，最近幾年 Github 推出 Github Desktop 我個人認為幾乎彌補了這部分的缺陷。Github Desktop 是 Github 提供的桌面應用程式，可以協助管理本機版本並有圖形介面的上傳功能，讓你不用再記各種 Git command。只是不知道實務上使用度如何。&lt;/p&gt;
&lt;h2 id=&#34;什麼是-github-pages&#34;&gt;什麼是 Github Pages&lt;/h2&gt;
&lt;p&gt;Github 有提供靜態網頁的 hosting 功能，可以把網頁直接存在 Github 的 Repository 裡面，然後生成靜態的網頁。不過 Github Pages 有&lt;a href=&#34;https://help.github.com/articles/what-is-github-pages/&#34;&gt;一些限制&lt;/a&gt;要注意。&lt;/p&gt;
&lt;p&gt;對，其實 Github 本身就有提供靜態網頁生成的功能，而且前面提到的 Jekyll 根本是 Github 親兒子，Github Pages 直接推薦使用，也可以參考。&lt;/p&gt;
&lt;h2 id=&#34;怎麼使用-hugo-架設網頁在-github-pages&#34;&gt;怎麼使用 Hugo 架設網頁在 Github Pages&lt;/h2&gt;
&lt;p&gt;我選 Hugo 是因為他用 Go 語言寫的，感覺很潮，呵呵。不是啦，是因為 Hugo 環境設定最簡單。&lt;/p&gt;
&lt;p&gt;因為全都要用 Git 的功能所以全都要安裝 Git 這個就不用比了。Jekyll 是 Ruby on rails(ROR) 寫的，使用前要安裝 ROR；胡立大大提到的 Hexo 要裝 Node.js 跟 nvm；只有 Hugo 雖然是 Go 寫的，但不用安裝 Go，只要把執行檔下載下來設定好環境變數 Path 就可以使用。不用安裝一堆我最喜歡惹~&lt;/p&gt;
&lt;p&gt;在功能教學上，我個人覺得其實 Hugo 官網並沒有寫得很好，不管中文還是英文都一樣，後來各種解法都是別人自己寫的心得，譬如我找到一個講的比較清楚的這篇：用 &lt;a href=&#34;https://brent-li.github.io/post/build-personal-site-with-hugo/&#34;&gt;Hugo搭建個人網站&lt;/a&gt;，但我完全照作也是到後面 Git 操作那邊就掛點，怎麼都傳不上去，搞到焦頭爛額。&lt;/p&gt;
&lt;p&gt;下一篇再來寫我完整的作法，我並不是本科出身，有很多基礎知識不清楚，只能從別人寫的作法中去理解，有問題請見諒，也可以提出來指正我，謝謝大家，今天就到這邊。&lt;/p&gt;
&lt;p&gt;這裡是 &lt;a href=&#34;https://blog.idontwannarock.dev/2017/09/hugo_practice_2/&#34;&gt;下一篇&lt;/a&gt;。&lt;/p&gt;
- https://blog.idontwannarock.dev/2017/09/hugo_practice_1/ - This website by Howard Wang is licensed under a Creative Common Attribution-ShareAlike 4.0 International License.</description>
        </item>
    
    
    
        <item>
        <title>作品介紹</title>
        <link>https://blog.idontwannarock.dev/works/</link>
        <pubDate>Mon, 08 May 2017 09:43:46 +0800</pubDate>
        
        <guid>https://blog.idontwannarock.dev/works/</guid>
        <description>Howard Tech Note https://blog.idontwannarock.dev/works/ -&lt;p&gt;正在整理過去的作品，見諒&lt;/p&gt;
- https://blog.idontwannarock.dev/works/ - This website by Howard Wang is licensed under a Creative Common Attribution-ShareAlike 4.0 International License.</description>
        </item>
    
    
    
        <item>
        <title>About</title>
        <link>https://blog.idontwannarock.dev/about/</link>
        <pubDate>Sun, 07 May 2017 17:32:00 +0800</pubDate>
        
        <guid>https://blog.idontwannarock.dev/about/</guid>
        <description>Howard Tech Note https://blog.idontwannarock.dev/about/ -&lt;p&gt;從自學 PHP 到北科上課學習 Java 入門，從事軟體工程師三年有餘，目前主要工作內容為網路應用開發&lt;/p&gt;
&lt;p&gt;過去接觸過的技術包括&lt;/p&gt;
&lt;p&gt;語言: Java, JavaScript, C#, Lua&lt;/p&gt;
&lt;p&gt;框架: Spring, .Net Framework, NodeJS&lt;/p&gt;
&lt;p&gt;資料庫: MySQL, Oracle, MongoDB, PostgresSQL, Sql Server, Redis, Elasticsearch&lt;/p&gt;
&lt;p&gt;測試: JUnit, Mockito, NUnit&lt;/p&gt;
&lt;p&gt;CI/CD: Git, GitHub, GitLab, Jenkins&lt;/p&gt;
&lt;p&gt;其他: Docker, Docker Compose, Kafka, Zabbix&lt;/p&gt;
&lt;p&gt;最熟練的是 Java 及 Spring 全家桶，Git Flow 或 GitHub Flow 版控，JUnit 及 Mockito 做單元測試及整合測試，Jenkins 搭配 GitHub/GitLab WebHook 做 CI/CD，同時也能利用 shell script、batch script 或 powershell script 搭配 docker-compose 達成基礎的 Infrastructure as Code&lt;/p&gt;
&lt;p&gt;未來主要朝向後端工程繼續開發者的道路，希望能以軟工能力為自己、家庭及社會做出貢獻&lt;/p&gt;
&lt;p&gt;撰寫這個部落格的用意除了記錄自己學習的過程，也是希望能與不同的想法多做交流！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/idontwannarock&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
- https://blog.idontwannarock.dev/about/ - This website by Howard Wang is licensed under a Creative Common Attribution-ShareAlike 4.0 International License.</description>
        </item>
    
    
  </channel>
</rss> 