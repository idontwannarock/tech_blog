<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Howard Tech Note</title>
    <link>https://idontwannarock.github.io/tech_blog/</link>
    <description>Recent content on Howard Tech Note</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This website by Howard Wang is licensed under a Creative Common Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Tue, 21 Dec 2021 09:06:29 +0800</lastBuildDate>
    
        <atom:link href="https://idontwannarock.github.io/tech_blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>Java 樂透抽取算法初探</title>
        <link>https://idontwannarock.github.io/tech_blog/2017/11/java_lottery_algorithm_basic/</link>
        <pubDate>Wed, 15 Nov 2017 14:26:17 +0800</pubDate>
        
        <guid>https://idontwannarock.github.io/tech_blog/2017/11/java_lottery_algorithm_basic/</guid>
        <description>Howard Tech Note https://idontwannarock.github.io/tech_blog/2017/11/java_lottery_algorithm_basic/ -&lt;p&gt;因為做到這個經典練習演算法的題目，雖然是非常入門級的，也是讓我想了很久，覺得都做了這麼久，不記錄下來也是蠻可惜。&lt;/p&gt;
&lt;h1 id=&#34;題目&#34;&gt;題目&lt;/h1&gt;
&lt;p&gt;請隨機從正整數 1-42當中隨機抽出 6個數字，不用排序，但不可重複。&lt;/p&gt;
&lt;h1 id=&#34;解法&#34;&gt;解法&lt;/h1&gt;
&lt;p&gt;樂透這個題目主要可以練習的有三個地方，隨機、迴圈，還有就是如何確保數字不重複。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以 Java 來說，隨機就是使用 &lt;code&gt;java.lang.Math&lt;/code&gt; 類別裡的靜態方法 &lt;code&gt;random()&lt;/code&gt;，但要注意&lt;code&gt;Math.random()&lt;/code&gt; 之後產生的是大於等於 0、小於 1，也就是 &lt;code&gt;0 &amp;lt;= Math.random() &amp;lt; 1&lt;/code&gt; 的 &lt;code&gt;double&lt;/code&gt; 型態浮點常數。&lt;br&gt;
因此，以這題來說，還要記得利用 &lt;code&gt;(int)&lt;/code&gt; 轉換型態成整數型態的常數。&lt;br&gt;
另外，若不放心浮點數轉換為整數後的值，可以利用一樣是 &lt;code&gt;Math&lt;/code&gt; 類別裡的靜態方法 &lt;code&gt;floor()&lt;/code&gt; 或 &lt;code&gt;ceiling()&lt;/code&gt; 來取無條件進位或無條件捨去後的整數值。
而產生指定範圍內的亂數的公式為 &lt;code&gt;Math.random() * 範圍個數 + 初值&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然後因為已經確定要抽出的數目，所以可以使用元素個數不能變動的陣列，當然也可以用可以變動個數的 &lt;code&gt;Collection&lt;/code&gt; 或其子介面去解決。關鍵就在於不可重複。&lt;/p&gt;
&lt;p&gt;這篇只討論陣列的解法。&lt;/p&gt;
&lt;h2 id=&#34;暴力解重複檢查&#34;&gt;暴力解：重複檢查&lt;/h2&gt;
&lt;p&gt;最簡單的寫法肯定就是暴力解：每抽出一個數字就存到結果陣列，然後每抽一次，就跟陣列裡每個數字都比對一次，一有重複就重抽。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#776e71&#34;&gt;// 設定存儲樂透數字陣列
&lt;/span&gt;&lt;span style=&#34;color:#776e71&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#fec418&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#5bc4bf&#34;&gt;[]&lt;/span&gt; randomArray &lt;span style=&#34;color:#5bc4bf&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#815ba4&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#fec418&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#5bc4bf&#34;&gt;[&lt;/span&gt;6&lt;span style=&#34;color:#5bc4bf&#34;&gt;];&lt;/span&gt;

&lt;span style=&#34;color:#776e71&#34;&gt;// 執行抽取樂透數字的動作 6次
&lt;/span&gt;&lt;span style=&#34;color:#776e71&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#815ba4&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#5bc4bf&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#fec418&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#5bc4bf&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#5bc4bf&#34;&gt;;&lt;/span&gt; i &lt;span style=&#34;color:#5bc4bf&#34;&gt;&amp;lt;&lt;/span&gt; randomArray&lt;span style=&#34;color:#5bc4bf&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#06b6ef&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color:#5bc4bf&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color:#5bc4bf&#34;&gt;++)&lt;/span&gt; &lt;span style=&#34;color:#5bc4bf&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#776e71&#34;&gt;// 先將亂數出來的數字存入陣列第 i個位置
&lt;/span&gt;&lt;span style=&#34;color:#776e71&#34;&gt;&lt;/span&gt;     randomArray&lt;span style=&#34;color:#5bc4bf&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#5bc4bf&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#5bc4bf&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#5bc4bf&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#fec418&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#5bc4bf&#34;&gt;)(&lt;/span&gt;Math&lt;span style=&#34;color:#5bc4bf&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#06b6ef&#34;&gt;random&lt;/span&gt;&lt;span style=&#34;color:#5bc4bf&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#5bc4bf&#34;&gt;*&lt;/span&gt; 42&lt;span style=&#34;color:#5bc4bf&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#5bc4bf&#34;&gt;+&lt;/span&gt; 1&lt;span style=&#34;color:#5bc4bf&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#776e71&#34;&gt;// 接著執行檢查迴圈
&lt;/span&gt;&lt;span style=&#34;color:#776e71&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#815ba4&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#5bc4bf&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#fec418&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#5bc4bf&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#5bc4bf&#34;&gt;;&lt;/span&gt; j &lt;span style=&#34;color:#5bc4bf&#34;&gt;&amp;lt;&lt;/span&gt; i&lt;span style=&#34;color:#5bc4bf&#34;&gt;;&lt;/span&gt; j&lt;span style=&#34;color:#5bc4bf&#34;&gt;++)&lt;/span&gt; &lt;span style=&#34;color:#5bc4bf&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#776e71&#34;&gt;// 輪流跟陣列中目前存在的其他元素比對
&lt;/span&gt;&lt;span style=&#34;color:#776e71&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#815ba4&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#5bc4bf&#34;&gt;(&lt;/span&gt;randomArray&lt;span style=&#34;color:#5bc4bf&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#5bc4bf&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#5bc4bf&#34;&gt;==&lt;/span&gt; randomArray&lt;span style=&#34;color:#5bc4bf&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#5bc4bf&#34;&gt;])&lt;/span&gt; &lt;span style=&#34;color:#5bc4bf&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#776e71&#34;&gt;// 如果有找到重複數字，就將計數器 i減 1，然後重抽
&lt;/span&gt;&lt;span style=&#34;color:#776e71&#34;&gt;&lt;/span&gt;            i&lt;span style=&#34;color:#5bc4bf&#34;&gt;--;&lt;/span&gt;
            &lt;span style=&#34;color:#776e71&#34;&gt;// 注意這邊 break是跳出 if外面一層的 for迴圈
&lt;/span&gt;&lt;span style=&#34;color:#776e71&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#815ba4&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color:#5bc4bf&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#5bc4bf&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#5bc4bf&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#5bc4bf&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#776e71&#34;&gt;// 印出樂透數字陣列中的數字，列印陣列也要用迴圈，這邊是用新版寫法
&lt;/span&gt;&lt;span style=&#34;color:#776e71&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#815ba4&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#5bc4bf&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#fec418&#34;&gt;int&lt;/span&gt; num &lt;span style=&#34;color:#5bc4bf&#34;&gt;:&lt;/span&gt; randomArray&lt;span style=&#34;color:#5bc4bf&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#5bc4bf&#34;&gt;{&lt;/span&gt;
    System&lt;span style=&#34;color:#5bc4bf&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#06b6ef&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#5bc4bf&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#06b6ef&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#5bc4bf&#34;&gt;(&lt;/span&gt;num &lt;span style=&#34;color:#5bc4bf&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#48b685&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#5bc4bf&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#5bc4bf&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;fisher-yates-shuffle&#34;&gt;Fisher-Yates shuffle&lt;/h2&gt;
&lt;p&gt;能解決問題的方法就是好方法，但暴力解有一個問題，因為要檢查已存入陣列的其他元素，所以抽到越後面就要檢查越多次，現在只有 42 個數字抽 6 個，萬一是從一百億中抽一百萬個不重複數字，那該檢查多久？&lt;/p&gt;
&lt;p&gt;所以就有一個經典的演算法來解決這個問題，是兩位統計學家 Ronald Fisher 爵士以及 Frank Yates 於 1938 年提出的。&lt;/p&gt;
&lt;p&gt;原始的演算法是為了解決一個問題：如何產生一串無重複數字的亂數數列。&lt;/p&gt;
&lt;p&gt;這個算法其實已經經過很多改良，它的概念是這樣：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先產生一串固定個數且照數值大小排列的字串&lt;/li&gt;
&lt;li&gt;然後隨機從數列中抽出一個數字&lt;/li&gt;
&lt;li&gt;將這個數字從原始數列中刪除&lt;/li&gt;
&lt;li&gt;將這個數字寫道另外一個數列的頭或尾&lt;/li&gt;
&lt;li&gt;重複步驟 2-4 直到所有數字都從原始數列刪除，並且都依照寫到另外一個數列中後停止&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;這個算法的目的就很好地確保了每次隨機抽取數字肯定不會重複，因為之前的數字都已經從要抽取數字的數列中刪除了。&lt;/p&gt;
&lt;p&gt;而且因為不用每次都檢查，所以可以大幅提升效率。&lt;/p&gt;
&lt;p&gt;我們利用這個算法不會抽取到重複數字的特性，可以延伸出解法如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#776e71&#34;&gt;// 設定要抽取個數
&lt;/span&gt;&lt;span style=&#34;color:#776e71&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#fec418&#34;&gt;int&lt;/span&gt; picks &lt;span style=&#34;color:#5bc4bf&#34;&gt;=&lt;/span&gt; 6&lt;span style=&#34;color:#5bc4bf&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#776e71&#34;&gt;// 設定樂透數字範圍起始數字及結束數字
&lt;/span&gt;&lt;span style=&#34;color:#776e71&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#fec418&#34;&gt;int&lt;/span&gt; startNumber &lt;span style=&#34;color:#5bc4bf&#34;&gt;=&lt;/span&gt; 1&lt;span style=&#34;color:#5bc4bf&#34;&gt;,&lt;/span&gt; endNumber &lt;span style=&#34;color:#5bc4bf&#34;&gt;=&lt;/span&gt; 42&lt;span style=&#34;color:#5bc4bf&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#776e71&#34;&gt;// 設定儲存數字的陣列
&lt;/span&gt;&lt;span style=&#34;color:#776e71&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#fec418&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#5bc4bf&#34;&gt;[]&lt;/span&gt; randomArray &lt;span style=&#34;color:#5bc4bf&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#815ba4&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#fec418&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#5bc4bf&#34;&gt;[&lt;/span&gt;endNumber &lt;span style=&#34;color:#5bc4bf&#34;&gt;-&lt;/span&gt; startNumber &lt;span style=&#34;color:#5bc4bf&#34;&gt;+&lt;/span&gt; 1&lt;span style=&#34;color:#5bc4bf&#34;&gt;];&lt;/span&gt;
&lt;span style=&#34;color:#776e71&#34;&gt;// 產生按照數值大小排序好的數列
&lt;/span&gt;&lt;span style=&#34;color:#776e71&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#815ba4&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#5bc4bf&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#fec418&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#5bc4bf&#34;&gt;=&lt;/span&gt; startNumber&lt;span style=&#34;color:#5bc4bf&#34;&gt;;&lt;/span&gt; i &lt;span style=&#34;color:#5bc4bf&#34;&gt;&amp;lt;=&lt;/span&gt; endNumber&lt;span style=&#34;color:#5bc4bf&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color:#5bc4bf&#34;&gt;++)&lt;/span&gt; &lt;span style=&#34;color:#5bc4bf&#34;&gt;{&lt;/span&gt;
    randomArray&lt;span style=&#34;color:#5bc4bf&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#5bc4bf&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#5bc4bf&#34;&gt;=&lt;/span&gt; i&lt;span style=&#34;color:#5bc4bf&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#5bc4bf&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#776e71&#34;&gt;// 開始亂數程序，但我們不用將整個數列都亂數shuffle，只需要做我們要抽取個數，也就是 6次
&lt;/span&gt;&lt;span style=&#34;color:#776e71&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#815ba4&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#5bc4bf&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#fec418&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#5bc4bf&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#5bc4bf&#34;&gt;;&lt;/span&gt; j &lt;span style=&#34;color:#5bc4bf&#34;&gt;&amp;lt;&lt;/span&gt; picks&lt;span style=&#34;color:#5bc4bf&#34;&gt;;&lt;/span&gt; j&lt;span style=&#34;color:#5bc4bf&#34;&gt;++)&lt;/span&gt; &lt;span style=&#34;color:#5bc4bf&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#776e71&#34;&gt;// 先設定一個暫存亂數數字的變數 randomIndex，這是要用來當指標指向陣列元素用的
&lt;/span&gt;&lt;span style=&#34;color:#776e71&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fec418&#34;&gt;int&lt;/span&gt; randomIndex &lt;span style=&#34;color:#5bc4bf&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#5bc4bf&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#fec418&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#5bc4bf&#34;&gt;)(&lt;/span&gt;Math&lt;span style=&#34;color:#5bc4bf&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#06b6ef&#34;&gt;random&lt;/span&gt;&lt;span style=&#34;color:#5bc4bf&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#5bc4bf&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#5bc4bf&#34;&gt;(&lt;/span&gt;endNumber &lt;span style=&#34;color:#5bc4bf&#34;&gt;-&lt;/span&gt; startNumber &lt;span style=&#34;color:#5bc4bf&#34;&gt;+&lt;/span&gt; 1&lt;span style=&#34;color:#5bc4bf&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#5bc4bf&#34;&gt;+&lt;/span&gt; 1&lt;span style=&#34;color:#5bc4bf&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#776e71&#34;&gt;// 然後再設定一個暫存數字的變數 temp，暫存陣列中指標 randomIndex對應的數字
&lt;/span&gt;&lt;span style=&#34;color:#776e71&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fec418&#34;&gt;int&lt;/span&gt; temp &lt;span style=&#34;color:#5bc4bf&#34;&gt;=&lt;/span&gt; randomArray&lt;span style=&#34;color:#5bc4bf&#34;&gt;[&lt;/span&gt;randomIndex&lt;span style=&#34;color:#5bc4bf&#34;&gt;];&lt;/span&gt;
    &lt;span style=&#34;color:#776e71&#34;&gt;// 將 randomArray[randomIndex]跟第 j個元素對調位置
&lt;/span&gt;&lt;span style=&#34;color:#776e71&#34;&gt;&lt;/span&gt;    randomArray&lt;span style=&#34;color:#5bc4bf&#34;&gt;[&lt;/span&gt;randomIndex&lt;span style=&#34;color:#5bc4bf&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#5bc4bf&#34;&gt;=&lt;/span&gt; randomArray&lt;span style=&#34;color:#5bc4bf&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#5bc4bf&#34;&gt;];&lt;/span&gt;
    randomArray&lt;span style=&#34;color:#5bc4bf&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#5bc4bf&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#5bc4bf&#34;&gt;=&lt;/span&gt; temp&lt;span style=&#34;color:#5bc4bf&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#5bc4bf&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#776e71&#34;&gt;// 印出樂透數字陣列中的數字
&lt;/span&gt;&lt;span style=&#34;color:#776e71&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#815ba4&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#5bc4bf&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#fec418&#34;&gt;int&lt;/span&gt; k &lt;span style=&#34;color:#5bc4bf&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#5bc4bf&#34;&gt;;&lt;/span&gt; k &lt;span style=&#34;color:#5bc4bf&#34;&gt;&amp;lt;&lt;/span&gt; picks&lt;span style=&#34;color:#5bc4bf&#34;&gt;;&lt;/span&gt; k&lt;span style=&#34;color:#5bc4bf&#34;&gt;++)&lt;/span&gt; &lt;span style=&#34;color:#5bc4bf&#34;&gt;{&lt;/span&gt;
    System&lt;span style=&#34;color:#5bc4bf&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#06b6ef&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#5bc4bf&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#06b6ef&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#5bc4bf&#34;&gt;(&lt;/span&gt;num &lt;span style=&#34;color:#5bc4bf&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#48b685&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#5bc4bf&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#5bc4bf&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我有特別設定要樂透的數字個數，以及抽取範圍的起始及終止值，以便將來更動這三個參數就可以做各種不同範圍個數的樂透，甚至也可以利用 &lt;code&gt;java.util.Scanner&lt;/code&gt; 的功能讓使用者能直接用鍵盤輸入這三個參數，不過那就不在這個題目要討論的重點。&lt;/p&gt;
&lt;h1 id=&#34;限制&#34;&gt;限制&lt;/h1&gt;
&lt;p&gt;其實這些解法最大的問題都不在於算法本身，而是 Java 提供的 &lt;code&gt;random()&lt;/code&gt; 方法是不是真正的隨機，其實這也可以寫一個程式來檢驗，我們將這個程式跑個幾千、幾萬，甚至幾百萬次之後，每一個數字抽到的次數是不是趨於相等。&lt;/p&gt;
&lt;p&gt;就我現在粗淺的理解，基本上還沒有能產生真正隨機數字的演算法；或者說，能用演算法產生的隨機數字都不是真正的隨機，只是趨近於隨機。&lt;/p&gt;
&lt;p&gt;畢竟只要提到演算，就代表有一定規則，而透過一定規則產生出來的東西就無法稱為真正的隨機。&lt;/p&gt;
&lt;p&gt;而 Java 提供的 &lt;code&gt;random()&lt;/code&gt; 方法則是透過線性同餘公式產生的偽隨機數，詳細可以參考 &lt;a href=&#34;https://zh.wikipedia.org/wiki/%E7%B7%9A%E6%80%A7%E5%90%8C%E9%A4%98%E6%96%B9%E6%B3%95&#34;&gt;維基&lt;/a&gt;。&lt;/p&gt;
- https://idontwannarock.github.io/tech_blog/2017/11/java_lottery_algorithm_basic/ - This website by Howard Wang is licensed under a Creative Common Attribution-ShareAlike 4.0 International License.</description>
        </item>
    
    
    
        <item>
        <title>Macbook Pro 的設置 2017 版</title>
        <link>https://idontwannarock.github.io/tech_blog/2017/11/mbp_setup_2017/</link>
        <pubDate>Fri, 03 Nov 2017 09:05:02 +0800</pubDate>
        
        <guid>https://idontwannarock.github.io/tech_blog/2017/11/mbp_setup_2017/</guid>
        <description>Howard Tech Note https://idontwannarock.github.io/tech_blog/2017/11/mbp_setup_2017/ -&lt;blockquote&gt;
&lt;p&gt;這篇文章是初學的時候撰寫的，其中一些觀念並不正確，步驟也可能因為更新或觀念問題而不適用或者多餘，此篇文章僅為留做紀錄&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一直以來都是 PC 人，從來沒用過任何 Apple 或 Linux 的相關產品，剛好有買筆電的需求，想趁機接觸一下不同的作業系統生態，而且久聞 Apple 筆電品質很好，就添購了 Macbook Pro 來當我人生第一台筆電。&lt;/p&gt;
&lt;p&gt;剛拿到筆電總是需要一些設置，盡量讓 PC 跟 MBP 之間資訊同步以及應用軟體上相通或相容，以達到同步並簡化作業環境的目標，提高生產效率。&lt;/p&gt;
&lt;p&gt;於是跟朋友詢問以及上網稍作了解後，有了以下的設置。&lt;/p&gt;
&lt;h1 id=&#34;軟體環境設置&#34;&gt;軟體環境設置&lt;/h1&gt;
&lt;p&gt;因為是要習慣 Unix-based 的作業環境，所以我並沒有特別強求各方面都要設置到跟 Windows 環境類似，所以操作模式上並沒有更動。&lt;/p&gt;
&lt;p&gt;但安裝的軟體上就有些考量，希望能達到集中管理，這就不得不提每個 MacOS 都應該必備的 Homebrew。&lt;/p&gt;
&lt;h2 id=&#34;安裝-homebrew&#34;&gt;安裝 Homebrew&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; 是一套開源的 MacOS 系統的軟體套件管理系統，用來簡化 MacOS 系統上的軟體安裝、卸載等過程，是用 MacOS 內建的 Ruby 語言寫成。&lt;/p&gt;
&lt;p&gt;但 Homebrew 在安裝前需要先安裝 &lt;a href=&#34;https://itunes.apple.com/us/app/xcode/id497799835?mt=12&#34;&gt;Xcode&lt;/a&gt;，似乎是因為 Xcode 會一併安裝一些常用的 command line。&lt;/p&gt;
&lt;p&gt;還好 Xcode 也是免費軟體，可以直接透過 App Store 下載，要注意檔案蠻大的，下載安裝的過程會要花一點時間。&lt;/p&gt;
&lt;p&gt;Xcode 安裝好之後，就打開「終端機」，輸入下面這行來下載安裝 Homebrew：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ruby -e &lt;span style=&#34;color:#48b685&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#815ba4&#34;&gt;$(&lt;/span&gt;curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install&lt;span style=&#34;color:#815ba4&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#48b685&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意第一個 &lt;code&gt;$&lt;/code&gt; 是開啟終端機就會顯示在你可以打字的那一行的開頭，不用重複輸入。&lt;/p&gt;
&lt;p&gt;讓他自動跑完之後，就可以開始使用 &lt;code&gt;brew&lt;/code&gt; 指令來操作啦！&lt;/p&gt;
&lt;p&gt;日後要更新 Homebrew 這個軟體本身，也是一樣在終端機輸入 &lt;code&gt;brew update&lt;/code&gt; 以及 &lt;code&gt;brew tap homebrew/dupes&lt;/code&gt; 就可以了。&lt;/p&gt;
&lt;h2 id=&#34;安裝-caskroom&#34;&gt;安裝 Caskroom&lt;/h2&gt;
&lt;p&gt;除了 Homebrew 以外，第二個推薦安裝的就是 &lt;a href=&#34;https://caskroom.github.io/&#34;&gt;Caskroom&lt;/a&gt;，這也是一個軟體套件管理系統，是 Homebrew 的擴充。&lt;/p&gt;
&lt;p&gt;一般來說 Caskroom 主要用來下載安裝一些有操作介面的應用軟體，譬如 Chrome、Spotify、Evernote 等等；Homebrew 則常用於下載安裝一些沒有操作介面的工具或第三方資源，例如 Git、Hugo、Telnet 這種。&lt;/p&gt;
&lt;p&gt;Caskroom 可以看成 App Store 的擴充，並附帶自動安裝管理的功能，而且因為也是開源專案，它能安裝的軟體是由開放社群中的使用者提供維護，有很多 App Store 沒有的軟體，當然是正版、免費版或試用版。&lt;/p&gt;
&lt;p&gt;而且 Caskroom 還有 &lt;strong&gt;更新管理&lt;/strong&gt; 的功能，除非軟體自帶自動更新功能，否則可以透過 Caskroom 統一更新。所以一般來說，Homebrew 更偏開發者使用，Caskroom 則更適合一般使用者。&lt;/p&gt;
&lt;p&gt;而 Caskroom 的安裝也很簡單，安裝過 Homebrew 後，只需要輸入以下這行就可以安裝好 Homebrew：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ brew install caskroom/cask/brew-cask
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;使用-homebrew-及-caskroom&#34;&gt;使用 Homebrew 及 Caskroom&lt;/h2&gt;
&lt;p&gt;這兩個軟體的指令都很類似而且很容易，Homebrew 就是指令前面加上 &lt;code&gt;brew&lt;/code&gt;，Caskroom 就是 &lt;code&gt;brew cask&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;然後共通的常用指令就是 &lt;code&gt;install&lt;/code&gt; 安裝、&lt;code&gt;uninstall&lt;/code&gt; 解安裝、&lt;code&gt;info&lt;/code&gt; 查詢軟體資料以及 &lt;code&gt;list&lt;/code&gt; 列出已安裝軟體，一樣都是前面加上 &lt;code&gt;brew&lt;/code&gt; 或 &lt;code&gt;brew cask&lt;/code&gt;，然後加上選擇的指令，最後再加上軟體名稱。&lt;/p&gt;
&lt;p&gt;Caskroom 還有一個很好用的功能 &lt;code&gt;search&lt;/code&gt;，也就是你輸入 &lt;code&gt;brew cask search xxx&lt;/code&gt;，它會搜尋比對已安裝、未安裝的軟體名稱，未安裝的軟體名稱還會分成完全相同 (Exact Match) 以及部份相同 (Partial Matches) 兩部份，讓你選擇需要的軟體來安裝。&lt;/p&gt;
&lt;h2 id=&#34;我的安裝列表&#34;&gt;我的安裝列表&lt;/h2&gt;
&lt;p&gt;這邊列出我的安裝列表，都是一些我覺得在 MacOS 上，很通用、方便的軟體跟功能，提供給大家參考：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Homebrew&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;git // 開發版本管理工具&lt;/li&gt;
&lt;li&gt;hugo // 靜態網站生成器&lt;/li&gt;
&lt;li&gt;telnet // 上 ptt 用環境設置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Caskroom&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;google-chrome // 上網必備&lt;/li&gt;
&lt;li&gt;appcleaner // 好用的刪除軟體工具&lt;/li&gt;
&lt;li&gt;istat-menus // 顯示系統資訊，可以在桌面頂部的資訊列顯示上下傳速度、電池狀況、CPU 溫度等等資訊&lt;/li&gt;
&lt;li&gt;sourcetree // Git 的圖形化介面軟體&lt;/li&gt;
&lt;li&gt;iterm2 // 更好用的終端機，可以多開分頁！&lt;/li&gt;
&lt;li&gt;spotify // 聽音樂，不解釋&lt;/li&gt;
&lt;li&gt;moom // 讓 Mac 可以調整最大化視窗的位置&lt;/li&gt;
&lt;li&gt;cheatsheet // Mac 快速鍵指令表&lt;/li&gt;
&lt;li&gt;the-unarchiver // 增強解壓縮功能的工具&lt;/li&gt;
&lt;li&gt;vlc // 強悍影音播放程式&lt;/li&gt;
&lt;li&gt;evernote // 資訊管理、筆記軟體，跨平台超好用，重點還可以 web clip 存網頁&lt;/li&gt;
&lt;li&gt;welly // 上 ptt 用軟體&lt;/li&gt;
&lt;li&gt;xmind // 心智圖軟體&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;當然每個人都有不同的偏好，其中有些也有很好的替代軟體，像是 Welly 就有相同功能的 Nally，再加上 PTT 最近基於 &lt;a href=&#34;https://iamchucky.github.io/PttChrome/&#34;&gt;PttChrome&lt;/a&gt;，採用實驗性的 Websocket 連線而推出一個新的服務，直接在瀏覽器輸入 &lt;code&gt;term.ptt.cc&lt;/code&gt; 就可以直接上 PTT，不用額外安裝任何軟體或插件，讓 Welly 跟 Nally 對我來說幾乎就要淘汰(攤手)。&lt;/p&gt;
&lt;p&gt;詳情可參考這篇公告：&lt;a href=&#34;https://www.ptt.cc/bbs/SYSOP/M.1508496102.A.17E.html&#34;&gt;[公告] 使用瀏覽器直接連線至批踢踢&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;另外，因為 Homebrew 跟 Caskroom 的安裝指令都要在終端機或 iTerm2 這類 CLI 軟體上輸入指令，厲害的人可以把你有安裝的軟體，每一條指令合起來做成 .sh 檔，這樣如果有需要重灌系統，只要執行一遍 .sh檔，所有軟體就可以一次性的安裝回來啦！&lt;/p&gt;
&lt;h3 id=&#34;honorable-mention-oh-my-zsh&#34;&gt;Honorable Mention: oh my zsh&lt;/h3&gt;
&lt;p&gt;這邊想推薦的是對常用終端機類 CLI 軟體的使用者或開發者比較有用的東西，所以不常用或對 CLI 沒興趣的讀者直接跳過這段吧！&lt;/p&gt;
&lt;p&gt;在說明 oh my zsh 之前，要先簡單說明，也是記錄一下什麼是 zsh。&lt;/p&gt;
&lt;p&gt;但在說明 zsh 之前要再說明一下什麼是 shell (跪)。&lt;/p&gt;
&lt;p&gt;shell 是一種泛稱。在 Unix-based 的作業系統，例如 Linux 或 MacOS 中，shell 就是指用來跟系統核心 (kernel) 溝通的工具，kernel 收到 shell 傳來的指令後，會解析成各種電腦看得懂的指令，然後交給 CPU 或其他有關的電子元件做資料處理，kernel 的簡單說明可以參考 &lt;a href=&#34;https://zh.wikipedia.org/zh-tw/%E5%85%A7%E6%A0%B8&#34;&gt;wiki&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;zsh(z shell) 也是一種 shell，但 Unix-based 的作業系統默認的 shell 是 bash，總之都是一種 shell。&lt;/p&gt;
&lt;p&gt;而 zsh 的好處就在於比預設的 bash 有更多、更方便的指令，例如忘記完整指令，只要輸入指令前幾個字，按 &lt;code&gt;tab&lt;/code&gt; 鍵，zsh 就會幫你列出所有選項，再按一次 &lt;code&gt;tab&lt;/code&gt; 鍵就可以切換到選擇模式，在列出的指令列表中選擇要執行的指令，光這點就不用選了，就是 zsh 了！&lt;/p&gt;
&lt;p&gt;然後講到 oh my zsh，這是一套基於 zsh 的框架，也就是提供更進階的功能，身為剛入門的開發者，我覺得它最大的好處就是彩色化！oh my zsh 可以安裝 themes，各種 themes 會對許多常用的關鍵字做不同的彩色化等等的處理，這樣用純文字畫面的 CLI 時，就可以更清楚的區分畫面上的資訊！&lt;/p&gt;
&lt;h4 id=&#34;安裝設置-oh-my-zsh&#34;&gt;安裝設置 oh my zsh&lt;/h4&gt;
&lt;p&gt;基本上 MacOS 都已經預設安裝好 zsh，所以不用我們安裝，所以直接安裝 oh my zsh 就好。&lt;/p&gt;
&lt;p&gt;要安裝 oh my zsh，請打開任一 CLI，輸入以下這行指令就可以自動下載並安裝：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sh -c &lt;span style=&#34;color:#48b685&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#815ba4&#34;&gt;$(&lt;/span&gt;curl -fsSL https://raw.githubusercontent.com/robbyryssell/oh-my-zsh/master/tools/install.sh&lt;span style=&#34;color:#815ba4&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#48b685&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;安裝好 oh my zsh 之後，預設就會有主題，對初學者的我來說夠用，但如果你想做調整，就要到 &lt;code&gt;MacOS 帳號名稱&lt;/code&gt; 資料夾的隱藏檔案中尋找 &lt;code&gt;.zshrc&lt;/code&gt; 檔案，這就是 oh my zsh 的設定檔，所有東西都可以在這邊設置。&lt;/p&gt;
&lt;p&gt;這聽起來很麻煩，但用過就會像變心的女朋友一樣，回～不～去～啦～～～&lt;/p&gt;
&lt;h1 id=&#34;工作環境設置&#34;&gt;工作環境設置&lt;/h1&gt;
&lt;p&gt;接下來講到工作環境設置。&lt;/p&gt;
&lt;p&gt;因為在學習網頁前後端開發，會用到 &lt;a href=&#34;http://www.oracle.com/technetwork/java/javase/downloads/index.html&#34;&gt;Java JDK&lt;/a&gt;、&lt;a href=&#34;https://www.eclipse.org/downloads/packages/eclipse-ide-java-developers/oxygen1a&#34;&gt;Eclipse&lt;/a&gt;、&lt;a href=&#34;http://brackets.io/&#34;&gt;Brackets&lt;/a&gt; 等等，也會寫一些筆記存到 &lt;a href=&#34;https://evernote.com/&#34;&gt;Evernote&lt;/a&gt;，或例如這篇的靜態部落格文章。&lt;/p&gt;
&lt;p&gt;但我常常會交替在 MBP 跟 PC 上進行開發或筆記的工作，要怎樣保持 MBP、PC，甚至手機上都能同步到最新進度，對初學者的我，是花了一番心思。&lt;/p&gt;
&lt;h2 id=&#34;開發同步&#34;&gt;開發同步&lt;/h2&gt;
&lt;p&gt;首先講純開發的部分，比較簡單，前面提到的開發軟體或環境一樣都可以利用 Homebrew 或 Caskroom 下載安裝。&lt;/p&gt;
&lt;p&gt;接著就是利用 &lt;a href=&#34;https://www.sourcetreeapp.com/&#34;&gt;Sourcetree&lt;/a&gt; 跟 &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; 來做 Git 版本管理同步。&lt;/p&gt;
&lt;p&gt;所有專案、檔案，都透過 Sourcetree push 到 GitHub 的 repositories。然後每個裝置要編輯開發前，都先 pull Github 上的最新進度，這樣就可以簡單的保持各裝置開發進度相同。&lt;/p&gt;
&lt;p&gt;當然，使用 Sourcetree 會需要一些 Git 觀念。有關 Git 的簡單觀念及操作，可以參考我寫的 &lt;a href=&#34;https://idontwannarock.github.io/tech_blog/2017/09/git_and_github_basic/&#34;&gt;這一篇文章&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;筆記同步&#34;&gt;筆記同步&lt;/h2&gt;
&lt;p&gt;這部分比較麻煩一點，因為我習慣統一用 Markdown 語法寫筆記跟部落格，這樣規格統一，筆記跟部落格文章可以很方便地互相轉換。&lt;/p&gt;
&lt;p&gt;Markdown 簡介跟語法可以參考我的 &lt;a href=&#34;https://idontwannarock.github.io/tech_blog/2017/10/markdown_syntax/&#34;&gt;這一篇文章&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;而我的筆記都習慣收在 Evernote，這樣可以隨時利用 Evernote 的分類以及搜尋功能，並且手機上也可以看。但要將 Markdown 筆記轉成 Evernote 讀得懂的格式並上傳到 Evernote 並不是很容易。&lt;/p&gt;
&lt;p&gt;之前是選擇用 Sublime Text 加上開源的 Plug-in 來轉換並上傳，但最近 Evernote 將 developer token 的功能停止之後，這個方法就不能再使用了。&lt;/p&gt;
&lt;p&gt;於是我換到 &lt;a href=&#34;https://marxi.co/&#34;&gt;Marxico&lt;/a&gt;，其實算是相當方便，只是要收費，但在找不到更好的替換工具之下，也只能忍痛花下去。但好處就是我只要寫好 Markdown 筆記，就可以很方便的上傳 Evernote，也可以匯出 Markdown、HTML，甚至是 PDF 檔。&lt;/p&gt;
&lt;p&gt;另一方面部落格就真的很麻煩了，我原本只有 PC 的時候，就是寫 Markdown 草稿，然後用靜態部落格產生器 Hugo 轉換並生成部落格，再 Host 到 GitHub Pages 來部署我的靜態部落格，可以參考我 &lt;a href=&#34;https://idontwannarock.github.io/tech_blog/2017/09/hugo_practice_2/&#34;&gt;這一篇&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;但這個方法的問題就是無法多部裝置間同步，因為 push 到 GitHub 的只有 Hugo 生成的 &lt;code&gt;public&lt;/code&gt; 資料夾，而不是整個包含 layout 跟 Markdown 原稿的完整資料夾，所以換一部裝置就要用很麻煩的方式另外傳送整個資料夾。&lt;/p&gt;
&lt;p&gt;於是我嘗試了別的方法。&lt;/p&gt;
&lt;h3 id=&#34;github-pages&#34;&gt;GitHub Pages&lt;/h3&gt;
&lt;p&gt;在講解我的方法之前，要講一下 GitHub Pages 提供的託管靜態網頁服務分成兩種形式：&lt;strong&gt;個人或組織主頁(User or Organization Page)&lt;/strong&gt; 以及 &lt;strong&gt;專案主頁(Project Page)&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;差別在於個人主頁就是 &lt;strong&gt;一個 GitHub帳號只會有一個個人主頁方式的靜態網頁&lt;/strong&gt;，網址會是 &lt;code&gt;https://&amp;lt;GitHub帳號&amp;gt;.github.io&lt;/code&gt;；而 &lt;strong&gt;一個 GitHub帳號則可以有數個專案主頁&lt;/strong&gt;，網址原則上應該就是 &lt;code&gt;https://&amp;lt;GitHub帳號&amp;gt;.github.io/Repo名稱&lt;/code&gt; 這樣。&lt;/p&gt;
&lt;p&gt;當然，只要是專案主頁方式，網頁的網址就可以透過在 Repo 根目錄生成 CNAME 檔案，並記錄申請的域名來替換，這邊不多說。&lt;/p&gt;
&lt;h3 id=&#34;部署-hugo-產生的靜態網頁到-github-pages&#34;&gt;部署 Hugo 產生的靜態網頁到 GitHub Pages&lt;/h3&gt;
&lt;p&gt;我之前裡選擇的方式是專案主頁，因為我想保留個人主頁做我個人的履歷主頁，放置我的資訊跟 Porfolio 之類的，所以 Blog 就不能用個人主頁的方式部署在 GitHub Pages。&lt;/p&gt;
&lt;p&gt;這便順便記錄一下，個人主頁其實部署方式跟專案主頁沒有太大差別，主要的差別在於個人主頁的 Repo 名稱必須取為 &lt;code&gt;&amp;lt;GitHub帳號&amp;gt;.github.io&lt;/code&gt;，也就是跟個人主頁的網址相同；而專案主頁的 Repo 名稱則沒有限定。&lt;/p&gt;
&lt;p&gt;而 GitHub Pages 的部署方式有三種，如同 &lt;a href=&#34;https://help.github.com/articles/configuring-a-publishing-source-for-github-pages/&#34;&gt;官網說明&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&#34;default-source-settings&#34;&gt;Default Source Settings&lt;/h4&gt;
&lt;p&gt;第一種參考官網說明 &lt;a href=&#34;https://help.github.com/articles/configuring-a-publishing-source-for-github-pages/#default-source-settings-for-repositories-without-the-username-naming-scheme&#34;&gt;這一段&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;就是我之前用的方式，在 &lt;a href=&#34;https://idontwannarock.github.io/tech_blog/2017/09/hugo_practice_2/&#34;&gt;這一篇&lt;/a&gt; 裡有說明。&lt;/p&gt;
&lt;p&gt;簡單來說，就是將 Hugo 預設產生的 &lt;code&gt;public&lt;/code&gt; 資料夾，直接 push 到 GitHub 的 Repo，GitHub 預設會直接讀取 Repo 中的檔案生成靜態網站。&lt;/p&gt;
&lt;h4 id=&#34;publish-from-a-docs-folder-on-master-branch&#34;&gt;Publish From a &lt;code&gt;docs&lt;/code&gt; Folder on &lt;code&gt;master&lt;/code&gt; Branch&lt;/h4&gt;
&lt;p&gt;第二種要做比較多設定，參考官網 &lt;a href=&#34;https://help.github.com/articles/configuring-a-publishing-source-for-github-pages/#publishing-your-github-pages-site-from-a-docs-folder-on-your-master-branch&#34;&gt;這段&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;因為 GitHub Pages 有提供另一種部署方式，就是它可以選擇讀取 Repo 的 &lt;code&gt;docs&lt;/code&gt; 資料夾內檔案來生成靜態網站，而不是第一種方式直接讀取 Repo 根目錄裡的檔案。&lt;/p&gt;
&lt;p&gt;所以我們先將 Hugo 資料夾中的 &lt;code&gt;config.toml&lt;/code&gt; 檔案用文字編輯器打開，在開頭加入以下這一行：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;publishDir = &amp;quot;docs&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這是因為 Hugo 預設生成靜態網頁的檔案會存在 &lt;code&gt;public&lt;/code&gt; 資料夾，而這一行參數就是告訴 Hugo 將生成的靜態網頁檔案改存在 &lt;code&gt;docs&lt;/code&gt; 資料夾。&lt;/p&gt;
&lt;p&gt;然後一樣將整個 Hugo 資料夾 push 到 GitHub 上，然後開啟瀏覽器進入那個 GitHub Repo，選擇 Repo 名稱底下那排最右邊的 Settings，然後往下拉到倒數第二個區塊 GitHub Pages，在 source 那邊的下拉選單選擇 &lt;code&gt;master branch/docs folder&lt;/code&gt;，然後點擊 &lt;code&gt;save&lt;/code&gt; 就完成部署了。&lt;/p&gt;
&lt;p&gt;這個時候 source 上方應該會出現一行綠色底的文字，註明生成的網址，點進去就是實際生成的靜態網站。&lt;/p&gt;
&lt;p&gt;往後寫新的文章就可以不用更動任何設置，直接用 Hugo 指令生成後 push 到 GitHub 上就好。&lt;/p&gt;
&lt;p&gt;然後不同裝置要保持同步也很簡單，就直接將整個 Repo 從 GitHub 上 pull 或 clone 下來，因為所有的設定檔案、layout、Markdown 原稿都已經存在 GitHub 上。&lt;/p&gt;
&lt;h4 id=&#34;publish-from-master-or-gh-pages-branch&#34;&gt;Publish from &lt;code&gt;master&lt;/code&gt; or &lt;code&gt;gh-pages&lt;/code&gt; Branch&lt;/h4&gt;
&lt;p&gt;第三種方式就難了，可以參考官網 &lt;a href=&#34;https://help.github.com/articles/configuring-a-publishing-source-for-github-pages/#enabling-github-pages-to-publish-your-site-from-master-or-gh-pages&#34;&gt;這段&lt;/a&gt; 了解概念。&lt;/p&gt;
&lt;p&gt;這種方式要對 Git 有比較深入的了解，我也還沒全部弄懂 Git 部分的操作過程。&lt;/p&gt;
&lt;p&gt;但原理似乎大概是這樣，但 &lt;strong&gt;我不是非常確定&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;同樣利用 Hugo 預設生成靜態網頁檔案到 &lt;code&gt;public&lt;/code&gt; 資料夾，然後利用 Git branch 的功能，產生一個 &lt;code&gt;gh-pages&lt;/code&gt; 的分支版本，所以在 local，也就是操作的電腦上就會有 &lt;code&gt;master&lt;/code&gt; 跟 &lt;code&gt;gh-pages&lt;/code&gt; 兩個不同版本的檔案紀錄。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;master&lt;/code&gt; 這個分支上利用 gitignore 屏蔽掉 &lt;code&gt;public&lt;/code&gt; 資料夾，然後將其他所有檔案 staging -&amp;gt; commit -&amp;gt; push 到 GitHub Repo 的 &lt;code&gt;master&lt;/code&gt; 分支。&lt;/p&gt;
&lt;p&gt;再切換到 &lt;code&gt;gh-pages&lt;/code&gt; 這個分支上，將除了 &lt;code&gt;public&lt;/code&gt; 資料夾以外的所有檔案都用 gitignore 屏蔽掉，然後一樣將 &lt;code&gt;public&lt;/code&gt; 資料夾 staging -&amp;gt; commit -&amp;gt; push 到 GitHub Repo 的 &lt;code&gt;gh-pages&lt;/code&gt; 分支。&lt;/p&gt;
&lt;p&gt;這時候 GitHub 的 Repo 上就同樣有 &lt;code&gt;master&lt;/code&gt; 跟 &lt;code&gt;gh-pages&lt;/code&gt; 兩個不同版本的紀錄。&lt;/p&gt;
&lt;p&gt;然後開啟瀏覽器進入 GitHub Repo，同樣選擇 Repo 名稱底下那排最右邊的 Settings，然後在 GitHub Pages 區塊的 source 下拉選單裡選擇 &lt;code&gt;gh-pages branch&lt;/code&gt;，然後點擊 &lt;code&gt;save&lt;/code&gt; 就完成了。&lt;/p&gt;
- https://idontwannarock.github.io/tech_blog/2017/11/mbp_setup_2017/ - This website by Howard Wang is licensed under a Creative Common Attribution-ShareAlike 4.0 International License.</description>
        </item>
    
    
    
        <item>
        <title>Markdown 語法</title>
        <link>https://idontwannarock.github.io/tech_blog/2017/10/markdown_syntax/</link>
        <pubDate>Sun, 22 Oct 2017 15:42:04 +0800</pubDate>
        
        <guid>https://idontwannarock.github.io/tech_blog/2017/10/markdown_syntax/</guid>
        <description>Howard Tech Note https://idontwannarock.github.io/tech_blog/2017/10/markdown_syntax/ -&lt;h1 id=&#34;markdown-特色&#34;&gt;Markdown 特色&lt;/h1&gt;
&lt;h2 id=&#34;易編寫&#34;&gt;易編寫&lt;/h2&gt;
&lt;p&gt;相對於 HTML 需要注意各種 tag、屬性、特殊字元，Markdown 是更容易編寫的方式，雖然無法像 HTML 那樣可以直接透過各種屬性，甚至 CSS 來達到各種效果，但純粹以書寫來說，Markdown 的功能已經相當夠用。&lt;/p&gt;
&lt;h2 id=&#34;轉換-html&#34;&gt;轉換 HTML&lt;/h2&gt;
&lt;p&gt;不過如果有需要的話，Markdown 可以用各種方式轉換成 HTML，以方便我們發布成網頁或部落格文章，網路上有相當多的程式可以達到這點；相對之下，從 HTML 轉換回 Markdown 就沒這麼方便了，主要原因就是 HTML 有相當多屬性等並不被 Markdown 支援，所以有轉換回 Markdown 的困難。&lt;/p&gt;
&lt;p&gt;但還是有補救的辦法，在編寫 Markdown 文件的時候，其實還是可以使用 HTML 語法的，我使用過的轉換器都可以讀取 HTML 語法，並正常顯示以及轉換，所以真的有什麼 Markdown 找不到的 HTML 功能，就直接寫 HTML 吧！當然這就需要對 HTML 語法有更多認識了。&lt;/p&gt;
&lt;h2 id=&#34;編寫視覺&#34;&gt;編寫／視覺&lt;/h2&gt;
&lt;p&gt;跟 HTML 一樣，在編寫 Markdown 的時候呈現的畫面，跟實際呈現的畫面其實是不一樣的。&lt;/p&gt;
&lt;p&gt;例如我們編寫 Markdown 如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;&lt;span style=&#34;color:#815ba4&#34;&gt;-&lt;/span&gt; ***This*** is a [&lt;span style=&#34;color:#5bc4bf&#34;&gt;sample&lt;/span&gt;](&lt;span style=&#34;color:#06b6ef&#34;&gt;http://example.com/ &amp;#34;example.com&amp;#34;&lt;/span&gt;).
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;實際呈現的畫面其實是這樣的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;This&lt;/strong&gt;&lt;/em&gt; is a &lt;a href=&#34;http://example.com/&#34; title=&#34;example.com&#34;&gt;sample&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以在編寫 Markdown 的時候，最好找個可以隨時觀看實際畫面的編輯器來確認實際畫面。&lt;/p&gt;
&lt;h1 id=&#34;區塊元素&#34;&gt;區塊元素&lt;/h1&gt;
&lt;h2 id=&#34;換行&#34;&gt;換行&lt;/h2&gt;
&lt;p&gt;原則上按 Enter 鍵就是換行。&lt;/p&gt;
&lt;p&gt;要注意的是有些轉換器會要求不同的換行字元，例如有些會要求在行尾加上兩個空白，再按 Enter 鍵，才代表換行；也有些會要求兩個空白加一個 tab 鍵等等，所以建議要找可以即時顯示畫面的編輯器，隨時確認實際畫面。&lt;/p&gt;
&lt;h2 id=&#34;分段&#34;&gt;分段&lt;/h2&gt;
&lt;p&gt;Markdown 是以空白行來分段，原則上就是該行只有一個 Enter 就換行。&lt;/p&gt;
&lt;p&gt;同樣的，要注意有些編輯器會要求不同的特殊字元來代表空白行。&lt;/p&gt;
&lt;h2 id=&#34;標題&#34;&gt;標題&lt;/h2&gt;
&lt;p&gt;Markdown 支援 Setext 以及 atx 兩種形式的標題。一般都用 atx 語法，標題的階層較多，語法也比較好記。&lt;/p&gt;
&lt;h3 id=&#34;setex-形式&#34;&gt;Setex 形式&lt;/h3&gt;
&lt;p&gt;以底線的方式來表示標題，只有兩種如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;This is an H1
=============
This is an H2
-------------
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;實際顯示就會變成這樣：&lt;/p&gt;
&lt;blockquote&gt;
&lt;h1 id=&#34;this-is-an-h1&#34;&gt;This is an H1&lt;/h1&gt;
&lt;h2 id=&#34;this-is-an-h2&#34;&gt;This is an H2&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;atx-形式&#34;&gt;atx 形式&lt;/h3&gt;
&lt;p&gt;在標題前面加上 1 到 6 個 &lt;code&gt;#&lt;/code&gt;，剛好對應到 HTML 的 &lt;code&gt;h1&lt;/code&gt; 到 &lt;code&gt;h6&lt;/code&gt;，如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;# This is an H1
&lt;/span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#5bc4bf;font-weight:bold&#34;&gt;## This is an H2
&lt;/span&gt;&lt;span style=&#34;color:#5bc4bf;font-weight:bold&#34;&gt;### This is an H3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;實際呈現：&lt;/p&gt;
&lt;blockquote&gt;
&lt;h1 id=&#34;this-is-an-h1-1&#34;&gt;This is an H1&lt;/h1&gt;
&lt;h2 id=&#34;this-is-an-h2-1&#34;&gt;This is an H2&lt;/h2&gt;
&lt;h3 id=&#34;this-is-an-h3&#34;&gt;This is an H3&lt;/h3&gt;
&lt;/blockquote&gt;
&lt;p&gt;若你寫完有考慮轉為 HTML 發布為網頁或部落格，確切使用標題是個好習慣。一是轉換完不用再花心思調整，只需要考慮 CSS 或 Javascript 做美化就好；二是良好的標題設定跟 SEO 優化有關。&lt;/p&gt;
&lt;h2 id=&#34;清單&#34;&gt;清單&lt;/h2&gt;
&lt;p&gt;與 HTML 相同，也分為有序清單及無序清單。&lt;/p&gt;
&lt;h3 id=&#34;有序清單&#34;&gt;有序清單&lt;/h3&gt;
&lt;p&gt;使用一個數字，加一個英文句點 &lt;code&gt;.&lt;/code&gt;，再空一格。&lt;/p&gt;
&lt;p&gt;注意 &lt;strong&gt;數字並不會影響實際畫面的排序&lt;/strong&gt;，例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;&lt;span style=&#34;color:#815ba4&#34;&gt;1.&lt;/span&gt;    First item
&lt;span style=&#34;color:#815ba4&#34;&gt;2.&lt;/span&gt;    Second item
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;實際上 Markdown 會自動排序：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol start=&#34;9527&#34;&gt;
&lt;li&gt;First item&lt;/li&gt;
&lt;li&gt;Second item&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;但建議還是照正常順序編排啦，自己編寫看得比較清楚，而且也不清楚什麼時候 Markdown 就改成一定要照順序排序（攤手）。&lt;/p&gt;
&lt;h3 id=&#34;無序清單&#34;&gt;無序清單&lt;/h3&gt;
&lt;p&gt;使用 &lt;code&gt;*&lt;/code&gt;、&lt;code&gt;+&lt;/code&gt; 或 &lt;code&gt;-&lt;/code&gt; 做無序清單的標記。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;&lt;span style=&#34;color:#815ba4&#34;&gt;*&lt;/span&gt; First item
&lt;span style=&#34;color:#815ba4&#34;&gt;*&lt;/span&gt; Second item
&lt;span style=&#34;color:#815ba4&#34;&gt;*&lt;/span&gt; Third item
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;會顯示成：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;First item&lt;/li&gt;
&lt;li&gt;Second item&lt;/li&gt;
&lt;li&gt;Third item&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;巢狀清單&#34;&gt;巢狀清單&lt;/h3&gt;
&lt;p&gt;不論是有序還是無序清單，都可以使用縮排 tab 鍵來做出巢狀的清單。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;&lt;span style=&#34;color:#815ba4&#34;&gt;*&lt;/span&gt; First item
	&lt;span style=&#34;color:#815ba4&#34;&gt;*&lt;/span&gt; Second item
		&lt;span style=&#34;color:#815ba4&#34;&gt;*&lt;/span&gt; Third item
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;會顯示成：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;First item
&lt;ul&gt;
&lt;li&gt;Second item
&lt;ul&gt;
&lt;li&gt;Third item&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;區塊引言&#34;&gt;區塊引言&lt;/h2&gt;
&lt;p&gt;使用 &lt;code&gt;&amp;gt;&lt;/code&gt; 來標記區塊引言。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;&lt;span style=&#34;color:#815ba4&#34;&gt;&amp;gt; &lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;This is a blockquote paragraph.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;就會顯示成：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a blockquote paragraph.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;區塊引言也可以巢狀分層，例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;&lt;span style=&#34;color:#815ba4&#34;&gt;&amp;gt; &lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;This is a blockquote sentence 1.
&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#815ba4&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#815ba4&#34;&gt;&amp;gt; &lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&amp;gt; This is a blockquote sentence 2.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;會顯示成：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a blockquote sentence 1.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a blockquote sentence 2.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;區塊引言也可以只在一個「段落」的第一行加入 &lt;code&gt;&amp;gt;&lt;/code&gt; 標記區塊，記得「段落」是要以「空白行」做為區隔。&lt;/p&gt;
&lt;p&gt;另外區塊內也支援 Markdown 語法。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;&lt;span style=&#34;color:#815ba4&#34;&gt;&amp;gt; &lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;*This* is a blockquote paragraph 1 sentence 1.
&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&lt;/span&gt;**This** is a blockquote paragraph 1 &lt;span style=&#34;font-style:italic&#34;&gt;**&lt;/span&gt;*sentence 2***.
This is a blockquote paragraph 1 sentence 3.
&lt;span style=&#34;color:#815ba4&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#815ba4&#34;&gt;&amp;gt; &lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&amp;gt; - [ ] This is a blockquote paragraph 2 sentence 1.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;會顯示成：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;This&lt;/em&gt; is a blockquote paragraph 1 sentence 1.&lt;br&gt;
&lt;strong&gt;This&lt;/strong&gt; is a blockquote paragraph 1 &lt;em&gt;&lt;strong&gt;sentence 2&lt;/strong&gt;&lt;/em&gt;.&lt;br&gt;
This is a blockquote paragraph 1 sentence 3.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; This is a blockquote paragraph 2 sentence 2.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;但注意區塊引言內常常會自動加上斜體屬性，所以強調的三種狀態在區塊引言內其實只會剩粗體一種。&lt;/p&gt;
&lt;h2 id=&#34;程式碼區塊&#34;&gt;程式碼區塊&lt;/h2&gt;
&lt;p&gt;在程式碼區塊內，Markdown 語法並不會被轉換，所以可以如實呈現實際寫的 Markdown 語法內容。若是其他種程式語言的程式碼，則會有限度的辨識，並標記出有支援的語法，這部分目前有很多擴充，容後再敘。&lt;/p&gt;
&lt;p&gt;當然以 Markdown 語法要做程式碼區塊，有幾種辦法，一是用 &lt;!-- raw HTML omitted --&gt;```&lt;!-- raw HTML omitted --&gt; 將整段程式碼包起來，一是在開頭用縮排 tab鍵來做標記，直到沒有縮排的一行空白行為止。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```
This is a code block.
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;呈現起來會是這樣：&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;This is a code block.
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;分隔線&#34;&gt;分隔線&lt;/h2&gt;
&lt;p&gt;在同一行用三個以上的 &lt;code&gt;*&lt;/code&gt;、&lt;code&gt;-&lt;/code&gt; 或 &lt;code&gt;_&lt;/code&gt; 可以組成一個分隔線，同一行不可以有其他的文字或標記，但在三個 &lt;code&gt;*&lt;/code&gt;、&lt;code&gt;-&lt;/code&gt; 或 &lt;code&gt;_&lt;/code&gt;中間可以插入空白。&lt;/p&gt;
&lt;p&gt;以下幾種方式都可以組成分隔線：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;&lt;span style=&#34;color:#815ba4&#34;&gt;-&lt;/span&gt; - -  
&lt;span style=&#34;color:#815ba4&#34;&gt;*&lt;/span&gt; * *  
______ &lt;span style=&#34;font-weight:bold&#34;&gt;______&lt;/span&gt; &lt;span style=&#34;font-weight:bold&#34;&gt;______&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;都會顯示成同一種分隔線：&lt;/p&gt;
&lt;blockquote&gt;
&lt;hr&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;區段元素&#34;&gt;區段元素&lt;/h1&gt;
&lt;h2 id=&#34;連結&#34;&gt;連結&lt;/h2&gt;
&lt;p&gt;Markdown 的連結有兩種方式，一是行內，一是參考。兩種都是用 &lt;code&gt;[]&lt;/code&gt; 來標記要形成超連結的文字。&lt;/p&gt;
&lt;h3 id=&#34;行內連結&#34;&gt;行內連結&lt;/h3&gt;
&lt;p&gt;行內連結是用 &lt;code&gt;[]&lt;/code&gt; 將文字包起來後，再加上 &lt;code&gt;()&lt;/code&gt;，並在小括號內加上連結網址即可。若想幫連結加上標題，也就是滑鼠移動到連結文字上會顯示的標題，在小括號內的連結網址後，空一格，用 &lt;code&gt;&amp;quot;&lt;/code&gt; 將標題文字包起來即可。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;This is a [&lt;span style=&#34;color:#5bc4bf&#34;&gt;sample&lt;/span&gt;](&lt;span style=&#34;color:#06b6ef&#34;&gt;http://example.com/ &amp;#34;example.com&amp;#34;&lt;/span&gt;).
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;就會呈現為：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a &lt;a href=&#34;http://example.com/&#34; title=&#34;example.com&#34;&gt;sample&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;參考連結&#34;&gt;參考連結&lt;/h3&gt;
&lt;p&gt;若你的文章內有多處要連結到同一個網址連結，則用參考連結是較好的方式。&lt;/p&gt;
&lt;p&gt;參考連結一樣是用 &lt;code&gt;[]&lt;/code&gt; 將文字包起來，後面再用一次 &lt;code&gt;[]&lt;/code&gt; 將用來辨識連結的標籤包起來。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;Let me [Google][0] that for you.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;同樣會呈現為：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Let me &lt;a href=&#34;http://www.google.com/&#34; title=&#34;Google&#34;&gt;Google&lt;/a&gt; that for you.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然後在文件的任意處，對，「任意處」，放上標籤內的連結內容定義，例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;[0]: http://www.google.com/ &amp;#34;Google&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但很抱歉，這個參考連結的內容定義並不會實際呈現出來，想檢查正確與否，就是直接點超連結的文字來測試。&lt;/p&gt;
&lt;p&gt;而連結的內容定義，有一定的語法，所以有以下幾點需要注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[]&lt;/code&gt; 內輸入連結的辨識標籤，可以是字母、數字、空白和標點符號，但並無大小寫區分&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[]&lt;/code&gt; 後必須接一個 &lt;code&gt;:&lt;/code&gt;，再接著一個以上的空白或縮排 tab&lt;/li&gt;
&lt;li&gt;空白或縮排 tab 後再接連結網址，可以選擇用 &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; 將網址包起來，但非必要&lt;/li&gt;
&lt;li&gt;網址後面可以選擇性地加上連結標題，也就是滑鼠游標移到超連結文字上後會顯示的標題，須用 &lt;code&gt;&#39;&#39;&lt;/code&gt;、&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt; 或 &lt;code&gt;()&lt;/code&gt; 包住標題&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;強調&#34;&gt;強調&lt;/h2&gt;
&lt;p&gt;將想要強調的文字用 &lt;code&gt;*&lt;/code&gt; 或 &lt;code&gt;_&lt;/code&gt; 包起來，就可以呈現三種強調的方式。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;***粗斜體***  
&lt;span style=&#34;font-weight:bold&#34;&gt;__粗體__&lt;/span&gt;  
&lt;span style=&#34;font-style:italic&#34;&gt;*斜體*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;會呈現如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;粗斜體&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;粗體&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;斜體&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;程式碼&#34;&gt;程式碼&lt;/h2&gt;
&lt;p&gt;這邊跟程式碼區塊的區別，是只用來標記一小段行內程式碼，直接用 &lt;!-- raw HTML omitted --&gt;`&lt;!-- raw HTML omitted --&gt; 將程式碼包起來即可。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;&lt;span style=&#34;color:#48b685&#34;&gt;`This is a code.`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;就會顯示為：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;This is a code.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;若程式碼內有需要用到 &lt;code&gt;`&lt;/code&gt; 這個符號，可以用多個 &lt;code&gt;`&lt;/code&gt; 符號來包住程式碼以作區別，例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;A single backtick in a code span: `` &lt;span style=&#34;color:#48b685&#34;&gt;` ``  
&lt;/span&gt;&lt;span style=&#34;color:#48b685&#34;&gt;A bakctick-delimited string in a code span: `` `&lt;/span&gt;foo` ``
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;就會顯示為：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A single backtick in a code span: &lt;code&gt;`&lt;/code&gt;&lt;br&gt;
A bakctick-delimited string in a code span: &lt;code&gt;`foo`&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;圖片&#34;&gt;圖片&lt;/h2&gt;
&lt;p&gt;插入圖片的 Markdown 語法跟連結非常相似，幾乎只差在需要在開頭加上一個 &lt;code&gt;!&lt;/code&gt; 符號。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;![&lt;span style=&#34;color:#5bc4bf&#34;&gt;Markdown logo&lt;/span&gt;](&lt;span style=&#34;color:#06b6ef&#34;&gt;https://upload.wikimedia.org/wikipedia/commons/thumb/4/48/Markdown-mark.svg/208px-Markdown-mark.svg.png &amp;#34;Markdown&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;就會顯示出圖片：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/4/48/Markdown-mark.svg/208px-Markdown-mark.svg.png&#34; alt=&#34;Markdown logo&#34; title=&#34;Markdown&#34;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;行內圖片的語法注意如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;須以一個 &lt;code&gt;!&lt;/code&gt; 開頭&lt;/li&gt;
&lt;li&gt;接著以 &lt;code&gt;[]&lt;/code&gt; 加入替代文字，也就是圖片路徑、網址失效的時候顯示的文字&lt;/li&gt;
&lt;li&gt;再以 &lt;code&gt;()&lt;/code&gt; 加入圖片路徑或網址&lt;/li&gt;
&lt;li&gt;&lt;code&gt;()&lt;/code&gt; 內的網址後面，只可以 &lt;code&gt;&#39;&#39;&lt;/code&gt; 或 &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt; 包住可以選擇加上的標題&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;參考圖片的語法則像這樣：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;![Evernote logo][1]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;參考的定義方式則與連結的參考內容定義方式一模一樣：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;[1]: https://upload.wikimedia.org/wikipedia/commons/a/a4/Evernote_Icon.png &amp;#34;Evernote&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;同樣可以顯示出圖片：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/a/a4/Evernote_Icon.png&#34; alt=&#34;Evernote logo&#34; title=&#34;Evernote&#34;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;其他&#34;&gt;其他&lt;/h1&gt;
&lt;h2 id=&#34;自動連結&#34;&gt;自動連結&lt;/h2&gt;
&lt;p&gt;Markdown 也支援比較簡短的連結形式，可以用來表達連結網址及信箱，同時也能有超連結功能，只需要用 &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; 包住網址即可。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;&amp;lt;&lt;span style=&#34;color:#5bc4bf&#34;&gt;http:&lt;/span&gt;&lt;span style=&#34;color:#ef6155&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color:#06b6ef&#34;&gt;example&lt;/span&gt;&lt;span style=&#34;color:#ef6155&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#06b6ef&#34;&gt;com&lt;/span&gt;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;就可以顯示為：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://example.com/&#34;&gt;http://example.com/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;跳脫字元&#34;&gt;跳脫字元&lt;/h2&gt;
&lt;p&gt;前面講了很多 Markdown 的語法，使用很多符號來達成指定功能的標記，那如果只是需要在文章中加入那些符號，但並不想使用相關的功能，就需要在該符號前面加上 &lt;code&gt;\&lt;/code&gt; 這個符號，以達成跳脫字元的功能。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;If I want to \*\*emphasize\*\* something without making it &lt;span style=&#34;font-weight:bold&#34;&gt;**bold**&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;就會顯示為：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If I want to **emphasize** something without making it &lt;strong&gt;bold&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以下是 Markdown 支援能在前面加上 &lt;code&gt;\&lt;/code&gt; 以形成跳脫字元的符號：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;\&lt;/code&gt; 反斜線&lt;br&gt;
&lt;code&gt;`&lt;/code&gt; 反引號&lt;br&gt;
&lt;code&gt;*&lt;/code&gt; 星號&lt;br&gt;
&lt;code&gt;_&lt;/code&gt; 底線&lt;br&gt;
&lt;code&gt;{}&lt;/code&gt; 大括號&lt;br&gt;
&lt;code&gt;[]&lt;/code&gt; 中括號&lt;br&gt;
&lt;code&gt;()&lt;/code&gt; 小括號&lt;br&gt;
&lt;code&gt;#&lt;/code&gt; 井字號&lt;br&gt;
&lt;code&gt;+&lt;/code&gt; 加號&lt;br&gt;
&lt;code&gt;-&lt;/code&gt; 減號&lt;br&gt;
&lt;code&gt;.&lt;/code&gt; 英文句點&lt;br&gt;
&lt;code&gt;!&lt;/code&gt; 驚嘆號&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;特殊功能&#34;&gt;特殊功能&lt;/h2&gt;
&lt;p&gt;前面都是介紹 Markdown 原生支援的語法，其實有很多通用的寫法也能適用在 Markdown 當中。這邊列出我找到的一些語法，但請注意使用的編輯器或轉換器的支援度。&lt;/p&gt;
&lt;h3 id=&#34;checkbox&#34;&gt;Checkbox&lt;/h3&gt;
&lt;p&gt;語法是先用一個 &lt;code&gt;-&lt;/code&gt;，一個空格，再加上 &lt;code&gt;[ ]&lt;/code&gt;，空格後再加上敘述。注意 &lt;code&gt;[ ]&lt;/code&gt; 當中必須有一個空格。若需要顯示的 checkbox 已經勾選，請將 &lt;code&gt;[ ]&lt;/code&gt; 當中的空格替換成 &lt;code&gt;x&lt;/code&gt; 或 &lt;code&gt;X&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;&lt;span style=&#34;color:#815ba4&#34;&gt;- [ ]&lt;/span&gt; First box
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;就會顯示為：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; First box&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;table&#34;&gt;Table&lt;/h3&gt;
&lt;p&gt;Markdown 也支援做表格，基本上需要三個部分，標題列、設定列、內容表格。基本上都是用 &lt;code&gt;|&lt;/code&gt; 做為分隔符號。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;No.|Pokemon|神奇寶貝
:---:|:---|---:
1|Bulbasaur|妙蛙種子
2|Ivysaur|妙蛙草
3|Venusaur|妙蛙花
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;會顯示為：&lt;/p&gt;
&lt;blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;No.&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Pokemon&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;神奇寶貝&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Bulbasaur&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;妙蛙種子&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Ivysaur&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;妙蛙草&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Venusaur&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;妙蛙花&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/blockquote&gt;
&lt;p&gt;在畫表格的時候，有幾項注意事項：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;左邊界跟右邊界的框線非必要&lt;/li&gt;
&lt;li&gt;標題列必須每欄都填入欄位名稱&lt;/li&gt;
&lt;li&gt;第二列設定列，每一欄都必須填入至少一個 &lt;code&gt;-&lt;/code&gt; 符號，並用 &lt;code&gt;:&lt;/code&gt; 設定對齊方式。預設是靠左對齊；&lt;code&gt;:-&lt;/code&gt; 也代表靠左對齊；&lt;code&gt;-:&lt;/code&gt; 代表靠右對齊；&lt;code&gt;:-:&lt;/code&gt; 則代表置中&lt;/li&gt;
&lt;li&gt;內容表格必須至少一列&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;支援程式碼&#34;&gt;支援程式碼&lt;/h2&gt;
&lt;p&gt;這邊特指的是程式碼區塊。&lt;/p&gt;
&lt;p&gt;其實大家應該注意到前面的程式碼區塊的文字有各種顏色，其實就是 Markdown 在做辨識程式語言的工作，並試圖將跟辨識出來的語言的關鍵字做顏色標記。&lt;/p&gt;
&lt;p&gt;如果記錄在程式碼區塊的程式碼有確切的語言，不仿試用以下的辦法，讓 Markdown 能更好的辨認程式碼，並更好地標記。&lt;/p&gt;
&lt;p&gt;首先必須使用三個 &lt;code&gt;`&lt;/code&gt; 來前後包住程式碼區塊，然後在第一排 &lt;code&gt;`&lt;/code&gt; 的後面加上程式語言名稱。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;	```java  
	public static void main(String[] args) {  
		System.out.println(&amp;#34;Hello World!&amp;#34;);  
	}  
	```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;就可以讓 Markdown 辨識如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#815ba4&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#815ba4&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#fec418&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#06b6ef&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#5bc4bf&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#5bc4bf&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#5bc4bf&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#5bc4bf&#34;&gt;{&lt;/span&gt;
	System&lt;span style=&#34;color:#5bc4bf&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#06b6ef&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#5bc4bf&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#06b6ef&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#5bc4bf&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#48b685&#34;&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#5bc4bf&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#5bc4bf&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;另外，利用這個辨識的功能，還能延伸為繪製一些簡單的圖表，如流程圖。&lt;/p&gt;
&lt;p&gt;詳細語法請上網搜尋 &lt;code&gt;markdown&lt;/code&gt; 加 &lt;code&gt;flow&lt;/code&gt;。這邊僅舉例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```flow
st=&amp;gt;start
op=&amp;gt;operation: operation
con=&amp;gt;condition: condition
e=&amp;gt;end

st-&amp;gt;op(right)-&amp;gt;con
con(yes)-&amp;gt;e
con(no)-&amp;gt;op
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Markdown 辨識後，會自動繪圖如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-flow&#34; data-lang=&#34;flow&#34;&gt;st=&amp;gt;start  
op=&amp;gt;operation: operation  
con=&amp;gt;condition: yes or no?  
e=&amp;gt;end  

st-&amp;gt;op(right)-&amp;gt;con  
con(yes)-&amp;gt;e  
con(no)-&amp;gt;op  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;（很顯然 Hugo 提供的轉換器並不支援這種擴充的繪圖功能）&lt;/p&gt;
- https://idontwannarock.github.io/tech_blog/2017/10/markdown_syntax/ - This website by Howard Wang is licensed under a Creative Common Attribution-ShareAlike 4.0 International License.</description>
        </item>
    
    
    
        <item>
        <title>整數溢位 Integer Overflow</title>
        <link>https://idontwannarock.github.io/tech_blog/2017/10/integer_overflow/</link>
        <pubDate>Sun, 01 Oct 2017 07:04:47 +0800</pubDate>
        
        <guid>https://idontwannarock.github.io/tech_blog/2017/10/integer_overflow/</guid>
        <description>Howard Tech Note https://idontwannarock.github.io/tech_blog/2017/10/integer_overflow/ -&lt;p&gt;這是我查到一些資料後的理解，希望能多一點對整數溢位後為何會正負循環的了解。&lt;/p&gt;
&lt;h1 id=&#34;數字系統&#34;&gt;數字系統&lt;/h1&gt;
&lt;p&gt;首先要了解的是數字系統，因為一般電腦是採用二進制 (Binary) 來作數字計算，而不是我們習慣的十進制 (Decimal)。&lt;/p&gt;
&lt;p&gt;我們一般人都是用十進制，十進制就是用 &lt;code&gt;0、1、2、3、4、5、6、7、8、9&lt;/code&gt; 十個數字來表達，一個位數就有十種狀態，從 0 開始往上累積，超過 9 就進一位。&lt;/p&gt;
&lt;p&gt;而二進制是什麼呢？二進制就是用 &lt;code&gt;0、1&lt;/code&gt; 兩個數字來表達，一個位數就只有兩種狀態表達，從 0 開始往上累積，超過 1 就進一位。&lt;/p&gt;
&lt;p&gt;以十進制來說，&lt;code&gt;13&lt;/code&gt; 這個數字其實應該寫成 &lt;code&gt;1*10^1 + 3*10^0&lt;/code&gt; 這樣。&lt;code&gt;10^0&lt;/code&gt; 是 &lt;code&gt;1&lt;/code&gt;，也就是代表個位數，乘以幾就是這個位數累積到幾，超過 &lt;code&gt;9&lt;/code&gt; 就進一位到 &lt;code&gt;10^1&lt;/code&gt; 這一位，也就是十位數；再累積超過 &lt;code&gt;9&lt;/code&gt;，就進位到 &lt;code&gt;10^2&lt;/code&gt; 百位數，以此類推。&lt;/p&gt;
&lt;p&gt;那二進制怎麼表達呢？例如有一個二進制的數字長這樣 &lt;code&gt;1101&lt;/code&gt;，如同十進制，我們可以表達成 &lt;code&gt;1*2^3 + 1*2^2 + 0*2^1 + 1*2^0&lt;/code&gt;。這樣公式算完的答案其實就是十進制的 &lt;code&gt;13&lt;/code&gt;，大家可以算一下試試看。其實其他如八進制、十六進制也是相同原理，只不過超過十進制的進制系統，因為阿拉伯數字無法在單一位數表達 &lt;code&gt;10&lt;/code&gt; 以上的數字大小，所以會配合英文字母 &lt;code&gt;A、B、C、D&lt;/code&gt; 等等。&lt;/p&gt;
&lt;p&gt;另外複習一下國小（國中？）數學，小數點的部分，以我們常用的十進制來說，小數點後第一位是 &lt;code&gt;10^-1&lt;/code&gt;、第二位是 &lt;code&gt;10^-2&lt;/code&gt;，以此類推；相對的二進制也是一樣規則，小數點後第一位是 &lt;code&gt;2^-1&lt;/code&gt;、第二位是 &lt;code&gt;2^-2&lt;/code&gt; 這樣。&lt;/p&gt;
&lt;h1 id=&#34;電腦基本運算方式&#34;&gt;電腦基本運算方式&lt;/h1&gt;
&lt;p&gt;前面說到一般電腦是用二進制運算，這是什麼意思？&lt;/p&gt;
&lt;p&gt;舉個例子，今天假設一台電腦，我們拉了第一條電線在裡面，一條電線怎麼表達不同的狀態呢？對，就是通電，有通電是一種狀態，沒通電是一種狀態。當然比較實際的作法是透過電壓，高電壓是一種狀態，低電壓是一種狀態，這樣來表達兩種狀態。&lt;/p&gt;
&lt;p&gt;因此一條電線就能表達兩種狀態，剛好符合二進制只用 &lt;code&gt;0、1&lt;/code&gt; 兩個數字來表達所有數字的狀態，而這樣能表達兩種狀態（1 或 0）的一條電線就是 1 bit。順便講一下因為某些原因，8 bits 被規定為 1 byte。bit 就是我們常聽到的位元，byte 就是我們更常聽到的位元組。&lt;/p&gt;
&lt;p&gt;那 1 bit 可以表達兩種狀態，以二進制來說就是可以表達 0 跟 1；那 2 bits 呢？是四種；那 3 bits 呢？是六種？錯，是八種。&lt;/p&gt;
&lt;p&gt;我們用列舉的方式說明，3 bits 意思是有三條電線各自有 0 跟 1 兩種狀態，因此我們可以列出有下列八種狀況：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;狀況&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;第一條電線&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;第二條電線&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;第三條電線&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;一&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;二&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;三&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;四&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;五&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;六&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;七&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;八&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;簡略來說就是其實是有 2*2*2=8，也就是 2&lt;!-- raw HTML omitted --&gt;3&lt;!-- raw HTML omitted --&gt; 種狀況；以此類推，n bit（n 條電線）就有 2&lt;!-- raw HTML omitted --&gt;n&lt;!-- raw HTML omitted --&gt; 種狀況。&lt;/p&gt;
&lt;p&gt;那 1 byte 可以表達幾種狀況？&lt;/p&gt;
&lt;p&gt;前面說過 1 byte = 1 bit，所以 1 byte 就可以表達 2&lt;!-- raw HTML omitted --&gt;8&lt;!-- raw HTML omitted --&gt; = 256 種狀況。&lt;/p&gt;
&lt;p&gt;前面也講過二進制怎麼換算十進制，也就代表了二進制的每一種狀況都對應到一個十進制的數字，至於對應到的是哪一個，就是用前面教過的換算方法換算。&lt;/p&gt;
&lt;p&gt;因此，1 byte 可以表達 256 種狀況，每一種狀況剛好表達了一個二進制數字；再以二進制對應十進制來考慮，也就是 1 byte 可以表達從 0  開始，最多到 255 的各種十進制數字。&lt;/p&gt;
&lt;h1 id=&#34;資料型態&#34;&gt;資料型態&lt;/h1&gt;
&lt;p&gt;到這邊可能就會有人問，那負數呢？&lt;/p&gt;
&lt;p&gt;沒錯，講到這邊我們都只處理了正整數（包括 0），還沒講到負整數。講負整數之前，順便先講一下資料型態。&lt;/p&gt;
&lt;p&gt;一般電腦要存這些數字，也是以這樣 1 個 byte、1 個 byte 的存，就想像記憶體或硬碟裡面就是一大堆小格子，每個小格子裡面通常就是 8 條線，也就是 8 bits，因此一個小格子就是 1 byte，也就是一個小格子就能存 256 種不同的狀態，以正整數來說，就是能存 0-255 這個範圍內的任何一個數字。&lt;/p&gt;
&lt;p&gt;但 0-255 這樣的範圍很顯然太小了啊，儲存喝一杯可樂、吃一頓麥當勞的價格可能還可以，但要是我去麥當勞想點個六塊炸雞餐台幣 288 元怎麼辦？&lt;/p&gt;
&lt;p&gt;對，就只好用兩個小格子 2 bytes 來存啊，兩個 256 加一起總可以了吧？&lt;/p&gt;
&lt;p&gt;這句話只對了一半。&lt;/p&gt;
&lt;p&gt;的確是要用 2 bytes 來存，但請記住 2 bytes 是有 2&lt;!-- raw HTML omitted --&gt;8&lt;!-- raw HTML omitted --&gt;*2&lt;!-- raw HTML omitted --&gt;8&lt;!-- raw HTML omitted --&gt; = 2&lt;!-- raw HTML omitted --&gt;16&lt;!-- raw HTML omitted --&gt; = 65,536 種狀況，而不是 256+256=512 種狀況唷！就跟 2 bits = 2*2 種狀況一樣，2 bytes 也是 2&lt;!-- raw HTML omitted --&gt;8&lt;!-- raw HTML omitted --&gt;*2&lt;!-- raw HTML omitted --&gt;8&lt;!-- raw HTML omitted --&gt; 種狀況唷！至於有指數的數字相乘則指數相加這件事，請翻數學課本或上網谷哥。&lt;/p&gt;
&lt;p&gt;接著，我們已經知道 2 bytes 有 65536 種狀態，以正整數來說就是 2 bytes 就可以存 0-65535 這個範圍內任一整數，但某些狀況下，這個數字可能也不夠大怎麼辦？&lt;/p&gt;
&lt;p&gt;就只好多用幾個 byte 啊，至於要用幾個 byte 才夠，大家的意見就不太一樣了。&lt;/p&gt;
&lt;p&gt;舉例來說，在 Java 裡面，對於整數就有分成 Byte、Short、Integer、Long 四種資料型態，名稱不重要，重要的是 Java 規定 Byte 型態整數佔 1 Byte、Short 佔 2 Bytes、Integer 佔 4 Bytes、Long 佔 8 Bytes。&lt;/p&gt;
&lt;h1 id=&#34;整數儲存方式&#34;&gt;整數儲存方式&lt;/h1&gt;
&lt;p&gt;以 Byte 這個整數型態來舉例，儲存 &lt;code&gt;1&lt;/code&gt; 這個正整數就是先轉成二進制，也就是 &lt;code&gt;0000 0001&lt;/code&gt; 來存進 Byte 的八位元空間，大概可以表達成這樣：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;|0|0|0|0|0|0|0|1|&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;八個位元，剛好一個位元存一個二進位數字。接著就可以來考慮負整數該怎麼辦了。&lt;/p&gt;
&lt;p&gt;一般來說，不論是 Byte、Short、Integer 還是 Long，都是用最左邊的那一個位元來儲存正負號，&lt;code&gt;0&lt;/code&gt; 是正號，&lt;code&gt;1&lt;/code&gt; 是負號。所以如果是 &lt;code&gt;-1&lt;/code&gt; 就要表達成這樣：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;|1|0|0|0|0|0|0|1|&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;1s-補數&#34;&gt;1&amp;rsquo;s 補數&lt;/h1&gt;
&lt;p&gt;但是，這樣表達會有另外一個問題。&lt;/p&gt;
&lt;p&gt;用最左邊的位元來儲存正負號，所以實際上八位元的空間只能儲存 2&lt;!-- raw HTML omitted --&gt;15&lt;!-- raw HTML omitted --&gt; 種狀況，而我們現在已經考慮到負整數，所以範圍就會變成 -2&lt;!-- raw HTML omitted --&gt;15&lt;!-- raw HTML omitted --&gt;~2&lt;!-- raw HTML omitted --&gt;15&lt;!-- raw HTML omitted --&gt;-1 這個範圍，那個扣掉的 1 是因為通常都把 &lt;code&gt;0&lt;/code&gt; 算在正整數這邊，所以正整數的那邊就要扣掉 1。&lt;/p&gt;
&lt;p&gt;這邊就產生一個問題，照前面的邏輯，&lt;code&gt;0&lt;/code&gt; 換成八位元的二進制應該表達為 &lt;code&gt;0000 0000&lt;/code&gt;，那 &lt;code&gt;1000 0000&lt;/code&gt; 豈不是 &lt;code&gt;-0&lt;/code&gt;？？&lt;/p&gt;
&lt;p&gt;有人想到解決的辦法，就是取補數。&lt;/p&gt;
&lt;p&gt;補數是什麼呢？&lt;/p&gt;
&lt;p&gt;我覺得比較簡單的講法就是兩個加起來會剛好開始進位的數字，互相之間就是補數，譬如在十進制中 &lt;code&gt;1&lt;/code&gt; 跟 &lt;code&gt;9&lt;/code&gt; 互為補數、&lt;code&gt;23&lt;/code&gt; 跟 &lt;code&gt;77&lt;/code&gt; 互為補數這樣。&lt;/p&gt;
&lt;p&gt;但是電腦是二進制啊，二進制補數怎麼算？二進制補數最簡單了，就是把 &lt;code&gt;0&lt;/code&gt; 跟 &lt;code&gt;1&lt;/code&gt; 通通反過來就好，譬如 &lt;code&gt;1001&lt;/code&gt; 翻成 &lt;code&gt;0110&lt;/code&gt; 就變成補數啦，不信可以自己加加看是不是剛好會進位。&lt;/p&gt;
&lt;p&gt;然後我們就可以利用補數來表達負整數的部分，所以像是 &lt;code&gt;0110&lt;/code&gt; 換算成十進制是 &lt;code&gt;6&lt;/code&gt;，而 &lt;code&gt;-6&lt;/code&gt; 就利用補數法表達為 &lt;code&gt;1001&lt;/code&gt;，剛好連最左邊正負號的欄位都同時翻轉成正確的正負號，是不是很方便呢？&lt;/p&gt;
&lt;p&gt;這個方法就被稱作 1&amp;rsquo;s 補數法，但要注意，是對二進制取補數來表達十進制的負整數，而不是對十進制取補數。&lt;/p&gt;
&lt;h1 id=&#34;2s-補數&#34;&gt;2&amp;rsquo;s 補數&lt;/h1&gt;
&lt;p&gt;但是仔細想想，這樣還是沒有解決 &lt;code&gt;-0&lt;/code&gt;，的問題啊，只是原本 &lt;code&gt;-0&lt;/code&gt; 表達成 &lt;code&gt;1000&lt;/code&gt;，現在 &lt;code&gt;0&lt;/code&gt; 變成用 &lt;code&gt;1111&lt;/code&gt; 來表達而已啊？&lt;/p&gt;
&lt;p&gt;所以為了徹底解決這個問題，於是就有了所謂的 2&amp;rsquo;s 補數法來彌補這個問題。&lt;/p&gt;
&lt;p&gt;2&amp;rsquo;s 補數法就是針對 1&amp;rsquo;s 補數法會從 &lt;code&gt;-0&lt;/code&gt; 開始排列而做的調整，原理就是利用 1&amp;rsquo;s 補數法將正整數的二進制取補數變成負整數的二進制後，對二進制加一來代表原本 1&amp;rsquo;s 補數法代表的十進制數字。&lt;/p&gt;
&lt;p&gt;一樣用十進制的 &lt;code&gt;6&lt;/code&gt; 來當例子，十進制的 &lt;code&gt;6&lt;/code&gt; 換成二進制變成 &lt;code&gt;0110&lt;/code&gt;，而 &lt;code&gt;-6&lt;/code&gt; 就是取 1&amp;rsquo;s 補數變成 &lt;code&gt;1001&lt;/code&gt;，然後對 &lt;code&gt;1001&lt;/code&gt; 加一，也就是 &lt;code&gt;1010&lt;/code&gt; 才代表原本 1&amp;rsquo;s 補數所代表的 &lt;code&gt;-6&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果我們看四個位元的整數組合，可以表列如下，讓大家直觀明白 2&amp;rsquo;s 補數法的對應關係。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;一般十進制正整數&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;對應二進制&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;1&amp;rsquo;s補數法&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;2&amp;rsquo;s補數法&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0000&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;+0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;+0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0001&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;+1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;+1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0010&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;+2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;+2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0011&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;+3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;+3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0100&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;+4&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;+4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0101&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;+5&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;+5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;6&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0110&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;+6&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;+6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;7&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0111&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;+7&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;+7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;8&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1000&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-7&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;9&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1001&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-6&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;10&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1010&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-5&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;11&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1011&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-4&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;12&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1100&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;13&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1101&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;14&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1110&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;15&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1111&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;所以 2&amp;rsquo;s 補數法其實只是針對 1&amp;rsquo;s 補數法的負整數部分調整其對應的十進制數字。&lt;/p&gt;
&lt;h1 id=&#34;整數溢位-integer-overflow&#34;&gt;整數溢位 Integer Overflow&lt;/h1&gt;
&lt;p&gt;終於要講到溢位了，yeah~&lt;/p&gt;
&lt;p&gt;所謂整數溢位就是超過整數資料型態能儲存的範圍，例如剛才提的例子是用 4bits 來儲存整數，所以有 2&lt;!-- raw HTML omitted --&gt;4&lt;!-- raw HTML omitted --&gt; 也就是 16 種狀況，對應到利用 2&amp;rsquo;s 補數法調整過的十進制整數範圍就是 -2&lt;!-- raw HTML omitted --&gt;3&lt;!-- raw HTML omitted --&gt;~2&lt;!-- raw HTML omitted --&gt;3&lt;!-- raw HTML omitted --&gt;-1，也就是 -8~+7。&lt;/p&gt;
&lt;p&gt;那如果我利用這樣 4bits 的整數變數儲存正整數 &lt;code&gt;7&lt;/code&gt;，但是變數在參與運算的時候不小心又加了一怎麼辦？這就會超出這個整數變數能儲存的範圍，那實際這個變數裡面的整數會怎麼樣？會變成 &lt;code&gt;-8&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;為什麼？我們來算算看。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;+7&lt;/code&gt; 對應的二進制是 &lt;code&gt;0111&lt;/code&gt;，不小心再加了一會變多少？用二進制運算就是 &lt;code&gt;1000&lt;/code&gt;。然後讓我們看一下上面的表格，&lt;code&gt;1000&lt;/code&gt; 對應的 2&amp;rsquo;s 補數法那格是多少？就是 &lt;code&gt;-8&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;反過來說，&lt;code&gt;-8&lt;/code&gt; 對應的二進制是 &lt;code&gt;1000&lt;/code&gt;，不小心又多減了一，&lt;code&gt;1000&lt;/code&gt; 減一就變成 &lt;code&gt;0111&lt;/code&gt;，那 &lt;code&gt;0111&lt;/code&gt; 對應的十進制數字是多少？就是 &lt;code&gt;+7&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;其實整數溢位會正反循環的道理就在這邊，不知道這樣講我十年後看不看得懂&amp;hellip;&amp;hellip;orz&lt;/p&gt;
- https://idontwannarock.github.io/tech_blog/2017/10/integer_overflow/ - This website by Howard Wang is licensed under a Creative Common Attribution-ShareAlike 4.0 International License.</description>
        </item>
    
    
    
        <item>
        <title>4th Practice: Twitter Clone</title>
        <link>https://idontwannarock.github.io/tech_blog/2017/09/twitter_clone/</link>
        <pubDate>Fri, 15 Sep 2017 10:27:28 +0800</pubDate>
        
        <guid>https://idontwannarock.github.io/tech_blog/2017/09/twitter_clone/</guid>
        <description>Howard Tech Note https://idontwannarock.github.io/tech_blog/2017/09/twitter_clone/ -&lt;h1 id=&#34;第四個目標&#34;&gt;第四個目標&lt;/h1&gt;
&lt;p&gt;練習 PHP、MySQL 跟 MVC，因為 Bootstrap 很方便，所以 HTML 跟 CSS 就這樣吧！廠廠~&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作品：&lt;a href=&#34;https://goo.gl/PVUtXQ&#34;&gt;史上最簡陋 Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;參考：這參考太多了，只能說各種參考 orz&lt;/li&gt;
&lt;li&gt;原始碼：可以參考 &lt;a href=&#34;https://github.com/idontwannarock&#34;&gt;我的Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;還是要先講一下，這並不是我憑空寫出來的作品，是跟著 Udemy 網路課程教學作出來的。&lt;/p&gt;
&lt;h1 id=&#34;遇到困難&#34;&gt;遇到困難&lt;/h1&gt;
&lt;h2 id=&#34;對自己智商產生質疑&#34;&gt;對自己智商產生質疑&lt;/h2&gt;
&lt;p&gt;真的是這樣，之所以這麼廢的東西還能作這麼久，事後檢討的結果，絕大多數時間都浪費在因為智商太低產生的各種製造障礙，簡稱製障問題上。&lt;/p&gt;
&lt;p&gt;譬如說出現什麼 404 或 500 錯誤訊息，花了三個多小時觀看 stackoverflow 上高手討論，最後發現是 PHP 某一行少加了一個 &lt;code&gt;;&lt;/code&gt;，當天直接氣到作不下去之類的…&lt;/p&gt;
&lt;h2 id=&#34;debug&#34;&gt;debug&lt;/h2&gt;
&lt;p&gt;作這個真心受教了，要馬每一步都先作測試，要馬就要會查 bug，人生就是要接受 bug 的出現，沒 bug 絕對是陰德值爆滿。&lt;/p&gt;
&lt;p&gt;所以我目前領悟到的順序是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先查 code 有沒有漏加什麼 &lt;code&gt;;&lt;/code&gt; 或 &lt;code&gt;,&lt;/code&gt;或者哪裡括號沒關好，這些出現的頻率超乎你想像，即使有 autocomplete 功能也是一樣&lt;/li&gt;
&lt;li&gt;再來用 Chrome 的 &lt;code&gt;Inspect&lt;/code&gt; 或 Firefox 的 &lt;code&gt;Inspector&lt;/code&gt; 來查錯誤訊息，運氣好就會跟你說你程式碼哪一行有問題&lt;/li&gt;
&lt;li&gt;還找不到，先不要急著 google，先查 Log！先查 Log！先查 Log！很重要，所以講三次。通常 Log 也會跟你講執行到哪一行有問題&lt;/li&gt;
&lt;li&gt;最後真的都不行，再拿錯誤訊息去拜 google 大神&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上是我的切身之痛，其他的難點在這兩個困難底下，都已經不再重要…喔不是啦，還是補充一個。&lt;/p&gt;
&lt;h2 id=&#34;ajax&#34;&gt;AJAX&lt;/h2&gt;
&lt;p&gt;不太確定這算不算常識，但大家在使用 jQuery+AJAX 的時候要注意 jQuery 的版本，請不要用到 slim 版的喔， jQuery slim 版把 AJAX 功能拿掉了，所以最起碼要用 minified 或更完整的版本，切記切記！&lt;/p&gt;
&lt;p&gt;尤其在套 Bootstrap 4 的模板的時候要注意，官方預設是載入 slim 版本的 jQuery，要記得自己去改 cdn。&lt;/p&gt;
- https://idontwannarock.github.io/tech_blog/2017/09/twitter_clone/ - This website by Howard Wang is licensed under a Creative Common Attribution-ShareAlike 4.0 International License.</description>
        </item>
    
    
    
        <item>
        <title>3rd Practice: Click Click Ben</title>
        <link>https://idontwannarock.github.io/tech_blog/2017/09/click_click_ben/</link>
        <pubDate>Fri, 15 Sep 2017 10:11:46 +0800</pubDate>
        
        <guid>https://idontwannarock.github.io/tech_blog/2017/09/click_click_ben/</guid>
        <description>Howard Tech Note https://idontwannarock.github.io/tech_blog/2017/09/click_click_ben/ -&lt;h1 id=&#34;第三個目標&#34;&gt;第三個目標&lt;/h1&gt;
&lt;p&gt;練習 JavaScript 跟 &lt;code&gt;random()&lt;/code&gt; 函數。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作品：&lt;a href=&#34;https://goo.gl/sgAjR3&#34;&gt;Click Click Ben&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;參考：大帥哥 &lt;a href=&#34;https://www.facebook.com/ben.shieh.3&#34;&gt;Ben Hsieh&lt;/a&gt; ~&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;遇到困難&#34;&gt;遇到困難&lt;/h1&gt;
&lt;h2 id=&#34;帥哥阿-ben-照片太難挑&#34;&gt;帥哥阿 Ben 照片太難挑&lt;/h2&gt;
&lt;p&gt;這是我製作這個作品中碰到最大的困難！太多太帥了，我無法選擇！！我的媽！！！誰來救救我！！！！&lt;/p&gt;
&lt;h2 id=&#34;照片亂數出現位置及亂數間隔時間&#34;&gt;照片亂數出現位置及亂數間隔時間&lt;/h2&gt;
&lt;p&gt;其實這個問題我之前就有學過，所以這邊大概紀錄一下作法。&lt;/p&gt;
&lt;p&gt;先用 JavaScript 的 &lt;code&gt;Math.random()&lt;/code&gt; 來亂數產生 0-1 的浮點數，然後為了適應各種大小的視窗，要乘上 &lt;code&gt;document.documentElement.clientHeight&lt;/code&gt; 或 &lt;code&gt;document.documentElement.clientWidth&lt;/code&gt; 來亂數產生要往右或往下多少 px 的數字。&lt;/p&gt;
&lt;p&gt;然後用 &lt;code&gt;document.getElementById(&amp;quot;id&amp;quot;).style.top&lt;/code&gt; 或 &lt;code&gt;document.getElementById(&amp;quot;id&amp;quot;).style.left&lt;/code&gt; 來設定位置。&lt;/p&gt;
&lt;p&gt;亂數間隔時間則用 &lt;code&gt;setTimeout()&lt;/code&gt; 來作，記得括號的兩個參數要用逗點分隔，第一個參數是暫停後要執行的程式，第二個是暫停的時間，單位是千分之一秒。&lt;/p&gt;
&lt;h2 id=&#34;控制照片出現或消失&#34;&gt;控制照片出現或消失&lt;/h2&gt;
&lt;p&gt;原本想都用 JavaScript 控制，但發現直接寫好所有 HTML+CSS 後，用 &lt;code&gt;display: block;&lt;/code&gt; 跟 &lt;code&gt;display: none;&lt;/code&gt; 來控制最方便。&lt;/p&gt;
&lt;h2 id=&#34;控制次數&#34;&gt;控制次數&lt;/h2&gt;
&lt;p&gt;這也沒什麼好說的，只是做個記錄。&lt;/p&gt;
&lt;p&gt;最基礎的做法就是設一個變數，然後用 &lt;code&gt;if&lt;/code&gt; 判斷來控制次數。&lt;/p&gt;
&lt;p&gt;控制次數感覺可以用 &lt;code&gt;for&lt;/code&gt; 或 &lt;code&gt;while&lt;/code&gt; loop 來寫，但中間要卡一個按的功能，不知道能不能行？&lt;/p&gt;
- https://idontwannarock.github.io/tech_blog/2017/09/click_click_ben/ - This website by Howard Wang is licensed under a Creative Common Attribution-ShareAlike 4.0 International License.</description>
        </item>
    
    
    
        <item>
        <title>2nd Practice: Retina Morning Post</title>
        <link>https://idontwannarock.github.io/tech_blog/2017/09/retina_morning_post/</link>
        <pubDate>Fri, 15 Sep 2017 09:44:03 +0800</pubDate>
        
        <guid>https://idontwannarock.github.io/tech_blog/2017/09/retina_morning_post/</guid>
        <description>Howard Tech Note https://idontwannarock.github.io/tech_blog/2017/09/retina_morning_post/ -&lt;h1 id=&#34;第二個目標&#34;&gt;第二個目標&lt;/h1&gt;
&lt;p&gt;練習報紙排版。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作品：&lt;a href=&#34;https://goo.gl/ZEByGt&#34;&gt;視網膜早報&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;參考：&lt;a href=&#34;https://www.facebook.com/EYECTVretina/&#34;&gt;視網膜 Retina&lt;/a&gt; &lt;a href=&#34;https://goo.gl/iy9tFF&#34;&gt;FB圖片&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;遇到困難&#34;&gt;遇到困難&lt;/h1&gt;
&lt;h2 id=&#34;分散對齊&#34;&gt;分散對齊&lt;/h2&gt;
&lt;p&gt;首先遇到的問題就是要讓文字分散對齊，原本以為用 &lt;code&gt;text-align: justify;&lt;/code&gt; 可以解決，結果才發現這只能用在超過一行的文字上哭哭。&lt;/p&gt;
&lt;p&gt;然後查到一個 jQuery 解法如下，我大概理解原理，但細節還待研究。簡單來說就是算每個字元平均要佔該 &lt;code&gt;div&lt;/code&gt; 多少 &lt;code&gt;width&lt;/code&gt; 來作分散對齊。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#06b6ef&#34;&gt;$&lt;/span&gt;.&lt;span style=&#34;color:#06b6ef&#34;&gt;fn&lt;/span&gt;.&lt;span style=&#34;color:#06b6ef&#34;&gt;strech_text&lt;/span&gt; &lt;span style=&#34;color:#5bc4bf&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#815ba4&#34;&gt;function&lt;/span&gt;(){
    &lt;span style=&#34;color:#815ba4&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#06b6ef&#34;&gt;elmt&lt;/span&gt; &lt;span style=&#34;color:#5bc4bf&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#06b6ef&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#815ba4&#34;&gt;this&lt;/span&gt;),
    &lt;span style=&#34;color:#06b6ef&#34;&gt;cont_width&lt;/span&gt; &lt;span style=&#34;color:#5bc4bf&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#06b6ef&#34;&gt;elmt&lt;/span&gt;.&lt;span style=&#34;color:#06b6ef&#34;&gt;width&lt;/span&gt;(),
    &lt;span style=&#34;color:#06b6ef&#34;&gt;txt&lt;/span&gt; &lt;span style=&#34;color:#5bc4bf&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#06b6ef&#34;&gt;elmt&lt;/span&gt;.&lt;span style=&#34;color:#06b6ef&#34;&gt;html&lt;/span&gt;(),
    &lt;span style=&#34;color:#06b6ef&#34;&gt;one_line&lt;/span&gt; &lt;span style=&#34;color:#5bc4bf&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#06b6ef&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#48b685&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#5bc4bf&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#06b6ef&#34;&gt;txt&lt;/span&gt; &lt;span style=&#34;color:#5bc4bf&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#48b685&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;),
    &lt;span style=&#34;color:#06b6ef&#34;&gt;nb_char&lt;/span&gt; &lt;span style=&#34;color:#5bc4bf&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#06b6ef&#34;&gt;elmt&lt;/span&gt;.&lt;span style=&#34;color:#06b6ef&#34;&gt;text&lt;/span&gt;().&lt;span style=&#34;color:#06b6ef&#34;&gt;length&lt;/span&gt;,
    &lt;span style=&#34;color:#06b6ef&#34;&gt;spacing&lt;/span&gt; &lt;span style=&#34;color:#5bc4bf&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#06b6ef&#34;&gt;cont_width&lt;/span&gt;&lt;span style=&#34;color:#5bc4bf&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#06b6ef&#34;&gt;nb_char&lt;/span&gt;,
    &lt;span style=&#34;color:#06b6ef&#34;&gt;txt_width&lt;/span&gt;;

    &lt;span style=&#34;color:#06b6ef&#34;&gt;elmt&lt;/span&gt;.&lt;span style=&#34;color:#06b6ef&#34;&gt;html&lt;/span&gt;(&lt;span style=&#34;color:#06b6ef&#34;&gt;one_line&lt;/span&gt;);
    &lt;span style=&#34;color:#06b6ef&#34;&gt;txt_width&lt;/span&gt; &lt;span style=&#34;color:#5bc4bf&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#06b6ef&#34;&gt;one_line&lt;/span&gt;.&lt;span style=&#34;color:#06b6ef&#34;&gt;width&lt;/span&gt;();

    &lt;span style=&#34;color:#815ba4&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#06b6ef&#34;&gt;txt_width&lt;/span&gt; &lt;span style=&#34;color:#5bc4bf&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#06b6ef&#34;&gt;cont_width&lt;/span&gt;){
        &lt;span style=&#34;color:#815ba4&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#06b6ef&#34;&gt;char_width&lt;/span&gt; &lt;span style=&#34;color:#5bc4bf&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#06b6ef&#34;&gt;txt_width&lt;/span&gt;&lt;span style=&#34;color:#5bc4bf&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#06b6ef&#34;&gt;nb_char&lt;/span&gt;,
        &lt;span style=&#34;color:#06b6ef&#34;&gt;ltr_spacing&lt;/span&gt; &lt;span style=&#34;color:#5bc4bf&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#06b6ef&#34;&gt;spacing&lt;/span&gt; &lt;span style=&#34;color:#5bc4bf&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#06b6ef&#34;&gt;char_width&lt;/span&gt; &lt;span style=&#34;color:#5bc4bf&#34;&gt;+&lt;/span&gt; (&lt;span style=&#34;color:#06b6ef&#34;&gt;spacing&lt;/span&gt; &lt;span style=&#34;color:#5bc4bf&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#06b6ef&#34;&gt;char_width&lt;/span&gt;)&lt;span style=&#34;color:#5bc4bf&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#06b6ef&#34;&gt;nb_char&lt;/span&gt;;

        &lt;span style=&#34;color:#06b6ef&#34;&gt;one_line&lt;/span&gt;.&lt;span style=&#34;color:#06b6ef&#34;&gt;css&lt;/span&gt;({&lt;span style=&#34;color:#48b685&#34;&gt;&amp;#39;letter-spacing&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#5bc4bf&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#06b6ef&#34;&gt;ltr_spacing&lt;/span&gt;});
    } &lt;span style=&#34;color:#815ba4&#34;&gt;else&lt;/span&gt; {
        &lt;span style=&#34;color:#06b6ef&#34;&gt;one_line&lt;/span&gt;.&lt;span style=&#34;color:#06b6ef&#34;&gt;contents&lt;/span&gt;().&lt;span style=&#34;color:#06b6ef&#34;&gt;unwrap&lt;/span&gt;();
        &lt;span style=&#34;color:#06b6ef&#34;&gt;elmt&lt;/span&gt;.&lt;span style=&#34;color:#06b6ef&#34;&gt;addClass&lt;/span&gt;(&lt;span style=&#34;color:#48b685&#34;&gt;&amp;#39;justify&amp;#39;&lt;/span&gt;);
    }
};

&lt;span style=&#34;color:#06b6ef&#34;&gt;$&lt;/span&gt;(document).&lt;span style=&#34;color:#06b6ef&#34;&gt;ready&lt;/span&gt;(&lt;span style=&#34;color:#815ba4&#34;&gt;function&lt;/span&gt; () {
    &lt;span style=&#34;color:#06b6ef&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#48b685&#34;&gt;&amp;#39;.stretch&amp;#39;&lt;/span&gt;).&lt;span style=&#34;color:#06b6ef&#34;&gt;each&lt;/span&gt;(&lt;span style=&#34;color:#815ba4&#34;&gt;function&lt;/span&gt;(){
        &lt;span style=&#34;color:#06b6ef&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#815ba4&#34;&gt;this&lt;/span&gt;).&lt;span style=&#34;color:#06b6ef&#34;&gt;strech_text&lt;/span&gt;();
    });
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然後幫各 &lt;code&gt;div&lt;/code&gt; 設定 &lt;code&gt;class=&amp;quot;stretch&amp;quot;&lt;/code&gt;，並且一定要設定 &lt;code&gt;width&lt;/code&gt; 才能算。&lt;/p&gt;
&lt;h2 id=&#34;水平向下對齊&#34;&gt;水平向下對齊&lt;/h2&gt;
&lt;p&gt;然後碰到第二個問題是水平的欄位如何向下對齊，其實後來查了一下。這個問題好像並不應該很難，只能說我觀念不夠清晰。&lt;/p&gt;
&lt;p&gt;總之解決的辦法是針對包住水平欄位的 &lt;code&gt;container&lt;/code&gt; 設定 &lt;code&gt;position: relative;&lt;/code&gt;，然後各欄位設定 &lt;code&gt;position: absolute;&lt;/code&gt;，再用 &lt;code&gt;top&lt;/code&gt;、&lt;code&gt;right&lt;/code&gt;、&lt;code&gt;bottom&lt;/code&gt;、&lt;code&gt;left&lt;/code&gt; 去調位置就可以了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;position&lt;/code&gt; 的 &lt;code&gt;absolute&lt;/code&gt; 跟 &lt;code&gt;relative&lt;/code&gt; 好難懂 R 囧&amp;gt;&lt;/p&gt;
&lt;h2 id=&#34;分隔線加粗&#34;&gt;分隔線加粗&lt;/h2&gt;
&lt;p&gt;好，這其實不算問題，只是我忘了加粗的敘述去 google 發現了一種可以相容舊 IE 的方法，藉此作個紀錄，如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;hr {
    border: none;
    height: 1px;
    /* Set the hr color */
    color: #333; /* old IE */
    background-color: #333; /* Modern Browsers */
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;縱排文字&#34;&gt;縱排文字&lt;/h2&gt;
&lt;p&gt;這本來是我認為這個 project 最難的部分，結果 google 到好幾種做法，其中一種解法我覺得超級天才！是開發商 cmonos 作的 taketori-js，還開源！&lt;/p&gt;
&lt;p&gt;先用 CSS 的 &lt;code&gt;transform&lt;/code&gt; 把整個 &lt;code&gt;block&lt;/code&gt; 轉 +90 度，然後偵測裡面的漢字分別用 &lt;code&gt;span&lt;/code&gt; 包起來轉 -90 度，再處理斷行與標點等等。這個解法真的太強，實用！&lt;/p&gt;
&lt;p&gt;Github 開源：&lt;a href=&#34;https://github.com/cmonos/TAKETORI-JS&#34;&gt;TAKETORI-JS&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;感想&#34;&gt;感想&lt;/h1&gt;
&lt;p&gt;切版真的麻煩，而且我還沒做適應手機大小的版本，不過考慮到這是舊報紙版型，沒有也很正常對吧？（其實只是懶）&lt;/p&gt;
- https://idontwannarock.github.io/tech_blog/2017/09/retina_morning_post/ - This website by Howard Wang is licensed under a Creative Common Attribution-ShareAlike 4.0 International License.</description>
        </item>
    
    
    
        <item>
        <title>1st Practice: Click Click Boom</title>
        <link>https://idontwannarock.github.io/tech_blog/2017/09/click_click_boom/</link>
        <pubDate>Fri, 15 Sep 2017 07:36:23 +0800</pubDate>
        
        <guid>https://idontwannarock.github.io/tech_blog/2017/09/click_click_boom/</guid>
        <description>Howard Tech Note https://idontwannarock.github.io/tech_blog/2017/09/click_click_boom/ -&lt;h1 id=&#34;第一個目標&#34;&gt;第一個目標&lt;/h1&gt;
&lt;p&gt;寫個簡單作品來練習 HTML 跟 CSS&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作品：Click Click Boom
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://goo.gl/vPtbzB&#34;&gt;黑白版本&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://goo.gl/CfT2Ro&#34;&gt;粉紅大理石版本&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://goo.gl/NVdhAk&#34;&gt;黑色大理石版本&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;遇到困難&#34;&gt;遇到困難&lt;/h1&gt;
&lt;h2 id=&#34;置中&#34;&gt;置中&lt;/h2&gt;
&lt;p&gt;左右置中很容易，但上下置中就麻煩了，還要隨瀏覽器視窗大小變動就更麻煩。&lt;/p&gt;
&lt;p&gt;最後在 stackoverflow 查到一種解法，就是先設定 &lt;code&gt;position: absolute;&lt;/code&gt;，然後 &lt;code&gt;top&lt;/code&gt;、&lt;code&gt;bottom&lt;/code&gt;、&lt;code&gt;left&lt;/code&gt;、&lt;code&gt;right&lt;/code&gt; 都設 &lt;code&gt;0&lt;/code&gt;，再用 &lt;code&gt;margin: 0;&lt;/code&gt; 來自動對齊。&lt;/p&gt;
&lt;h2 id=&#34;套框&#34;&gt;套框&lt;/h2&gt;
&lt;p&gt;因為想要使用 HTML+CSS 作套框而不是用畫去背圖的方式，這真的殺死很多腦筋，內部框跟文字怎麼排都無法置中，對，又是無法上下置中，用 &lt;code&gt;text-align&lt;/code&gt; 只能左右置中，&lt;code&gt;vertical-align&lt;/code&gt; 完全不理我。&lt;/p&gt;
&lt;p&gt;最後又是 stackoverflow 查到解法，要用 CSS3 的新 property，&lt;code&gt;display: flex;&lt;/code&gt; 來解，然後設定 &lt;code&gt;align-item: center;&lt;/code&gt; 跟 &lt;code&gt;justify-content: center;&lt;/code&gt; 來上下左右置中，但當然衍伸出下個問題。&lt;/p&gt;
&lt;h2 id=&#34;相容&#34;&gt;相容&lt;/h2&gt;
&lt;p&gt;瀏覽器太多種，新舊版本對 HTML5 或 CSS3 相容度又不一致，真的會搞死，實務上難道也是只能靠經驗？或出問題再來修改嗎？還是有更合理的作法？&lt;/p&gt;
&lt;p&gt;最後是上 &lt;a href=&#34;https://www.w3schools.com/&#34;&gt;w3schools&lt;/a&gt; 一項一項 property 查相容再加相容敘述 &lt;code&gt;-webkit-&lt;/code&gt; 或 &lt;code&gt;-moz-&lt;/code&gt; 來解決。&lt;/p&gt;
&lt;h2 id=&#34;ios相容&#34;&gt;iOS相容&lt;/h2&gt;
&lt;p&gt;這個真的超哭，我整個都做完了，就只有在 iOS 裝置上，按鈕按不下去！&lt;/p&gt;
&lt;p&gt;我先是想說應該是 &lt;code&gt;transform&lt;/code&gt; 可能不相容，所以一樣查了 w3schools 加上相容敘述，結果還是不行！&lt;/p&gt;
&lt;p&gt;以我的智商真的想不出來惹，最後只能跟阿混求救，大神就是大神，瞬間幫我找出答案，因為 &lt;code&gt;Pseudo class active&lt;/code&gt; 跟 iOS 不相容……&lt;/p&gt;
&lt;p&gt;當然阿混很好心的幫我查好解法，結果是要用 JavaScript 來解，這跟我只想練習 HTML+CSS 本意不符，但找了一下好像真的沒有更好的解法，所以最後還是用了這個解法。&lt;/p&gt;
&lt;h1 id=&#34;感想&#34;&gt;感想&lt;/h1&gt;
&lt;p&gt;工程師真的很辛苦，但也很爽。能親手做出成品很有成就感！後續再來想要加什麼功能會更舒壓 XD&lt;/p&gt;
- https://idontwannarock.github.io/tech_blog/2017/09/click_click_boom/ - This website by Howard Wang is licensed under a Creative Common Attribution-ShareAlike 4.0 International License.</description>
        </item>
    
    
    
        <item>
        <title>Git 及 GitHub 基礎認識</title>
        <link>https://idontwannarock.github.io/tech_blog/2017/09/git_and_github_basic/</link>
        <pubDate>Thu, 14 Sep 2017 07:13:01 +0800</pubDate>
        
        <guid>https://idontwannarock.github.io/tech_blog/2017/09/git_and_github_basic/</guid>
        <description>Howard Tech Note https://idontwannarock.github.io/tech_blog/2017/09/git_and_github_basic/ -&lt;blockquote&gt;
&lt;p&gt;這篇文章是初學的時候撰寫的，其中一些觀念並不正確，步驟也可能因為更新或觀念問題而不適用或者多餘，此篇文章僅為留做紀錄&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;學習目標&#34;&gt;學習目標&lt;/h1&gt;
&lt;p&gt;因為 Git 指令一直出問題，今天就來搞清楚 Git 跟 GitHub 的各種問題吧！&lt;/p&gt;
&lt;h1 id=&#34;學習內容&#34;&gt;學習內容&lt;/h1&gt;
&lt;h2 id=&#34;git-跟-github-是什麼&#34;&gt;Git 跟 GitHub 是什麼&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://zh.wikipedia.org/zh-tw/Git&#34;&gt;Git Wiki&lt;/a&gt; 則說 Git 是一種分散式版本控制軟體。&lt;/p&gt;
&lt;p&gt;詳細的說明可以參考 &lt;a href=&#34;https://goo.gl/YzDiHy&#34;&gt;Git Documentation&lt;/a&gt;，有中文版，不過只有前幾個主題有翻譯。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://zh.wikipedia.org/zh-tw/GitHub&#34;&gt;GitHub Wiki&lt;/a&gt;上說，GitHub 是一個透過 Git 進行版本控制的軟體原始碼代管服務，簡單來說就是可以放各種 Code 的地方，但其實也可以放一些文件跟圖片等，好像沒有空間限制，只是有單一檔案大小 1GB 的軟性限制。&lt;/p&gt;
&lt;h3 id=&#34;git-觀念&#34;&gt;Git 觀念&lt;/h3&gt;
&lt;p&gt;這裡我們來先解釋一下 Git版本控制的觀念，我覺得 &lt;a href=&#34;https://hellolynn.hpd.io/&#34;&gt;寫點科普&lt;/a&gt; 寫的這兩篇寫得非常平易近人而且完整，推薦給大家！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hellolynn.hpd.io/2017/01/18/git%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80%E6%95%99%E5%AD%B8-part-1/&#34;&gt;GIT新手入門教學 – PART 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hellolynn.hpd.io/2017/01/18/git%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80%E6%95%99%E5%AD%B8-part-2/&#34;&gt;GIT新手入門教學 – PART 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我的理解是譬如有一份作業需要大家一起作，大家先把原始的作業文件 (origin) 放在小組長那邊 (remote)，然後各自 copy 一份回家 (local) 寫自己要做的部分，然後拿回去給小組長，由小組長決定誰的作業寫得好，可以成為新一代的原始作業文件 (master)；或某人提交的作業寫得不完整，但寫過地那部分很好，就跟原始作業合併 (merge) 成一份新一代的原始作業文件。大家也可以 copy 別人寫的作業回去修改 (pull)，反正最後由小組長決定哪個版本的作業寫得最好，就可以成為新一代的原始作業文件這樣。&lt;/p&gt;
&lt;p&gt;而大家 copy 回家寫的作業也有三個階段，假如我在電腦上打作業，分成三個資料夾，一個是 Working Directory、一個是 Staging Area、一個是 Repository。&lt;/p&gt;
&lt;p&gt;第一個資料夾就是放 copy 回家的作業，然後我可能亂打了一些、新增修改了一些，但交出去很丟臉的部分；第二個資料夾就是放某些我覺得可以的部分作業，先暫時存起來；最後一個資料夾就是放我確定要提交的作業版本。&lt;/p&gt;
&lt;p&gt;所以我寫作業的流程就是這樣：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先 copy 一份 (pull) 原始作業文件 (origin) 回家 (local)&lt;/li&gt;
&lt;li&gt;在 Working Directory 資料夾寫作業，找各種資料，新增刪減等等&lt;/li&gt;
&lt;li&gt;將比較滿意的部分暫存 (add) 到 Staging Area 資料夾&lt;/li&gt;
&lt;li&gt;當 Staging Area 資料夾有比較完整的作業版本後，再儲存 (commit) 到 Repository 資料夾中&lt;/li&gt;
&lt;li&gt;最後將 Repository 資料夾中要繳交的作業交出去 (push) 給小組長 (remote)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;建立-github-帳號&#34;&gt;建立 GitHub 帳號&lt;/h2&gt;
&lt;p&gt;接下來說明實際操作流程。&lt;/p&gt;
&lt;p&gt;建議大家先到 &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; 建立自己的帳號，基本功能都是免費的，只有當你要發展私人專案，想要將 repositories 設定為 private 的時候會要收費的樣子。(更正：GitHub 已於 2019/1/7 開放免費無限量 private repo，可參見 &lt;a href=&#34;https://github.blog/2019-01-07-new-year-new-github/&#34;&gt;這篇聲明&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;GitHub 帳號申請流程跟一般申請免費帳號一樣，就到首頁按下綠色的 Sign up for GitHub 按鈕之後，一路照指示填上資料跟選擇選項就可以了。然後 GitHub 會寄一封認證 email，請點 email 裡面的 Verify email address 那個連結來確認你的 email address。&lt;/p&gt;
&lt;p&gt;接下來先作 Git 的環境設定，這樣之後就可以都在 Git Bash 操作各種指令，不用在 Git Bash 跟 PowerShell 視窗換來換去。如果是 Mac 用戶，則都可以用 MacOS 隨附的「終端機 Terminal」軟體，或安裝下載相同功能的 iTerm2 來操作 Git 指令。&lt;/p&gt;
&lt;h2 id=&#34;git-環境設定&#34;&gt;Git 環境設定&lt;/h2&gt;
&lt;p&gt;先說明我一般使用的是 Windows 10，兼有一台 Macbook Pro。但我是超級初心者，所以 Linux 我完全不會，抱歉。&lt;/p&gt;
&lt;p&gt;先安裝 Git，這步驟很簡單。Windows 就到 &lt;a href=&#34;https://git-scm.com/&#34;&gt;Git官網&lt;/a&gt; 下載就好，而且一鍵安裝，這邊不需要多講；若是 MacOS 用戶，請利用 Homebrew 安裝 Git，安裝 Homebrew 跟 Git 的操作過程可以參考我的 &lt;a href=&#34;https://idontwannarock.github.io/tech_blog/2017/11/mbp_setup_2017/#安裝Homebrew&#34;&gt;這篇文章&lt;/a&gt;，然後可以直接跳到下一個主題：設定 Git 識別資料。&lt;/p&gt;
&lt;p&gt;然後應該會在 Windows 按鈕（狀態列左邊 Windows 圖示的那顆）裡面的程式集多一個 Git 的資料夾，裡面有三個程式：Git Bash、Git CMD 跟 Git GUI。最常用的大概是 Git Bash，原則上都在這裡下各種 Git 指令；Git CMD 我不知道拿來幹嘛；Git GUI 是圖形介面，但設計的不太好用。&lt;/p&gt;
&lt;p&gt;如果大家沒有要學太多 Git 指令，其實可以直接下載 &lt;a href=&#34;https://desktop.github.com/&#34;&gt;GitHub Desktop&lt;/a&gt; 或 &lt;a href=&#34;https://www.sourcetreeapp.com/&#34;&gt;Sourcetree&lt;/a&gt;，圖形化介面真的太好用，也不用記一堆 Git 指令。但今天沒有要教大家怎麼用 GitHub Desktop 跟 Sourcetree，或其實大家看完後面 Git 概念教學就大概會懂使用流程。&lt;/p&gt;
&lt;h2 id=&#34;設定-git-識別資料&#34;&gt;設定 Git 識別資料&lt;/h2&gt;
&lt;p&gt;安裝完 Git 之後，首先應該設定使用者名稱跟 email，應該要跟你之前申請 GitHub 帳號時的 username 及 email 相同。&lt;/p&gt;
&lt;p&gt;以下步驟使用到的指令，基本上在 Windows 跟 MacOS 上是一樣的，只有一些地方會有所不懂，我會特別說明。&lt;/p&gt;
&lt;p&gt;請打開 Git Bash，可能在桌面就有，或者開始按鈕裡的程式集 Git 資料夾裡面有，MacOS 請打開終端機，然後依序輸入以下兩行 Git 指令：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git config --global user.name &amp;quot;GitHub username&amp;quot;  
git config --global user.email &amp;quot;GitHub email&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接著你可以輸入以下指令來檢查資訊是否有輸入正確。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat ~/.gitconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;建立-ssh-key-並增加到-github&#34;&gt;建立 SSH Key 並增加到 GitHub&lt;/h2&gt;
&lt;p&gt;SSH Key 就像一個鑰匙，每一台電腦、筆電都會生成一個獨一無二的 SSH Key，然後我們上自己的 GitHub 去登記這個鑰匙，這樣以後我們用電腦或筆電上傳東西到 GitHub 時，電腦或筆電就可以用這個鑰匙，以及前面設定的 Git 識別資料去開啟我們的 GitHub 帳號並把東西上傳上去。&lt;/p&gt;
&lt;p&gt;就跟我們要去銀行存錢，要提供身分證 (Git 識別資料) 跟密碼 (SSH Key) 給銀行一樣。&lt;/p&gt;
&lt;p&gt;要生成一個 SSH Key，一樣在之前打開的 Git Bash 或終端機輸入以下指令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ssh-keygen -t rsa -C &lt;span style=&#34;color:#48b685&#34;&gt;&amp;#34;GitHub帳號的 email&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;會出現以下這行，設定儲存 SSH Key 的位置，使用預設的就好，所以直接按 Enter。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Enter file in which to save the key (/Users/使用者名稱/.ssh/id_rsa): [Press enter]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果你以前有設定過 SSH Key，它會出現這行 &lt;code&gt;/Users/you/.ssh/id_rsa already exists. Overwrite (y/n)?&lt;/code&gt;，建議直接打 &lt;code&gt;yes&lt;/code&gt; 或 &lt;code&gt;y&lt;/code&gt; 來重新操作以確保正確。接著會出現以下這行來問你是不是要為 SSH Key 設定一個密碼，要就輸入，並且會需要再輸入一次作確認，不要就直接 Enter。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Enter passphrase (empty for no passphrase): [Type a passphrase]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然後他就會顯示一大段文字，表示 SSH Key 產生成功，接著我們把 SSH Key 加到 ssh-agent 來免除每次要連接登入 GitHub 都還要再輸入一次 SSH Key 的密碼。請先輸入以下指令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;eval &lt;span style=&#34;color:#815ba4&#34;&gt;$(&lt;/span&gt;ssh-agent -s&lt;span style=&#34;color:#815ba4&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接著會出現這行 &lt;code&gt;Agent pid 8492&lt;/code&gt;，數字每個人都不一樣，這沒關係。接著輸入以下這行，可能會需要重新輸入一次 SSH Key 的密碼：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ssh-add ~/.ssh/id_rsa
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果出現 &lt;code&gt;Identity added&lt;/code&gt; 這行字就表示成功了。&lt;/p&gt;
&lt;p&gt;再來需要把 SSH Key 加入到自己的 GitHub 帳號。&lt;/p&gt;
&lt;p&gt;首先在同樣的 Git Bash 畫面輸入以下這行，將 SSH Key 複製到剪貼簿裡面，就類似平常按 &lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;C&lt;/code&gt; 那樣複製。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;clip &amp;lt; ~/.ssh/id_rsa.pub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果是 Mac 使用者，請到 &lt;code&gt;/使用者名稱/.ssh/&lt;/code&gt; 這個資料夾，若找不到請調整隱藏檔的設定，然後用文字編輯打開 &lt;code&gt;id_rsa.pub&lt;/code&gt; 這個檔案，講整個檔案內容複製起來。&lt;/p&gt;
&lt;p&gt;然後用瀏覽器進入到你自己的 GitHub 帳號，點最右上角的三角形，選 Settings，然後選左邊列表的 SSH and GPG keys，點綠色的 New SSH key，然後在 Key 下面的欄位直接 &lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;V&lt;/code&gt; 或 &lt;code&gt;command&lt;/code&gt;+&lt;code&gt;V&lt;/code&gt; 把 SSH Key 貼上，在 Title 欄位輸入你之後能辨識這個 SSH Key 是代表哪一台電腦或筆電的名稱，最後點綠色的 Add SSH key 按鈕就添加完成啦！&lt;/p&gt;
&lt;p&gt;然後作個小測試，在同樣的 Git Bash 或終端機輸入 &lt;code&gt;ssh -T git@github.com&lt;/code&gt;，可能會看到類似以下的一段文字：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;The authenticity of host &#39;github.com (207.97.227.239)&#39; can&#39;t be established.  
RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.  
Are you sure you want to continue connecting (yes/no)?
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;fingerprint 後面那一串長長的字每個人都不一樣，這也沒關係。輸入 &lt;code&gt;yes&lt;/code&gt; 後應該會跳出以下訊息：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Hi &amp;lt;username&amp;gt;! You&#39;ve successfully authenticated, but GitHub does not provide shell access.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這段文字中的 &lt;code&gt;&amp;lt;username&amp;gt;&lt;/code&gt; 是你 GitHub 設定的 username，這樣就代表成功啦！&lt;/p&gt;
&lt;h2 id=&#34;建立-project-並上傳到-github&#34;&gt;建立 Project 並上傳到 GitHub&lt;/h2&gt;
&lt;p&gt;接下來利用建立一個新專案來介紹一些 Git 的基本指令。&lt;/p&gt;
&lt;p&gt;首先先到桌面或隨便一個資料夾，建立一個 test 資料夾，然後在資料夾裡面隨便新增一個文字檔案，&lt;del&gt;公堂之上假設一下&lt;/del&gt; 假設就叫 &lt;code&gt;first-post.md&lt;/code&gt; (md 檔案是 Markdown 語言的檔案，內容可以被 GitHub 直接讀取並且辨識)，接著請在 test 資料夾內的空白處點右鍵，選 Git Bash Here，就會打開 Git Bash，並預設路徑就是 test 資料夾。&lt;/p&gt;
&lt;p&gt;如果是 MacOS 使用者，也請建立一個資料夾，並同樣新增一個 &lt;code&gt;first-post.md&lt;/code&gt; 文字檔案，請對該資料夾按一下右鍵或 &lt;code&gt;control&lt;/code&gt; 鍵出現選單，再按著 &lt;code&gt;option&lt;/code&gt; 鍵，會出現 &lt;code&gt;拷貝「資料夾名稱」作為路徑名稱&lt;/code&gt; 的選項，選擇之後就會複製資料夾路徑。然後開啟終端機輸入 &lt;code&gt;cd&lt;/code&gt;，然後空一格貼上剛才複製的路徑，以移動操作位置到該資料夾，很重要，請一定要做。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cd &amp;lt;資料夾路徑&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接著就要開始操作 Git 指令，如果覺得我講的不清楚，可以回去看寫點科普那兩篇文章的觀念跟操作。&lt;/p&gt;
&lt;p&gt;這邊還是記錄一下我的作法。請大家，不論是 Windows 或 MacOS 使用者，都輸入以下命令：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git init
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;init 就是 initialize，這代表將這個資料夾變成一個 Repository，Git 就會開始記錄這個 Repo 裡面的所有改動跟版本。然後以下指令會新增全部 test 資料夾裡面的檔案到 staging 的狀態。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git add .
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;staging 好了之後，再用下面這個指令來 commit 到本機的 Repo，這些 commit 到 Repo 的東西才能被 push 到 GitHub上。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git commit -m &amp;quot;說明操作了什麼的一段文字&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這過程中隨時都可以用 &lt;code&gt;git status&lt;/code&gt; 指令來查看你處於哪個階段。&lt;/p&gt;
&lt;p&gt;最後要 push 到 GitHub 之前，請先到 GitHub 上建立一個名稱為 test 的 Repository，建立好之後，請點中間 SSH 那個按鈕，後面會生成該 Repo 的 SSH url，把那個網址複製下來。若建立 Repo 的時候有勾 README 選項，則按右邊綠色 Clone or download 按鈕，點藍色 Use SSH 連結切換到 Clone with SSH，再複製 url。&lt;/p&gt;
&lt;p&gt;最後一樣到剛才的 Git Bash 或終端機裡面輸入以下命令，我們要將 commit push 到 GitHub 上。過程中可能會要輸入 SSH 密碼。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git remote add origin git@github.com:GitHub使用者名稱/test.git  
git push origin master
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第一句是要為這個專案加上 GitHub 上面 Repo 的位置，後面要 push，Git 才知道要 push 到哪裡。第二句話就是把已經 commit 的版本 push 到 GitHub 對應 Repo 的 master 分支上。master 也就是主要版本。&lt;/p&gt;
&lt;p&gt;這樣就完成建立一個新 Project 並上傳到 GitHub 啦！&lt;/p&gt;
&lt;h2 id=&#34;push-修改過的-project-到-github&#34;&gt;push 修改過的 Project 到 GitHub&lt;/h2&gt;
&lt;p&gt;最後，如果之後要修改剛建立的那個 Project 資料夾裡的任何內容，想要再把變更 push 到 GitHub 上，請在 test 資料夾打開 Git Bash，或終端機照前面說明移動位置到該資料夾下，輸入以下指令：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git add .  
git commit -m &amp;quot;說明文字&amp;quot;  
git push origin master
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;就很簡單的搞定啦！&lt;/p&gt;
&lt;p&gt;至於 branch 那種東西，等我搞懂再來新增吧。今天先這樣~~&lt;/p&gt;
- https://idontwannarock.github.io/tech_blog/2017/09/git_and_github_basic/ - This website by Howard Wang is licensed under a Creative Common Attribution-ShareAlike 4.0 International License.</description>
        </item>
    
    
    
        <item>
        <title>實作簡單登入會員系統 (1)</title>
        <link>https://idontwannarock.github.io/tech_blog/2017/09/login_signup_function_1/</link>
        <pubDate>Mon, 11 Sep 2017 07:11:59 +0800</pubDate>
        
        <guid>https://idontwannarock.github.io/tech_blog/2017/09/login_signup_function_1/</guid>
        <description>Howard Tech Note https://idontwannarock.github.io/tech_blog/2017/09/login_signup_function_1/ -&lt;blockquote&gt;
&lt;p&gt;這篇文章是初學的時候撰寫的，其中一些觀念並不正確，步驟也可能因為更新或觀念問題而不適用或者多餘，此篇文章僅為留做紀錄&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;學習目標&#34;&gt;學習目標&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;實作簡單會員系統，有加入會員、登入、登出&lt;/li&gt;
&lt;li&gt;cookie&lt;/li&gt;
&lt;li&gt;防範 SQL Injection+XSS&lt;/li&gt;
&lt;li&gt;hash 密碼&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;學習內容&#34;&gt;學習內容&lt;/h1&gt;
&lt;h2 id=&#34;構思&#34;&gt;構思&lt;/h2&gt;
&lt;p&gt;坦白說，我有自學過一點點前後端的 Udemy 網路課程，所以前端的部分，簡單的 HTML, CSS, Javascript, jQuery 我還可以，大概是不會寫也可以谷哥看別人怎麼寫的程度。後端也是學過簡單的 PHP 跟 MySQL 這樣。所以後面的說明很可能會省略很多基礎，而只記錄我不太會或不太熟的部分。&lt;/p&gt;
&lt;p&gt;關於會員系統，Udemy 課程的老師其實有教過這個部分，但當時似懂非懂，幾乎就是 copy 老師的程式碼，糊里糊塗就寫出來，PHP 跟 MySQL 的部分一片模糊，所以先來嘗試自己重新寫一遍，不行再來找找看網路教學。&lt;/p&gt;
&lt;p&gt;要寫登入登出的功能，我第一個想到就是要用 HTML 的 &lt;code&gt;form&lt;/code&gt; 先做三個 &lt;code&gt;input&lt;/code&gt; 跟一個 &lt;code&gt;button&lt;/code&gt;，若要串接資料庫，應該還要再作一個 &lt;code&gt;button&lt;/code&gt; 切換 Sign Up 跟 Login 畫面來作區別。預計應該要用 jQuery 控制切換 Sign Up/Login 的功能。&lt;/p&gt;
&lt;p&gt;然後後端邏輯應該就是先作 Sign Up/Login 資料的驗證部分，用 &lt;code&gt;ajax&lt;/code&gt; 傳輸資料到後端，檢查輸入的 &lt;code&gt;username&lt;/code&gt;、&lt;code&gt;email&lt;/code&gt; 跟 &lt;code&gt;password&lt;/code&gt; 是否空白、格式是否正確以及是否重複，用 &lt;code&gt;echo&lt;/code&gt; 輸出錯誤提示訊息給前端。&lt;/p&gt;
&lt;p&gt;接著作 Sign Up 部分，接著剛剛驗證完資料正確後，檢查資料庫有無重複資料後，再把 &lt;code&gt;username&lt;/code&gt;、&lt;code&gt;email&lt;/code&gt; 跟 &lt;code&gt;password&lt;/code&gt; 存進資料庫。&lt;/p&gt;
&lt;p&gt;最後再作 Login 部分，先用使用者輸入的 &lt;code&gt;username&lt;/code&gt; 比對資料庫有無紀錄，再比對 &lt;code&gt;password&lt;/code&gt;，最後輸出 Login 成功訊息。這邊會感覺會需要了解 &lt;code&gt;$_SESSION&lt;/code&gt; 跟 &lt;code&gt;$_COOKIE&lt;/code&gt; 怎麼運作，因為要幫 Sign Up/Login 成功的使用者加上 &lt;code&gt;$_SESSION&lt;/code&gt; 或 &lt;code&gt;$_COOKIE&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;接著作 SQL Injection 及 XSS 攻擊的防範。最後再將使用者 Sign Up 時輸入的 &lt;code&gt;password&lt;/code&gt; 作 hash 處理。&lt;/p&gt;
&lt;p&gt;另外以下是以只架站在自己 Windows 電腦的 XAMPP 上為前提，XAMPP 架站簡單教學可以看我之前寫的這篇筆記：&lt;a href=&#34;https://idontwannarock.github.io/tech_blog/2017/09/xampp_setup_and_php_practice/&#34;&gt;XAMPP安裝設定及簡單 PHP練習&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;還有就是如果想要讓自己寫完的作品可以讓別人看到，可能要自己先想辦法查做法，我自己都還搞不太清楚。（攤手）&lt;/p&gt;
&lt;h2 id=&#34;版面設定&#34;&gt;版面設定&lt;/h2&gt;
&lt;p&gt;所以就從寫個 &lt;code&gt;form&lt;/code&gt;、三個 &lt;code&gt;input&lt;/code&gt; 跟兩個按鈕開始好了。我猶豫了一下要不要用 Bootstrap，還是用好了，畢竟練習的重點在後端，畫面就直接套用現成的版就好。&lt;/p&gt;
&lt;p&gt;所以直接就貼上 Bootstrap 4 的 &lt;a href=&#34;https://v4-alpha.getbootstrap.com/getting-started/introduction/#starter-template&#34;&gt;Starter template&lt;/a&gt;，因為後面要用 &lt;code&gt;ajax&lt;/code&gt;，所以 jQeury 的版本記得從 slim 換成最起碼 min 的版本。然後直接用 Bootstrap 的 &lt;a href=&#34;https://v4-alpha.getbootstrap.com/components/forms/#form-controls&#34;&gt;Forms&lt;/a&gt; 作模板。&lt;/p&gt;
&lt;h2 id=&#34;切換功能&#34;&gt;切換功能&lt;/h2&gt;
&lt;p&gt;接下來就是複習 jQuery 語法的時候，因為這邊用到的功能不難所以不多講。大概方向就是在 &lt;code&gt;click&lt;/code&gt; 動作上建立一個判斷式，判斷目前是 Login 轉 Sign Up 要做什麼事；Sign Up 轉 Login 要做什麼事。這部分的 &lt;code&gt;script&lt;/code&gt; 我是寫在 &lt;code&gt;body&lt;/code&gt; 的最後。&lt;/p&gt;
&lt;p&gt;切換畫面有個小技巧記錄一下，作一個隱藏的 &lt;code&gt;input&lt;/code&gt;，然後設定 &lt;code&gt;value=&amp;quot;1&amp;quot;&lt;/code&gt;，這樣在用 jQuery 判斷的時候用這個值作判斷條件會比較簡單。不然只是純粹要切換畫面修改 CSS，應該用 &lt;code&gt;.toggleClass()&lt;/code&gt; 就可以了。&lt;/p&gt;
&lt;p&gt;前端的部分大概就這樣，接下來開始練習後端部分。&lt;/p&gt;
&lt;h2 id=&#34;設置資料庫&#34;&gt;設置資料庫&lt;/h2&gt;
&lt;p&gt;先去 XAMPP 的 Control Panel 把 MySQL 打開，然後去瀏覽器輸入 &lt;code&gt;http://localhost:8080&lt;/code&gt; 來進去 Apache Friend 頁面，點選右上角的 phpMyAdmin 進入資料庫管理的頁面。直接左邊點選 New 來建立一個新的資料庫，我設定資料庫名字為 &lt;code&gt;user&lt;/code&gt;，新 table 名稱 &lt;code&gt;userData&lt;/code&gt;，四欄分別是 &lt;code&gt;id&lt;/code&gt;、&lt;code&gt;username&lt;/code&gt;、&lt;code&gt;email&lt;/code&gt; 跟 &lt;code&gt;password&lt;/code&gt;，並設定 &lt;code&gt;id&lt;/code&gt; 欄位為 Primary Key 以及 Auto Increment。&lt;/p&gt;
&lt;p&gt;設定 Primary Key 的目的是確保此欄位的每一筆資料都是獨一無二的；Auto Increment 則是讓資料庫自動遞增設定 &lt;code&gt;id&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;連接資料庫&#34;&gt;連接資料庫&lt;/h2&gt;
&lt;p&gt;接下來就要用 PHP 的 mysqli 函數庫語法嘗試連接資料庫，我是用以下方法，並用 PHP 的 &lt;code&gt;print_r&lt;/code&gt; 來顯示連結問題。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#ef6155&#34;&gt;$link&lt;/span&gt; &lt;span style=&#34;color:#5bc4bf&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#06b6ef&#34;&gt;mysqli_connect&lt;/span&gt;(&lt;span style=&#34;color:#48b685&#34;&gt;&amp;#34;localhost:3306&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#48b685&#34;&gt;&amp;#34;root&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#48b685&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#48b685&#34;&gt;&amp;#34;user&amp;#34;&lt;/span&gt;);  
&lt;span style=&#34;color:#815ba4&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#06b6ef&#34;&gt;mysqli_connect_errno&lt;/span&gt;()) {  
    &lt;span style=&#34;color:#06b6ef&#34;&gt;print_r&lt;/span&gt;(&lt;span style=&#34;color:#06b6ef&#34;&gt;mysqli_connect_error&lt;/span&gt;());  
    &lt;span style=&#34;color:#815ba4&#34;&gt;exit&lt;/span&gt;();  
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;記錄一下 &lt;a href=&#34;http://php.net/manual/en/function.mysqli-connect.php&#34;&gt;&lt;code&gt;mysqli_connect&lt;/code&gt;&lt;/a&gt; 的語法是 &lt;code&gt;(host, username, password, dbname)&lt;/code&gt;。這邊因為是本機，所以 &lt;code&gt;host&lt;/code&gt; 就是 &lt;code&gt;localhost:3306&lt;/code&gt;，3306 是 XAMPP 預設給 MySQL 的 port，如果你有調整，這邊就要相應的更改；本機上的 &lt;code&gt;username&lt;/code&gt; 就是 &lt;code&gt;root&lt;/code&gt;，不確定可以到 phpMyAdmin 的首頁看；&lt;code&gt;password&lt;/code&gt; 預設應該就是沒有，如果有設定（我還真不知道怎麼設定）這邊就要改；最後 &lt;code&gt;dbname&lt;/code&gt; 是剛剛設定的 &lt;code&gt;user&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mysqli&lt;/code&gt; 是 PHP 的 MySQL 函數庫增強版，功能更強，安全性更好；所以之前的 &lt;code&gt;mysql&lt;/code&gt; 已經漸漸淘汰不用。&lt;/p&gt;
&lt;p&gt;接著則是用 &lt;code&gt;mysqli_connect_errno()&lt;/code&gt; 來判斷連接是否有錯誤，若有錯誤則用 &lt;code&gt;print_r&lt;/code&gt; 來顯示 &lt;code&gt;mysqli_connect_error()&lt;/code&gt; 的錯誤訊息。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://php.net/manual/en/mysqli.connect-errno.php&#34;&gt;&lt;code&gt;mysqli_connect_errno()&lt;/code&gt;&lt;/a&gt; 是回傳最近一次連接的錯誤「代碼」；&lt;a href=&#34;http://php.net/manual/en/mysqli.connect-error.php&#34;&gt;&lt;code&gt;mysqli_connect_error()&lt;/code&gt;&lt;/a&gt; 則是回傳最近一次連接的錯誤「訊息」。&lt;/p&gt;
&lt;p&gt;最後則用 &lt;code&gt;exit()&lt;/code&gt; 來停止繼續執行 script（官方文件側面證明 PHP 是 script？XD）。括號裡面可以填上停止執行同時要顯示的訊息，若裡面填上 integer（0-254 之間），則會被用來當錯誤代碼而且不會顯示出來。功能跟 &lt;code&gt;die()&lt;/code&gt; 是一樣的。&lt;/p&gt;
&lt;h2 id=&#34;設計結構&#34;&gt;設計結構&lt;/h2&gt;
&lt;p&gt;再來先講一下設計的檔案結構。&lt;/p&gt;
&lt;p&gt;因為我在 Udemy 上的課最後的作業是把常用的 function 單獨存成一個 &lt;code&gt;function.php&lt;/code&gt; 的檔案，然後把會跟 &lt;code&gt;index.php&lt;/code&gt; 直接互動的部分放在 &lt;code&gt;action.php&lt;/code&gt; 並且在開頭就 &lt;code&gt;include(&amp;quot;function.php&amp;quot;);&lt;/code&gt; 這樣來操作。&lt;/p&gt;
&lt;p&gt;據說這叫 MVC 啦，我也不是很懂，但覺得這樣分開蠻清楚的，就這樣作吧~&lt;/p&gt;
&lt;h2 id=&#34;ajax-傳資料&#34;&gt;ajax 傳資料&lt;/h2&gt;
&lt;p&gt;接著要寫 &lt;code&gt;ajax&lt;/code&gt; 傳資料的功能。&lt;/p&gt;
&lt;p&gt;在前面切換 Login/Signup 按鈕的後面，我是先寫這樣來測試 &lt;code&gt;ajax&lt;/code&gt; 功能是否正常傳送我要傳送的資料：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-jquery&#34; data-lang=&#34;jquery&#34;&gt;$.ajax({  
    type: &amp;quot;POST&amp;quot;,  
    url: &amp;quot;action.php?action=loginSignup&amp;quot;,  
    data: 
        &amp;quot;username=&amp;quot; + $(&amp;quot;#username&amp;quot;).val()
        + &amp;quot;&amp;amp;email=&amp;quot; + $(&amp;quot;#email&amp;quot;).val()
        + &amp;quot;&amp;amp;password=&amp;quot; + $(&amp;quot;#password&amp;quot;).val()
        + &amp;quot;&amp;amp;loginActive=&amp;quot; + $(&amp;quot;#loginActive&amp;quot;).val(),  
    success: function() {  
        alert(&amp;quot;username=&amp;quot; + $(&amp;quot;#username&amp;quot;).val()
        + &amp;quot;&amp;amp;email=&amp;quot; + $(&amp;quot;#email&amp;quot;).val()
        + &amp;quot;&amp;amp;password=&amp;quot; + $(&amp;quot;#password&amp;quot;).val()
        + &amp;quot;&amp;amp;loginActive=&amp;quot; + $(&amp;quot;#loginActive&amp;quot;).val());  
    }  
})
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這邊其實是設定用 &lt;code&gt;POST&lt;/code&gt; 傳送 &lt;code&gt;data&lt;/code&gt; 內的訊息，但也同時用 &lt;code&gt;GET&lt;/code&gt; 的方式傳送一個 &lt;code&gt;action=loginSignup&lt;/code&gt; 的訊息來說明要作 Login/Signup 的動作，讓後端執行 &lt;code&gt;action.php&lt;/code&gt; 的時候，知道要做哪個動作，我在 &lt;code&gt;action.php&lt;/code&gt; 內也會相應的寫上判斷 &lt;code&gt;$_GET[&#39;action&#39;] == &amp;quot;loginSignup&amp;quot;&lt;/code&gt; 的條件。這算是為未來可以把這個功能套用到別的地方使用的功能標記方法。&lt;/p&gt;
&lt;p&gt;順便記錄一下 &lt;code&gt;GET&lt;/code&gt; 跟 &lt;code&gt;POST&lt;/code&gt; 的差別。&lt;code&gt;GET&lt;/code&gt; 會把要傳送到 server 的資訊以明碼的方式放在 URL 網址後面，長度有限制；&lt;code&gt;POST&lt;/code&gt; 則是將資料放在 http request 裡面，是隱藏的，相對沒有長度限制。這兩種都是 http 協定中定義的跟伺服器互動的方式。我覺得這篇講得蠻簡單明白：&lt;a href=&#34;http://happycoder.org/2017/07/02/golang101-tutorial-web-basic/&#34;&gt;Go Web 程式設計入門教學：Web 基礎&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果按了 Submit 按鈕有跳出 &lt;code&gt;alert&lt;/code&gt; 顯示 &lt;code&gt;data&lt;/code&gt; 的內容，就表示作對了。&lt;/p&gt;
&lt;h2 id=&#34;login-驗證功能&#34;&gt;Login 驗證功能&lt;/h2&gt;
&lt;p&gt;這時候先到 &lt;code&gt;index.php&lt;/code&gt; 表格上方增加一個隱藏的 &lt;code&gt;div&lt;/code&gt;，&lt;code&gt;id&lt;/code&gt; 設為 &lt;code&gt;loginAlert&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;接著到 &lt;code&gt;ajax&lt;/code&gt; 的 &lt;code&gt;success&lt;/code&gt; 改成以下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#06b6ef&#34;&gt;success&lt;/span&gt;&lt;span style=&#34;color:#5bc4bf&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#815ba4&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#06b6ef&#34;&gt;result&lt;/span&gt;) {  
    &lt;span style=&#34;color:#815ba4&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#06b6ef&#34;&gt;result&lt;/span&gt;) {
        &lt;span style=&#34;color:#06b6ef&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#48b685&#34;&gt;&amp;#34;#loginAlert&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#06b6ef&#34;&gt;html&lt;/span&gt;(&lt;span style=&#34;color:#06b6ef&#34;&gt;result&lt;/span&gt;).&lt;span style=&#34;color:#06b6ef&#34;&gt;show&lt;/span&gt;();
    }  
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;用意是先把所有 &lt;code&gt;action.php&lt;/code&gt; 回傳的東西，傳到 &lt;code&gt;id&lt;/code&gt; 為 &lt;code&gt;loginAlert&lt;/code&gt; 的這個 &lt;code&gt;div&lt;/code&gt; 並顯示出來。&lt;/p&gt;
&lt;p&gt;接著到 &lt;code&gt;action.php&lt;/code&gt; 用各種判斷式判斷 &lt;code&gt;username&lt;/code&gt;、&lt;code&gt;email&lt;/code&gt; 跟 &lt;code&gt;password&lt;/code&gt; 是否空白或符合格式，若不符合，就儲存一段顯示錯誤的話進另外設定的變數 &lt;code&gt;$error&lt;/code&gt;，到最後判斷 &lt;code&gt;$error&lt;/code&gt; 是否空白，若否則 &lt;code&gt;echo $error;&lt;/code&gt; 並 &lt;code&gt;exit();&lt;/code&gt;，也就是把 &lt;code&gt;$error&lt;/code&gt; 裡面的錯誤訊息傳回 &lt;code&gt;ajax&lt;/code&gt; 之後，停止繼續執行 &lt;code&gt;action.php&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;這邊需要一些判斷式觀念，記錄一下基礎：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;if&lt;/code&gt; 是判斷 &lt;code&gt;()&lt;/code&gt; 內的條件是否為真後，執行 &lt;code&gt;{}&lt;/code&gt; 內的內容。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;if...else&lt;/code&gt; 是判斷 &lt;code&gt;()&lt;/code&gt; 內的條件是否為真後，執行 &lt;code&gt;if&lt;/code&gt; 接著的 &lt;code&gt;{}&lt;/code&gt; 內容；不為真則執行 &lt;code&gt;else&lt;/code&gt; 接著的 &lt;code&gt;{}&lt;/code&gt; 內容。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;if...else if&lt;/code&gt; 是先判斷 &lt;code&gt;if&lt;/code&gt; 後 &lt;code&gt;()&lt;/code&gt; 的條件，為真則執行接著的 &lt;code&gt;{}&lt;/code&gt; 內容；不為真，則再開始判斷 &lt;code&gt;else if&lt;/code&gt; 接著的 &lt;code&gt;()&lt;/code&gt; 內條件，為真則執行接著的 &lt;code&gt;{}&lt;/code&gt; 內容。最後還可以再接 &lt;code&gt;else&lt;/code&gt;，作用為當 &lt;code&gt;if&lt;/code&gt; 跟 &lt;code&gt;else if&lt;/code&gt; 判斷式 &lt;strong&gt;皆&lt;/strong&gt; 不為真的時候，執行接著的 &lt;code&gt;{}&lt;/code&gt; 內容，此為 optional。&lt;/li&gt;
&lt;li&gt;需要多條件判斷有兩種方案，一是在 &lt;code&gt;if&lt;/code&gt; 判斷式中用 &lt;code&gt;and&lt;/code&gt;、&lt;code&gt;or&lt;/code&gt; 這種聯立條件的方式，但這種是 &lt;strong&gt;同時&lt;/strong&gt; 判斷多條件；若需要 &lt;strong&gt;依序&lt;/strong&gt; 判斷多條件，則採用 &lt;code&gt;if...else if&lt;/code&gt; 的方式。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;但想像是美好的，現實是骨感的，一執行立刻就碰到問題：alert 區塊一閃而逝，好像畫面重新刷新，所以 alert 區塊又重新回到隱藏的狀態。這邊很顯然是 Submit 按鈕的問題，剛好作個筆記，要記得把 Submit 按鈕的 &lt;code&gt;type&lt;/code&gt; 改成 &lt;code&gt;button&lt;/code&gt;，若是維持原來的 &lt;code&gt;submit&lt;/code&gt;，每次按下去就會刷新畫面，&lt;code&gt;ajax&lt;/code&gt; 帶動的效果就都跑掉了。&lt;/p&gt;
&lt;p&gt;對了，還要記得去 XAMPP Control Panel 把 MySQL 也打開，不然也會悲劇 XD&lt;/p&gt;
&lt;h2 id=&#34;php-語法跟函數庫&#34;&gt;PHP 語法跟函數庫&lt;/h2&gt;
&lt;p&gt;接著要先學習一些 PHP 跟 SQL 的寫法，語法可以到 &lt;a href=&#34;https://www.w3schools.com/default.asp&#34;&gt;w3schools&lt;/a&gt; 或 &lt;a href=&#34;http://php.net/manual/en/index.php&#34;&gt;PHP 官網&lt;/a&gt; 查詢。先記錄幾個用到的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3schools.com/sql/default.asp&#34;&gt;SQL&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3schools.com/sql/sql_where.asp&#34;&gt;&lt;code&gt;SELECT 範圍 FROM table 名稱 WHERE 判斷式&lt;/code&gt;&lt;/a&gt;：這個功能是按照&lt;code&gt;判斷式&lt;/code&gt;回傳指定 table 裡面的資料。&lt;code&gt;範圍&lt;/code&gt;就是要選取的欄位，全選就填上 &lt;code&gt;*&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3schools.com/sql/sql_insert.asp&#34;&gt;&lt;code&gt;INSERT INTO table名稱 (&lt;/code&gt;欄位一&lt;code&gt;, &lt;/code&gt;欄位二&lt;code&gt;, ...) VALUES (&#39;欄位一資料&#39;, &#39;欄位二資料&#39;, ...)&lt;/code&gt;&lt;/a&gt;：在指定 table 裡面增加資料。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3schools.com/sql/sql_update.asp&#34;&gt;&lt;code&gt;UPDATE table名稱 SET 範圍 WHERE 判斷式&lt;/code&gt;&lt;/a&gt;：依照&lt;code&gt;判斷式&lt;/code&gt;更新指定 table 裡面指定欄位的指定資料。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LIMIT&lt;/code&gt;：是 MySQL 特有的子句，通常接在 &lt;code&gt;SELECT&lt;/code&gt; 句子的最後面，用來限制回傳的資料筆數。功能類似 &lt;code&gt;TOP&lt;/code&gt; 跟 &lt;code&gt;ROWNUM&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;PHP 各種 &lt;a href=&#34;http://php.net/manual/en/reserved.variables.php&#34;&gt;預設變數&lt;/a&gt;、&lt;a href=&#34;http://php.net/manual/en/ref.var.php&#34;&gt;變數控制函數&lt;/a&gt;、&lt;a href=&#34;http://php.net/manual/en/book.mysqli.php&#34;&gt;&lt;code&gt;mysqli&lt;/code&gt; 函式庫&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://php.net/manual/en/mysqli.query.php&#34;&gt;&lt;code&gt;mysqli_query($link, $query)&lt;/code&gt;&lt;/a&gt;：對資料庫執行一次動作。&lt;code&gt;$link&lt;/code&gt; 通常是要事先用 &lt;code&gt;mysqli_connect&lt;/code&gt; 設定好連結的資料庫；&lt;code&gt;$query&lt;/code&gt; 通常代表用 SQL 指令設定好要執行的動作。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://php.net/manual/en/mysqli-result.num-rows.php&#34;&gt;&lt;code&gt;mysqli_num_rows&lt;/code&gt;&lt;/a&gt;：讓資料庫回傳查詢到的資料筆數。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://php.net/manual/en/mysqli-result.fetch-assoc.php&#34;&gt;&lt;code&gt;mysqli_fetch_assoc($result)&lt;/code&gt;&lt;/a&gt;：獲取某指定資料同列（同 Primary Key）的所有資料，&lt;code&gt;$result&lt;/code&gt; 代表要參照的資料。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://php.net/manual/en/mysqli.insert-id.php&#34;&gt;&lt;code&gt;mysqli_insert_id($link)&lt;/code&gt;&lt;/a&gt;：取得前一次對資料庫執行動作（通常是 &lt;code&gt;INSERT&lt;/code&gt;）而自動產生的 &lt;code&gt;id&lt;/code&gt;，&lt;code&gt;id&lt;/code&gt; 欄位須具備 Auto Increment 屬性。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我其實沒有正規的拿一本 PHP 或 SQL 的書來念，基本上都是上前面提到的 &lt;a href=&#34;https://www.w3schools.com/default.asp&#34;&gt;w3schools&lt;/a&gt; 跟 &lt;a href=&#34;http://php.net/manual/en/index.php&#34;&gt;PHP 官網&lt;/a&gt; 這兩個網站查各種功能怎麼用，所以也許觀念不見得非常正確。&lt;/p&gt;
&lt;p&gt;另外有關於 mysqli 函數庫的部分，他支援兩種表達方法：object-oriented 跟 procedural。我這邊都是用 procedural。&lt;/p&gt;
&lt;h2 id=&#34;sign-up-功能&#34;&gt;Sign Up 功能&lt;/h2&gt;
&lt;p&gt;再來準備寫 Sign Up 加入會員的功能，這邊就要牽扯到把會員資料記錄進資料庫的部分。記得要把這些功能寫在 &lt;code&gt;action.php&lt;/code&gt; 的 &lt;code&gt;echo $error; exit();&lt;/code&gt;這個部分的後面，否則會變成前面判斷輸入資料有問題還繼續執行寫入資料的問題。&lt;/p&gt;
&lt;p&gt;首先要加入會員，都要先判斷剛填好的 &lt;code&gt;username&lt;/code&gt; 跟 &lt;code&gt;email&lt;/code&gt; 是否有跟資料庫內的重複。我是用 &lt;code&gt;mysqli_num_rows&lt;/code&gt; 來作判斷式，大於 0 就表示有資料這樣。然後用 &lt;code&gt;INSERT INTO&lt;/code&gt; 來新增資料到資料庫。&lt;/p&gt;
&lt;h2 id=&#34;login-功能---cookie--session&#34;&gt;Login 功能 -&amp;gt; cookie | session&lt;/h2&gt;
&lt;p&gt;然後登入會員是用 &lt;code&gt;mysqli_fetch_assoc()&lt;/code&gt; 來抓比對到的 &lt;code&gt;username&lt;/code&gt; 同組資料，再跟 &lt;code&gt;POST&lt;/code&gt; 裡的 &lt;code&gt;password&lt;/code&gt; 比對。&lt;/p&gt;
&lt;p&gt;接下來就是要研究 session 跟 cookie 的差別以及用法。我查到這篇 &lt;a href=&#34;http://blog.webgolds.com/view/353&#34;&gt;[簡明] COOKIE 與 SESSION 的基本原理&lt;/a&gt; 寫得蠻清楚的。&lt;/p&gt;
&lt;p&gt;我最後選擇用 cookie，因為感覺比較像是目前普遍的做法，加入會員後不用每次進入網站都要重新登入，但設定每次登入只維持登入狀態一個月。&lt;/p&gt;
&lt;p&gt;這裡同樣列出用到的 PHP 語法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3schools.com/php/php_cookies.asp&#34;&gt;&lt;code&gt;setcookie(&#39;變數名稱&#39;, &#39;變數值&#39;, &#39;保存時間&#39;)&lt;/code&gt;&lt;/a&gt;：建立 cookie，保存時間是以秒為單位；如果要強制消滅 cookie，就把保存時間設定為負數&lt;/li&gt;
&lt;li&gt;&lt;code&gt;time()&lt;/code&gt;：目前時間。這裡是用來結合 &lt;code&gt;setcookie&lt;/code&gt; 的保存時間使用&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我的作法是結合前面的判斷式，在判斷出可以加入會員以及可以登入那邊加上 &lt;code&gt;setcookie&lt;/code&gt;，並原則上設定 30 天 (&lt;code&gt;time()+60*60*24*30&lt;/code&gt;，並 &lt;code&gt;echo &amp;quot;1&amp;quot;;&lt;/code&gt;) 來回傳一個 &lt;code&gt;1&lt;/code&gt; 跟 &lt;code&gt;ajax&lt;/code&gt; 表達目前是已經登入的狀態。&lt;/p&gt;
&lt;p&gt;然後回到 &lt;code&gt;index.php&lt;/code&gt; 的 &lt;code&gt;ajax&lt;/code&gt; 那邊，將原來長這樣的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#06b6ef&#34;&gt;success&lt;/span&gt;&lt;span style=&#34;color:#5bc4bf&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#815ba4&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#06b6ef&#34;&gt;result&lt;/span&gt;) {  
    &lt;span style=&#34;color:#815ba4&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#06b6ef&#34;&gt;result&lt;/span&gt;) {
        &lt;span style=&#34;color:#06b6ef&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#48b685&#34;&gt;&amp;#34;#loginAlert&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#06b6ef&#34;&gt;html&lt;/span&gt;(&lt;span style=&#34;color:#06b6ef&#34;&gt;result&lt;/span&gt;).&lt;span style=&#34;color:#06b6ef&#34;&gt;show&lt;/span&gt;();
    }  
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;改成這樣：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#06b6ef&#34;&gt;success&lt;/span&gt;&lt;span style=&#34;color:#5bc4bf&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#815ba4&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#06b6ef&#34;&gt;result&lt;/span&gt;) {  
    &lt;span style=&#34;color:#815ba4&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#06b6ef&#34;&gt;result&lt;/span&gt;) {
        window.&lt;span style=&#34;color:#06b6ef&#34;&gt;location&lt;/span&gt;.&lt;span style=&#34;color:#06b6ef&#34;&gt;assign&lt;/span&gt;(&lt;span style=&#34;color:#48b685&#34;&gt;&amp;#34;http://localhost:8080/login-signup/&amp;#34;&lt;/span&gt;);
    } &lt;span style=&#34;color:#815ba4&#34;&gt;else&lt;/span&gt; {
        &lt;span style=&#34;color:#06b6ef&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#48b685&#34;&gt;&amp;#34;#loginAlert&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#06b6ef&#34;&gt;html&lt;/span&gt;(&lt;span style=&#34;color:#06b6ef&#34;&gt;result&lt;/span&gt;).&lt;span style=&#34;color:#06b6ef&#34;&gt;show&lt;/span&gt;();
    }  
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這裡的 &lt;a href=&#34;https://www.w3schools.com/jsref/met_loc_assign.asp&#34;&gt;&lt;code&gt;location.assign&lt;/code&gt;&lt;/a&gt; 是讓首頁重跑一遍，回到原始狀態，但已經建立好的 cookie 不會消失，所以還是登入的狀態。所以後面的網址要填上最初始首頁的完整網址。這樣做可以把 GET 放在網址列後面的資訊消除。&lt;/p&gt;
&lt;h2 id=&#34;登入狀態表示&#34;&gt;登入狀態表示&lt;/h2&gt;
&lt;p&gt;接著要回到 &lt;code&gt;index.php&lt;/code&gt; 的表格那邊作一些調整。讓 client 端在載入網頁的時候先判斷有無 cookie 存在，若有就顯示 &amp;ldquo;You have successfully logged in!&amp;quot;，若無則顯示原本的表格。若你有另外作 Logout 按鈕，作法類似。&lt;/p&gt;
&lt;p&gt;我這邊還有參考 w3schools 用 &lt;a href=&#34;https://www.w3schools.com/js/js_cookies.asp&#34;&gt;Javascript 設定跟尋找 cookie 的方法&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;作出來的作品可以參考這裡：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://idontwannarock-com.stackstaging.com/project/login-signup/&#34;&gt;作品網站 Sign Up Login Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/idontwannarock/Tiny-Projects-and-Functions/tree/master/login-signup&#34;&gt;我放在 Github 的原始碼&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;當然，為了放在託管 server 跟資料庫給大家直接試驗網頁，實際路徑跟資料庫等等會跟上面敘述的有差別。&lt;/p&gt;
&lt;h2 id=&#34;sql-injection-及-xss-簡單防範&#34;&gt;SQL Injection 及 XSS 簡單防範&lt;/h2&gt;
&lt;p&gt;我在網路上參考了這兩個網站來理解 SQL Injection 跟 XSS。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://pcrookie.com/?p=1950&#34;&gt;你知道什麼是「SQL Injection」(SQL 攻擊)嗎？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.hkitblog.com/?p=23318&#34;&gt;甚麼是 XSS？簡介黑客常用攻擊技倆&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;就我的粗淺的了解，SQL Injection 跟 XSS 都是 client 端的攻擊手法，最常見的攻擊方法都是透過一個網頁中的輸入欄位（在我們這個作品當中就是各個 &lt;code&gt;input&lt;/code&gt; 位置），來植入一些惡意的代碼，讓後來的瀏覽者或使用者碰到一些惡意的狀況、資料被偷取、被植入木馬等等。&lt;/p&gt;
&lt;p&gt;而同樣就我理解到的簡單防範方法，就是先處理 &lt;code&gt;input&lt;/code&gt; 傳過來的資料，轉換到我們需要的資料型態，來避免一些特殊符號如 &lt;code&gt;&amp;gt;/&amp;lt;^&amp;amp;$#@&lt;/code&gt; 等等。&lt;/p&gt;
&lt;p&gt;我這邊用到的是 PHP mysqli 函式庫的 &lt;code&gt;mysqli_real_escape_string($link, $data)&lt;/code&gt;，要注意的是這個函式必須填上代表連線到資料庫的 &lt;code&gt;$link&lt;/code&gt;，&lt;code&gt;$data&lt;/code&gt; 則是要轉換成字串 (string) 的資料。&lt;code&gt;mysqli_real_escape_string&lt;/code&gt; 這個函式會將定義的特殊符號作轉換來避免一些 SQL Injection 跟 XSS 的狀況。我是將所有會要跟資料庫作互動的 &lt;code&gt;$_POST&lt;/code&gt; 都作處理。&lt;/p&gt;
&lt;p&gt;請注意這個並不是一個完善的防範方法，只是作一個簡單的防範。&lt;/p&gt;
&lt;h2 id=&#34;儲存密碼---hash-及-salting&#34;&gt;儲存密碼 - hash 及 salting&lt;/h2&gt;
&lt;p&gt;基本上如同胡立大大所說：「一個正常的網站是不會知道使用者的密碼是什麼的。」&lt;/p&gt;
&lt;p&gt;就我的理解，一般來說如同這樣的會員功能，網站在接收到使用者傳輸的密碼的同時，就會進行密碼加密。&lt;/p&gt;
&lt;p&gt;而早期通常會以 hash 的方式，例如 &lt;code&gt;md5&lt;/code&gt; 加密，然後就存進系統。基本上就是把密碼通過 md5 設定的某種轉換模式，轉成一長串字串，一個字串只會對應一個密碼，而這種加密方式很難反向破解；所以最簡單的破解手法是建立常見的密碼 - 字串轉換表來對應，所以才會常常看到各種網站在加入會員的時候讓大家設定字母與數字混雜，而且不能是常用的密碼，來避免被駭客找到對應的字串作破解。&lt;/p&gt;
&lt;p&gt;但這種方式比較大的問題是使用者常常記不得自己設定的密碼，所以後來又產生一種 salting 的作法，也就是在 hash 以前，在密碼的前面或後面加入一些基於特定規則或亂數產生的字串，用來增加密碼長度，或利用亂數來增加破解難度。&lt;/p&gt;
&lt;p&gt;我是採取 &lt;a href=&#34;http://php.net/manual/en/function.password-hash.php&#34;&gt;&lt;code&gt;password_hash&lt;/code&gt;&lt;/a&gt; 的作法，這個 PHP 的函數本身就有包括 salting，所以直接寫這樣來 hash：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#06b6ef&#34;&gt;password_hash&lt;/span&gt;(&lt;span style=&#34;color:#ef6155&#34;&gt;$_POST&lt;/span&gt;[&lt;span style=&#34;color:#48b685&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;], &lt;span style=&#34;color:#06b6ef&#34;&gt;PASSWORD_DEFAULT&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但有件事要記得，用 &lt;a href=&#34;http://php.net/manual/en/function.password-hash.php&#34;&gt;&lt;code&gt;password_hash&lt;/code&gt;&lt;/a&gt; 函數來 hash 的話，Login 時就要用 &lt;a href=&#34;http://php.net/manual/en/function.password-verify.php&#34;&gt;&lt;code&gt;password_verify&lt;/code&gt;&lt;/a&gt; 函數來作判斷式來比對 &lt;code&gt;password&lt;/code&gt;。艾租以~&lt;/p&gt;
&lt;h1 id=&#34;感想&#34;&gt;感想&lt;/h1&gt;
&lt;p&gt;恭喜我作完這個簡單的功能，結果就是用網路查了一堆功能跟說明，倒是沒有直接搜尋 PHP 登入怎麼做，不知道這樣算不算自己作？XD&lt;/p&gt;
&lt;p&gt;就先這樣吧，之後再來加上忘記密碼重設的部分~&lt;/p&gt;
&lt;p&gt;再次附上作品網站跟 Github 原始碼網址：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://idontwannarock-com.stackstaging.com/project/login-signup/&#34;&gt;作品網站 Sign Up Login Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/idontwannarock/Tiny-Projects-and-Functions/tree/master/login-signup&#34;&gt;我放在 Github 的原始碼&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
- https://idontwannarock.github.io/tech_blog/2017/09/login_signup_function_1/ - This website by Howard Wang is licensed under a Creative Common Attribution-ShareAlike 4.0 International License.</description>
        </item>
    
    
  </channel>
</rss> 