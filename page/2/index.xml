<?xml-stylesheet href="/rss.xsl" type="text/xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Howard Tech Note</title>
    <link>https://blog.idontwannarock.me/</link>
    <description>Recent content on Howard Tech Note</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This website by Howard Wang is licensed under a Creative Common Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Tue, 20 Jun 2023 10:51:39 +0800</lastBuildDate>
    
        <atom:link href="https://blog.idontwannarock.me/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>ProtoBuf FlatBuf Benchmark in Java</title>
        <link>https://blog.idontwannarock.me/2022/01/protobuf_flatbuf_java/</link>
        <pubDate>Tue, 04 Jan 2022 15:36:17 +0800</pubDate>
        
        <guid>https://blog.idontwannarock.me/2022/01/protobuf_flatbuf_java/</guid>
        <description>Howard Tech Note https://blog.idontwannarock.me/2022/01/protobuf_flatbuf_java/ -&lt;p&gt;繼續之前研究的 gRPC，除了 HTTP/2 以外，另外一個支柱就是 Protocol Buffers (ProtoBuf)&lt;/p&gt;
&lt;p&gt;ProtoBuf 是一種二進制的序列化資料格式，透過介面描述語言 (Interface description language, IDL) 來描述資料結構，再利用工具依據 IDL 產生程式碼，這些程式碼可以用來生成或解析代表這些資料結構的位元組流&lt;/p&gt;
&lt;p&gt;ProtoBuf 是 Google 原本用來內部使用的資料格式，但現在已開源，加上被 gRPC 原生支援，現在已經是重要的序列化 library&lt;/p&gt;
&lt;p&gt;Google 官方支援了許多語言的工具用來轉換 IDL 為代碼，但其中很不巧的不包含我目前工作上避不開的 Lua 或 TypeScript，所以我又另外找到同樣也是 Google 推出的 FlatBuffers (FlatBuf)，同樣也是二進制的序列化 library，但官方支援的語系就很多了，正好也包括 Lua 及 TypeScript&lt;/p&gt;
&lt;p&gt;雖然 Google 官方已經在努力讓 FlatBuf 也被 gRPC 支援，但目前官方文件上還只有 C++ 的版本，並沒有我日常使用的語言&lt;/p&gt;
&lt;p&gt;不過沒關係，我工作上的專案目前並不是一定要使用 gRPC，我完全可以利用其他傳輸協定例如 HTTP, WebSocket 或甚至 Socket 來傳輸資料，我只需要一種能夠讓各語系通用的資料格式，並且盡可能有官方長期支援即可&lt;/p&gt;
&lt;h2 id=&#34;benchmark-方法&#34;&gt;Benchmark 方法&lt;/h2&gt;
&lt;p&gt;雖然剛好 FlatBuf 都符合我的需求，但 FlatBuf 使用的人似乎還不多，雖然官方文件上說 Facebook 已經將 FlatBuf 使用在 Android App 上，不過總是沒有自己親身試驗來的準，也一併試驗開發的困難度&lt;/p&gt;
&lt;p&gt;所以乾脆來做 ProtoBuf 跟 FlatBuf 的 benchmark 來比較一下各自序列化的速度以及記憶體大致用量&lt;/p&gt;
&lt;p&gt;因為要順帶試驗開發的困難度，所以只要是各自有支援的資料格式，我都盡量加入測試的資料結構當中，以下為我用來建立測資的 Java 物件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@Value
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@Builder
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Passenger&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Integer id&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    String firstName&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    String lastName&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Boolean isMale&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    List&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;Belonging&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; belongings&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Ticket ticket&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@Value
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@Builder
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Belonging&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Integer id&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    BelongingType type&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Float weightInKilogram&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;enum&lt;/span&gt; BelongingType &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        SUITCASE&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; BACKPACK
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@Value
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@Builder
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Ticket&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Integer id&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Transportation transportation&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Currency currency&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    BigDecimal price&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Location departure&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    OffsetDateTime departureTime&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Location arrival&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    OffsetDateTime arrivalTime&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;enum&lt;/span&gt; Transportation &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        AIRLINE&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; TRAIN
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;enum&lt;/span&gt; Currency &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        USD&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; NTD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;enum&lt;/span&gt; Location &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TPE&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; TSA&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; NRT&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; LAX
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我也盡量將 Java 常用的資料型別加入其中來試驗各序列化 Library 的支援度&lt;/p&gt;
&lt;p&gt;以下是 ProtoBuf 對應的 .proto 檔&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-proto&#34; data-lang=&#34;proto&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;syntax &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;proto3&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; protobuf;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;option&lt;/span&gt; java_multiple_files &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;option&lt;/span&gt; java_package &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;org.example.serialization.benchmark.protobuf&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;option&lt;/span&gt; java_generate_equals_and_hash &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;option&lt;/span&gt; java_string_check_utf8 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;option&lt;/span&gt; java_outer_classname &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;PassengerProto&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;ProtoPassenger&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd&#34;&gt;int32&lt;/span&gt; id &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; firstName &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; lastName &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd&#34;&gt;bool&lt;/span&gt; isMale &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ProtoTicket ticket &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;repeated&lt;/span&gt; ProtoBelonging belongings &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;6&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;ProtoBelonging&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd&#34;&gt;int32&lt;/span&gt; id &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  BelongingType type &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd&#34;&gt;float&lt;/span&gt; weightInKilogram &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;enum&lt;/span&gt; BelongingType {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    SUITCASE &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    BACKPACK &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;ProtoTicket&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd&#34;&gt;int32&lt;/span&gt; id &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Transportation transportation &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Currency currency &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; price &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Location departure &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; departureTime &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;6&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Location arrival &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;7&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; arrivalTime &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;8&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;enum&lt;/span&gt; Transportation {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    AIRLINE &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    TRAIN &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;enum&lt;/span&gt; Currency {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    USD &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    NTD &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;enum&lt;/span&gt; Location {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    TPE &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    TSA &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    NRT &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    LAX &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接著是 FlatBuf 對應的 fbs 檔&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-fbs&#34; data-lang=&#34;fbs&#34;&gt;namespace org.example.serialization.benchmark.flatbuf;

enum FlatBelongingType : ubyte {SUITCASE, BACKPACK}

table FlatBelonging {
    id:int;
    type:FlatBelongingType;
    weight_in_kilogram:float;
}

enum FlatTransportation : ubyte {AIRLINE, TRAIN}

enum FlatCurrency : ubyte {USD, NTD}

enum FlatLocation : ubyte {TPE, TSA, NRT, LAX}

table FlatTicket {
    id:int;
    transportation:FlatTransportation;
    currency:FlatCurrency;
    price:string;
    departure:FlatLocation;
    departure_time:string;
    arrival:FlatLocation;
    arrival_time:string;
}

table FlatPassenger {
    id:int;
    first_name:string;
    last_name:string;
    is_male:bool;
    ticket:FlatTicket;
    belongings:[FlatBelonging];
}

root_type FlatPassenger;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;測試的過程大致上為將自動產生的 Passenger 物件 map 到各自的物件中並進行序列化 (serialization)，接著再進行反序列化 (deserialization) 並 map 回 Passenger 物件，最後會進行 assert 以確保反序列化回來的物件與一開始產生的一致&lt;/p&gt;
&lt;p&gt;之所以 mapping 階段也要計入，一是這樣貼近真實世界應用，二來 FlatBuf 並沒有單獨「反序列化」的過程，所以將 mapping 階段都一併計入比較公平&lt;/p&gt;
&lt;p&gt;然後就是將序列化反序列化的回合執行一百萬次，以避免有 warm up 問題&lt;/p&gt;
&lt;h2 id=&#34;benchmark-結果&#34;&gt;Benchmark 結果&lt;/h2&gt;
&lt;p&gt;直接上測試結果&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dcvgho2zc/image/upload/v1641285735/Tech%20Blog/gson-protobuf-flatbuf-benchmark.png&#34; alt=&#34;Gson, ProtoBuf, and FlatBuf Benchmark&#34;&gt;&lt;/p&gt;
&lt;p&gt;從圖中可以得知其實 ProtoBuf 與 FlatBuf 在速度上其實差不多，頂多 ProtoBuf 在序列化上稍微快一點點，相對 FlatBuf 在反序列化上也稍微快一點點，但整體上相差不是很大&lt;/p&gt;
&lt;p&gt;不過在最大記憶體用量上，FlatBuf 完勝 ProtoBuf，以 FlatBuf 的特性而言這當然也是可預期的結果&lt;/p&gt;
&lt;p&gt;至於 Gson 嘛&amp;hellip;全都墊底也是可預期的結果，畢竟 JSON 強項本來就不在效能上，可讀性、跨平台、廣泛支援度等才是它的主戰場&lt;/p&gt;
&lt;h2 id=&#34;結論&#34;&gt;結論&lt;/h2&gt;
&lt;p&gt;其實在撰寫的過程可以感受到 Gson 的程式碼撰寫絕對是最容易的，即使是 mapper 也幾乎不用額外多寫太多程式碼，portable 方面絕對是最強的，被廣泛使用還是有道理的&lt;/p&gt;
&lt;p&gt;而 ProtoBuf 也是相對成熟的 library，雖然也不需要寫太多額外的程式碼，但它支援的資料型別就少很多了，像是不支援日期相關型別或 &lt;code&gt;BigDecimal&lt;/code&gt; 這種&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;當然，JSON 其實原生支援的型別也不多，但成熟的 library 讓你不需要考慮資料型別問題，幾乎 Java 所有原生型別全都能夠順利序列化再反序列化；而 ProtoBuf 轉換的程式碼是由工具自動產生，所以有很多型別是不可能會自動產生的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;至於 FlatBuf 則是三者當中最不成熟的 library，沒辦法，這個專案 2014 才開始，不像 ProtoBuf 是從 2001 開始&lt;/p&gt;
&lt;p&gt;FlatBuf 在序列化上是相對最麻煩的一個，因為它其實在設定物件各 properties 的過程中就一併開始轉換二進制格式的機制；反序列化後的使用上倒是與其他 library 相同，可以直接從從物件取得 property，但受限於它原生支援的資料型別比 ProtoBuf 更少，所以不做 mapping 的話就更難使用一點&lt;/p&gt;
&lt;p&gt;最後，附上測試專案的程式碼以供參考&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/idontwannarock/serialization-lib-benchmark&#34;&gt;Serialization Libraries Benchmark&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;參考連結&#34;&gt;參考連結&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/protocol-buffers/&#34;&gt;Protocol Buffers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Protocol_Buffers&#34;&gt;Protocol Buffers Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://google.github.io/flatbuffers/index.html&#34;&gt;FlatBuffers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/FlatBuffers&#34;&gt;FlatBuffers Wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
- https://blog.idontwannarock.me/2022/01/protobuf_flatbuf_java/ - This website by Howard Wang is licensed under a Creative Common Attribution-ShareAlike 4.0 International License.</description>
        </item>
    
    
    
        <item>
        <title>gRPC 概念</title>
        <link>https://blog.idontwannarock.me/2021/12/grpc/</link>
        <pubDate>Mon, 27 Dec 2021 09:44:31 +0800</pubDate>
        
        <guid>https://blog.idontwannarock.me/2021/12/grpc/</guid>
        <description>Howard Tech Note https://blog.idontwannarock.me/2021/12/grpc/ -&lt;p&gt;在前幾篇大略了解 HTTP/2 的概念後，就可以來了解 gRPC 的運作概念了&lt;/p&gt;
&lt;p&gt;HTTP/2 系列:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.idontwannarock.me/2021/12/http2/&#34;&gt;HTTP/2 系列 - HTTP/2 概念&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.idontwannarock.me/2021/12/http_server_push/&#34;&gt;HTTP/2 系列 - HTTP Server Push 技術&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;概念&#34;&gt;概念&lt;/h2&gt;
&lt;p&gt;gRPC 原本是 Google 內部的 RPC 系統，後來開源後，近年成為很熱門的 RPC 系統，採用 HTTP/2 做傳輸，ProtoBuf 作為介面描述語言 (interface description language)，提供身分驗證 (authentication)、雙向串流 (bidirectional streaming)、流量控制 (flow control)、阻塞或非阻塞綁定 (blocking or nonblocking binding)、取消 (cancellation) 及逾時 (timeouts) 等特性&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;RPC Remote Procedure Call 遠端程序呼叫指服務之間互相溝通就如同呼叫本地程式一般，不須關注呼叫互動的細節。例如以前的 CORBA, Java RMI 等&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;使用-grpc-api&#34;&gt;使用 gRPC API&lt;/h3&gt;
&lt;p&gt;主要是透過 .proto 檔定義 service 結構，再透過 ProtoBuf compiler 的幫助產生各語言的 client/server 端代碼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;client 端會有一個本地物件 stub 實作 service 中相同的方法，讓 client 端可以直接呼叫該本地物件的方法，gRPC 會處理發出 request 以及從 server 端的 ProtoBuf response&lt;/li&gt;
&lt;li&gt;server 端會真正實作 service 中宣告的方法，並運行 gRPC server 來處理 client 端的呼叫，gRPC infra 會將 request 解碼，執行 service 方法，再將 service response 編碼&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dcvgho2zc/image/upload/c_scale,h_304/v1640339739/Tech%20Blog/grpc-call.png&#34; alt=&#34;gRPC 呼叫關係&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Image from &lt;a href=&#34;https://grpc.io/docs/what-is-grpc/introduction/&#34;&gt;gRPC Official Documentation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;同步-vs-非同步&#34;&gt;同步 vs 非同步&lt;/h3&gt;
&lt;p&gt;同步 RPC 呼叫會阻塞直到獲得回應，這是最接近 RPC 希望模仿的 procedure call 的抽象，但從另一方面來說，網路天生就是非同步的，而且在很多場景下觸發不會阻塞當下 thread 的 RPC 是很有用的&lt;/p&gt;
&lt;p&gt;gRPC 在大部分語言的 API 都有同步及非同步的版本&lt;/p&gt;
&lt;h3 id=&#34;四種類型的-service&#34;&gt;四種類型的 Service&lt;/h3&gt;
&lt;p&gt;在 gRPC 中可以定義四種類型的 service&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;就是定義在 ProtoBuf 的 .proto 檔&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Unary RPC: 如同一般 function call 一樣，client 端發出一個 request，server 收到後回覆一個 response&lt;/li&gt;
&lt;li&gt;Server streaming RPC: client 端發出一個 request 並取得一個 stream 來讀取 server 回傳的一系列 messages&lt;/li&gt;
&lt;li&gt;Client streaming RPC: client 端發出一系列 messages 給 server 並等待 server 完整讀取後回覆一個 response&lt;/li&gt;
&lt;li&gt;Bidirectional streaming RPC: 在 client 端呼叫 service 方法建立好跟 server 之間的 connection 後，兩端都可以以任意順序、時間發送一系列 messages 給對方&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dcvgho2zc/image/upload/v1640589690/Tech%20Blog/grpc-calls.png&#34; alt=&#34;gRPC Service Types&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Image from &lt;a href=&#34;https://blog.knoldus.com/unary-streaming-via-grpc/&#34;&gt;Knoldus&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;rpc-生命週期&#34;&gt;RPC 生命週期&lt;/h3&gt;
&lt;h4 id=&#34;unary-rpc&#34;&gt;Unary RPC&lt;/h4&gt;
&lt;p&gt;這是最簡單的類型，client 發出單一的 request，然後 server 端回覆單一的 response&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;client 呼叫 stub 方法，client 會立即發出 client 端的 metatdata 通知 server 端該方法被觸發&lt;/li&gt;
&lt;li&gt;server 端可以立即回覆自己的初始 metadata (metadata 必須在任何 response 之前傳送) 或等待 client 端的 request message。實際上哪個先發生要看應用&lt;/li&gt;
&lt;li&gt;一旦 server 端獲得 request message 後就開始執行該做的邏輯以產生 response，然後 response 就會連同 status details (status code 及可能的 status message) 及可能的隨附的 metadata 回覆給 client&lt;/li&gt;
&lt;li&gt;如果 response status 為 OK，client 就會取得 response，在 client 端結束整個呼叫&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;這就跟以往使用最基本的 request/response 相同&lt;/p&gt;
&lt;h4 id=&#34;server-streaming-rpc&#34;&gt;Server streaming RPC&lt;/h4&gt;
&lt;p&gt;基本跟 Unary RPC 類似，除了 server 端會對應 client 的 request 回覆一系列的 messages，在發送完所有 messages 後，server 端才會回覆 status details 及可選的 metadata 給 client&lt;/p&gt;
&lt;p&gt;這是在 server 端收到 request 之後，回覆的 response 內容為一個 streaming，分成多次傳輸內容，只不過傳輸的時間點可由 server 自定&lt;/p&gt;
&lt;h4 id=&#34;client-streaming-rpc&#34;&gt;Client streaming RPC&lt;/h4&gt;
&lt;p&gt;基本也跟 Unary RPC 類似，除了 client 端會發送一系列的 messages，然後 server 端回覆單一的 response，通常會在 server 端接收到 client 端所有的 messages 之後，但並非必要&lt;/p&gt;
&lt;p&gt;這個是在 client 發出的 request 內容開啟一個 streaming 來分次傳輸內容，只不過傳輸的時間點可以由 client 自行決定&lt;/p&gt;
&lt;h4 id=&#34;bidirectional-streaming-rpc&#34;&gt;Bidirectional streaming RPC&lt;/h4&gt;
&lt;p&gt;與 Unary RPC 前兩個步驟相同，只是 client 端及 server 端都可以隨時以任意順序發送一系列的 message 給對方&lt;/p&gt;
&lt;p&gt;其實在 gRPC 中最讓人困惑的就是這個類型了，它的確可以達到類似 WebSocket 那樣兩端可以任意時間順序的發送 message 到另一端，不過 gRPC 畢竟是基於 HTTP/2 的技術，在我們前面已經討論過 HTTP/2 的特性，加上 bidirectional streaming RPC 生命週期順序已經可以看出，它實際上還是由 client 端發起 request，只是 request 的內容是一個 streaming，然後可以任意時間多次傳送 data 來達成類似發出多次 request 的效果；而 server 端其實也是對應 client 發出的 request 然後回覆時內容同樣是一個 streaming，然後任意時間多次傳送 data 來達成類似多次 response 的效果&lt;/p&gt;
&lt;p&gt;所以從整體來看，其實就是開啟了一個 request/response 都是 streaming 的雙向資料流，所以還是一組 request-response，而沒有真正實現 server push&lt;/p&gt;
&lt;p&gt;不過從效果來說或從程式設計使用上來說，其實已經幾乎可以把它當成 server push 在使用了，畢竟實際上除了一開始要由 client 呼叫方法之外，後續不管是 client 還是 server 都可以在任意時間傳送 message，主要的限制就是 request 或 response 的內容必須先規定在 .proto 檔之中，所以如果有多種 request/response 內容，要馬就是要合成一個很大包的 message 內容，不然就是要分開多個 service&lt;/p&gt;
&lt;h2 id=&#34;結語&#34;&gt;結語&lt;/h2&gt;
&lt;p&gt;gRPC 至今已經是很泛用的通訊框架，它有著跨平台、跨語言的優勢，又不像單純使用 HTTP 協定那樣需要處理訊息轉換各語言資料結構等麻煩，並且效能相對於 JSON, XML 等格式更是優秀，算是蠻值得學習&lt;/p&gt;
&lt;p&gt;不過我們同時也可以看得出 gRPC 不是真正 bidirectional unsolicited communication，在 client/server 兩端都要額外增加對 gRPC 支援，雖然 HTTP/2 有 header 壓縮但畢竟不像 WebSocket 一般訊息是沒有 header，等等其實可以得知目前 gRPC 應該是不會取代 WebSocket，大家還是要依照應用場景來選擇技術&lt;/p&gt;
&lt;p&gt;嗄？你說 gRPC 的另外一個支柱 Protocol Buffer (ProtoBuf)？&lt;/p&gt;
&lt;p&gt;這個我暫時沒打算要理解它的演算法細節，大概知道他是一種跨平台、跨語言的「可擴展的序列化資料結構」，就是類似 XML 或是 JSON 那樣的資料結構，只是設計的體積更小、傳輸更快，暫時理解到這邊就夠了&lt;/p&gt;
&lt;h2 id=&#34;參考連結&#34;&gt;參考連結&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/GRPC&#34;&gt;gRPC Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.grpc.io/docs/what-is-grpc/core-concepts/&#34;&gt;Core concepts, architecture and lifecycle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://thenewstack.io/grpc-a-deep-dive-into-the-communication-pattern/&#34;&gt;gRPC: A Deep Dive into the Communication Pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.oreilly.com/library/view/grpc-up-and/9781492058328/&#34;&gt;gRPC Up and Running&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
- https://blog.idontwannarock.me/2021/12/grpc/ - This website by Howard Wang is licensed under a Creative Common Attribution-ShareAlike 4.0 International License.</description>
        </item>
    
    
    
        <item>
        <title>HTTP/2 系列 - HTTP Server Push 技術</title>
        <link>https://blog.idontwannarock.me/2021/12/http_server_push/</link>
        <pubDate>Fri, 24 Dec 2021 15:49:27 +0800</pubDate>
        
        <guid>https://blog.idontwannarock.me/2021/12/http_server_push/</guid>
        <description>Howard Tech Note https://blog.idontwannarock.me/2021/12/http_server_push/ -&lt;p&gt;這篇預計是 HTTP/2 系列的最後一篇，之前在系列前面已經釐清了 HTTP/2 的概念了，其中我比較有興趣的就是 HTTP/2 的 server push 新特性，這邊就繼續來了解一下吧~&lt;/p&gt;
&lt;p&gt;HTTP/2 系列:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.idontwannarock.me/2021/12/http2/&#34;&gt;HTTP/2 系列 - HTTP/2 概念&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;HTTP/2 系列 - HTTP Server Push 技術&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;http-server-push-技術&#34;&gt;HTTP Server Push 技術&lt;/h2&gt;
&lt;p&gt;首先來探討一下有哪些基於 HTTP 協定的 server push 技術&lt;/p&gt;
&lt;p&gt;相對於 request-response 模型必須要一端發出 request 後另一端再對應的發出 response，server push 一般是指不經 client 端發出指定的 request 就由 server 端發出 message 給 client 端&lt;/p&gt;
&lt;p&gt;這種技術在某些情況是很有用的，像是需要「即時」更新資料的應用場景，例如比賽分數，當然這可以在 client 端採用定時輪詢 (polling) 的方式來實作，但這樣其實對於 client 端或 server 端都會造成資源的浪費，因為可能大多數請求實際上都沒有需要更新的資料，實際上知道資料有變動的就是 server 端，如果可以由 server 端在資料真正有變動的時候主動通知 client 端，就可以將資料元的浪費降到最低&lt;/p&gt;
&lt;p&gt;也因為在許多需要「即時」的情況下由 server 端主動通知 client 端都可以節省大量效能浪費，所以才會一直都有追求 server push 技術的需求存在&lt;/p&gt;
&lt;h3 id=&#34;polling&#34;&gt;Polling&lt;/h3&gt;
&lt;p&gt;而在 HTTP 協定制定的過程以來，一直也都有追求利用 HTTP 協定的可靠性以及泛用性下實作 server push 的功能，但 HTTP 一開始就是基於 request-response 模型建構起來的，所以就有比較早期的嘗試例如 polling&lt;/p&gt;
&lt;p&gt;Polling 其實就是前面講的 client 端定時發出 request 請求資料更新，以達到類似資料即時更新的效果&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dcvgho2zc/image/upload/v1640575513/Tech%20Blog/ajax-polling.jpg&#34; alt=&#34;Polling&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Image from &lt;a href=&#34;https://stackoverflow.com/a/30259130/7605040&#34;&gt;stackoverflow&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;long-polling&#34;&gt;Long Polling&lt;/h3&gt;
&lt;p&gt;但這樣其實完全不是 server push，而只是頻繁的 request-response 而已，所以後來又有 long polling 的技術出現&lt;/p&gt;
&lt;p&gt;long polling 是由 client 發出 request 後，server 可以決定等待到有更新資料後再回傳 response，而 client 在收到 response 後再立刻發出下一次的 request，重複這個過程，以達到類似 server push 的效果&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dcvgho2zc/image/upload/v1640576916/Tech%20Blog/long-polling.jpg&#34; alt=&#34;Long polling&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Image from &lt;a href=&#34;https://stackoverflow.com/a/30259130/7605040&#34;&gt;stackoverflow&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;但 long polling 其實只是隨時準備好一個 request 給 server 並讓 server hold 住以自行決定何時回傳 response 的技術，實際上還是需要 client 端先發出 request，而且因為需要 hold 住 request 的緣故，要使用 long polling 就必須要另外考量如何處理 timeout 的問題，不過畢竟在效果上已經蠻接近 server push 並且整體來說也的確降低了 request-response 的頻率，達到較好的效能，所以 long polling 技術也的確被使用的蠻長的時間&lt;/p&gt;
&lt;h3 id=&#34;server-sent-event-sse&#34;&gt;Server-sent Event, SSE&lt;/h3&gt;
&lt;p&gt;也因為 long polling 有著例如 scaling、ordering、guaranteed delivery 等等問題，所以後來又出現了 server-sent events (SSE) 的技術&lt;/p&gt;
&lt;p&gt;SSE 實際上也是一種利用 HTTP streaming 來達成類似 server push 效果的技術&lt;/p&gt;
&lt;p&gt;首先 client 端利用幾乎各大瀏覽器都有支援的 EventSource API 發出 request 給 server，server 端就可以開啟單向從 server 到 client 端的 streaming，讓 server 可以在任意時間點單向傳送 data 給 client&lt;/p&gt;
&lt;p&gt;雖然 EventSource API 的支援度很高，但 SSE 最大的問題其實是它只能單向的從 server 端傳送 data 到 client 端，也就是它會占用一條 TCP connection，這點在瀏覽器對伺服器的通訊中尤其重要，因為現在多數瀏覽器針對同一域名都有限制開啟的 connection 數量，例如 Chrome 就是六條，不論開啟個 tab 都一樣&lt;/p&gt;
&lt;p&gt;在一個 SSE 就要佔掉一條 connection 的情況下，萬一 SSE 需要多開幾個，可能到最後 client 端連發新 request 的能力都沒有了&lt;/p&gt;
&lt;p&gt;不過這個問題在我們前一篇討論 HTTP/2 特性時，就知道 HTTP/2 有 multiplexing 特性可以讓多個 request/response 共用 connection，而 SSE 完全可以利用 HTTP/2 的這個特性來避開它的弱點，所以 SSE 在 HTTP/2 的時代還是有用武之地的，尤其某些只需要單向更新資訊的應用場景之下&lt;/p&gt;
&lt;h2 id=&#34;http-server-push-特性&#34;&gt;HTTP Server Push 特性&lt;/h2&gt;
&lt;h3 id=&#34;名詞解釋&#34;&gt;名詞解釋&lt;/h3&gt;
&lt;p&gt;在討論 HTTP server push 特性之前，我想先來釐清幾個名詞的概念，bidirectional、full-duplex 跟 unsolicited communication&lt;/p&gt;
&lt;p&gt;bidirectional 意思是可以雙向的發送 data；相對的 unidirectional 就是只能單向的傳送 data&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dcvgho2zc/image/upload/v1640569881/Tech%20Blog/unidirectional-and-bidirectional-communication.png&#34; alt=&#34;Unidirectional and bidirectional communication&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Image from &lt;a href=&#34;https://switches-sensors.zf.com/energy-harvesting-faqs/what-is-the-difference-between-unidirectional-and-bidirectional-communication/#&#34;&gt;ZF&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;full-duplex 全雙工的意思是可以雙向「同時」傳送 data，也就是兩端都可以「同時」傳送以及接收 data；相對的還有 half-duplex (semiduplex) 半雙工，也就是容許雙向傳送 data，但不允許同時進行；最後還有相對於 duplex 雙工的 simplex 單工，定義上就是在特定時間底下只能單向傳送 data&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;這邊討論的最多只到 Transport Layer 的邏輯傳輸，並不是討論 Data Link Layer 的傳輸，所以不討論分時雙工 (Time-Division Duplexing, TDD) 或分頻雙工 (Frequency-Division Duplexing, FDD)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dcvgho2zc/image/upload/v1640570115/Tech%20Blog/simplex-half-duplex-full-duplex.jpg&#34; alt=&#34;Simplex, half-duplex and full-duplex&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Image from &lt;a href=&#34;https://www.nicerf.com/articles/detail/single-and-duplex-wireless-module.html&#34;&gt;G-NiceRF&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;再來是 unsolicited communication，在網路通訊來說，就是指可以不經對方 request 就主動發出 message 給對方，或者說發出的 message 不是為了回覆對方某一個 request；相對應的就是基本的 request-response 模型&lt;/p&gt;
&lt;h3 id=&#34;http-server-push-通訊特性&#34;&gt;HTTP Server Push 通訊特性&lt;/h3&gt;
&lt;p&gt;經過名詞解釋後，就可以來討論 HTTP 的通訊特性了&lt;/p&gt;
&lt;p&gt;因為 HTTP/2 有著 multiplexing 特性，所以 HTTP/2 的確是 bidirectional 且 full-duplex 的，只是我認為它基本上仍然還是遵循 request-response 模型，而不能達到真正 bidirectional 的 unsolicited communication&lt;/p&gt;
&lt;p&gt;一方面是就算是像 gRPC 的 bidirectional streaming RPC 的用法，實際上也只是在同一個 request-response 的 context 底下，畢竟沒有 client 首先呼叫的這個步驟，server 端根本無法自行發出任何訊息，就算是 connection 已經建立好也一樣&lt;/p&gt;
&lt;p&gt;另一方面則是有關 HTTP/2 的 server push 特性，實際上也是必須依賴 client 端首先發出一個 request，雖然 server 之後可以主動推送 client 端沒有請求的資源到 client 端的 cache 當中，但畢竟還是必須首先有 client 發出的那一個 request&lt;/p&gt;
&lt;p&gt;所以雖然沒看到有哪邊有這部分的定義，但我個人認為實際上 HTTP/2 並不能做到真正的 bidirectional uncolicited communication&lt;/p&gt;
&lt;p&gt;順便談一下，HTTP/1.x 是 bidirectional 這沒問題，但應該很多人不知道其實 HTTP/1.x 也是 full-duplex 吧？&lt;/p&gt;
&lt;p&gt;實際上雖然 HTTP/1.x 一般的 request-response 還是 half-duplex，也就是收到 request 後再回覆 response，同時間一個 TCP connection 只會有 request 或 response，不過事實上因為 request 可以 streaming，server 端完全可以在 request streaming 還沒結束就同樣開啟 streaming 回傳給 client，達到同時上傳/下載的功能，也就是 full-duplex&lt;/p&gt;
&lt;p&gt;另外如同前面討論過的不論是 polling、long polling 或 SSE 都還是 request-response 模型，所以我認為實際上目前包含 HTTP/2 及 HTTP/1.x 都是 bidirectional、full-duplex，但也都無法達成 bidirectional unsolicited communication，也就是都只能模擬出 server push 的效果，而不能達到真正的 server push 功能&lt;/p&gt;
&lt;p&gt;不過這點只是需要知道就好，畢竟我們不見得需要真正的 server push，只要能達成效果就好，除非有特別的應用場景&lt;/p&gt;
&lt;p&gt;真的要達到 bidirectional、full-duplex、unsolicited communication，應該還是要考慮 WebSocket 或 WebRTC 這類的技術&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;WebSocket 雖然一開始是利用 HTTP 建立連線，但同時也會「升級」成為別的通訊協定，所以這邊並不把 WebSocket 列入基於 HTTP 的技術來討論&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;參考連結&#34;&gt;參考連結&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Simplex_communication&#34;&gt;Simplex communication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Duplex_(telecommunications)&#34;&gt;Duplex (telecommunications)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.techtarget.com/searchnetworking/definition/full-duplex&#34;&gt;full-duplex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/a/54942254/7605040&#34;&gt;confusion regarding bidirectional and full-duplex in articles about http/2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/30252471/difference-between-a-normal-ajax-and-long-polling&#34;&gt;Difference between a normal ajax and long polling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxquestions.org/questions/linux-server-73/question-about-socket-programming-for-solicited-and-unsolicited-traffic-4175583350/&#34;&gt;Question about socket programming for solicited and unsolicited traffic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stanko.io/do-you-really-need-websockets-343aed40aa9b&#34;&gt;Do you really need WebSockets?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/a/14711517/7605040&#34;&gt;WebSockets protocol vs HTTP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/a/12855533/7605040&#34;&gt;What are Long-Polling, Websockets, Server-Sent Events (SSE) and Comet?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/a/11998868/7605040&#34;&gt;How do server-sent events actually work?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/a/42560354/7605040&#34;&gt;What is the difference between HTTP streaming and server sent events?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.com/articles/websocket-and-http2-coexist/&#34;&gt;Will WebSocket survive HTTP/2?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
- https://blog.idontwannarock.me/2021/12/http_server_push/ - This website by Howard Wang is licensed under a Creative Common Attribution-ShareAlike 4.0 International License.</description>
        </item>
    
    
    
        <item>
        <title>HTTP/2 系列 - HTTP/2 概念</title>
        <link>https://blog.idontwannarock.me/2021/12/http2/</link>
        <pubDate>Tue, 21 Dec 2021 09:06:29 +0800</pubDate>
        
        <guid>https://blog.idontwannarock.me/2021/12/http2/</guid>
        <description>Howard Tech Note https://blog.idontwannarock.me/2021/12/http2/ -&lt;p&gt;從 2015 年 RFC 7540 正式發表後，至今 HTTP/2 已經被絕大多數主流瀏覽器所支援，並且是正當紅的 gRPC 的基礎，在研究 gPRC 之前，先來釐清一下 HTTP/2 的概念&lt;/p&gt;
&lt;p&gt;這篇是 HTTP/2 系列文章的第一篇:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;HTTP/2 系列 - HTTP/2 概念&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.idontwannarock.me/2021/12/http_server_push/&#34;&gt;HTTP/2 系列 - HTTP Server Push 技術&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不過，我其實只想研究我想研究的部分，所以不見得會把 HTTP/2 所有相關的內容都研究一遍&lt;/p&gt;
&lt;h2 id=&#34;從遠古-http10-開始&#34;&gt;從遠古 HTTP/1.0 開始&lt;/h2&gt;
&lt;p&gt;HTTP 是定義在 OSI 模型第七層 Application Layer 網路協議，HTTP/1.0 採取先進先出 (first-in first-out, FIFO) 策略，每次請求/回應都是有序的，必須等到請求收到對應回應後，才能進行下一次請求&lt;/p&gt;
&lt;p&gt;HTTP 在 Transport Layer 採用 TCP 連線來通訊，而 TCP 要在 client/server 之間建立連線，是靠著三向交握 (three-way handshake) 來完成；而傳輸完成要斷線時則要做四次握手 (four-way handshake)。如果還有 TLS，那握手的來回通訊次數 (round-trip time, RTT) 就更多次了&lt;/p&gt;
&lt;p&gt;而在最初的 HTTP/1.0 的年代，硬體普遍效能都不高，為了提高系統的效率，所以 HTTP/1.0 規定 client/server 只能保持短暫的連線，所以 client 每次請求最少都要經過三向交握建立 TCP 連線，而 server 完成該請求的處理後也必須立刻進行四次握手斷開連線&lt;/p&gt;
&lt;p&gt;這樣的作法節省了 server 端的效能，但這同樣也會造成一些其他效能上的問題，例如當網頁元素越來越多的時候，即使每個元素都不大，但 client/server 每個元素都還是要重新建立連線，不但費時，而且同樣會影響 client/server 的效能&lt;/p&gt;
&lt;p&gt;而且 TCP 為了避免網路阻塞，有慢啟動 (&lt;strong&gt;slow start&lt;/strong&gt;) 的控制，所以同樣連線的傳輸速率會依照演算法隨著時間而增加直到出現遺失包、達到慢啟動閾值 (ssthresh)、或者接收方的接收窗口進行限制為止&lt;/p&gt;
&lt;p&gt;大量建立連線的動作在高延遲的網路環境下對效率影響明顯，慢啟動則對大檔案請求影響較大。這兩點主要都是連線不能複用所造成&lt;/p&gt;
&lt;p&gt;為了克服連線不能複用的問題，當時有些伺服器跟瀏覽器有實作 &lt;strong&gt;keep-alive&lt;/strong&gt; 機制如圖，但必須自行在 header 中帶上 &lt;code&gt;Connection: Keep-Alive&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dcvgho2zc/image/upload/v1639979286/Tech%20Blog/persistent-connection.jpg&#34; alt=&#34;Multiple Connection vs Persistent Conneciton&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Image from &lt;a href=&#34;https://en.wikipedia.org/wiki/HTTP_persistent_connection&#34;&gt;Wiki&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;進化到-http11&#34;&gt;進化到 HTTP/1.1&lt;/h2&gt;
&lt;p&gt;HTTP/1.1 開始預設就支援持久連線 (&lt;strong&gt;keep-alive&lt;/strong&gt;) 機制，允許在同一條 TCP 連線上多次進行 request/response，雖然還是必須保持收到 response 後才能發出下一次 request 的順序，但仍然降低了大量建立連線的效能損耗&lt;/p&gt;
&lt;p&gt;除此之外 HTTP/1.1 還設計了 &lt;strong&gt;pipelining&lt;/strong&gt; 機制，讓同一條 TCP 連線中，client 端可以在還未收到上次 request 的 response 時，就發出下一次 request，但 server 端仍然必須按照接收到 client 端 request 的順序返回 response，但仍然有機會進一步降低多請求的反應時間&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dcvgho2zc/image/upload/c_scale,h_309/v1639969180/Tech%20Blog/pipelining.png&#34; alt=&#34;HTTP pipelining&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Image from &lt;a href=&#34;https://abhishekvrshny.medium.com/head-of-line-hol-blocking-in-http-1-and-http-2-50b24e9e3372&#34;&gt;Head-of-line (HOL) blocking in HTTP/1 and HTTP/2&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;HTTP/1.1 在繼承了 HTTP/1.0 的優點的同時，也很好的解決了 TCP 連線不能複用的問題&lt;/p&gt;
&lt;p&gt;BUT，人生就是這個 BUT&lt;/p&gt;
&lt;p&gt;即使有了 keep-alive 跟 pipelining 的機制，HTTP/1.1 仍然有 &lt;strong&gt;Head-of-line Blocking&lt;/strong&gt; (HOL Blocking) 問題&lt;/p&gt;
&lt;p&gt;因為 pipelining 要求在同一個 TCP 連線中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前一個 request 發送成功後 client 才能發出下一個&lt;/li&gt;
&lt;li&gt;前一個 response 被 client 收到後 server 才能發出下一個 response&lt;/li&gt;
&lt;li&gt;每個 response 也必須依序處理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此當連線網路不穩定時，request 或 response 容易傳送失敗，造成在同一條 TCP 連線上的後續 request 或 response 被阻塞；或者某一個 request 或 response 內容較大，也會造成連線被阻塞，這就是 HTTP/1.x 的 HOL Blocking 問題&lt;/p&gt;
&lt;p&gt;另外這種機制還容易造成瀏覽器實作上的 bug，尤其是當連線中間還有代理存在時更容易出錯&lt;/p&gt;
&lt;p&gt;也是因為這個問題，現今大部分瀏覽器並不支援 pipeline 機制，或預設被關閉，例如 Chrome 曾經支援但現已停止、Mozilla 預設關閉、IE11 不支援等等&lt;/p&gt;
&lt;p&gt;另外，HTTP/1.1 的 HOL Blocking 問題是 Application Layer 層的問題，不是 Transport Layer 因為 TCP congestion control 造成的 HOL Blocking 問題&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;TCP 的 HOL Blocking 是指因為一個 packet 遺失，導致後續的 packet 必須等到該 packet 重新傳輸並接收到後才能繼續傳送的問題&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;終於要講到-http2&#34;&gt;終於要講到 HTTP/2&lt;/h2&gt;
&lt;p&gt;HTTP/1.1 固然是一個劃時代的結晶，直到今日還是瀏覽器主要使用的通訊協議之一，但在大環境的變化以致對於通訊協議的需求也有變化的今日，還是有它的侷限在&lt;/p&gt;
&lt;p&gt;於是經過許多人的努力，HTTP/2 誕生了&lt;/p&gt;
&lt;p&gt;在維持 HTTP/1.1 語意上不變的前提，HTTP/2 主要有以下特點&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Binary protocol&lt;/li&gt;
&lt;li&gt;Multiplexing&lt;/li&gt;
&lt;li&gt;Stream prioritization&lt;/li&gt;
&lt;li&gt;Header compression&lt;/li&gt;
&lt;li&gt;Server push&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基本上，HTTP/2 出現的目的就是為了解決 HTTP/1.x 的效能問題&lt;/p&gt;
&lt;h3 id=&#34;http2-new-feature&#34;&gt;HTTP/2 New Feature&lt;/h3&gt;
&lt;h4 id=&#34;binary-protocol&#34;&gt;Binary Protocol&lt;/h4&gt;
&lt;p&gt;首先 HTTP/2 改變了 HTTP/1.x 的傳輸機制，在 Application Layer 跟 Session Layer 或 Transport Layer 間插入 Binary Framing Layer 如下圖&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dcvgho2zc/image/upload/v1639984557/Tech%20Blog/binary-framing.png&#34; alt=&#34;Binary Framing Layer&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Image from &lt;a href=&#34;https://grpc.io/docs/what-is-grpc/introduction/&#34;&gt;grpc.io&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;更白話一點就是將封包結構從文本格式改為二進制格式，並且將所有傳輸訊息分隔為更小的 message 跟 frame 在 stream 裡面傳輸&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;frame 則是所有傳輸訊息 (包含 header) 切分後的最小單位。每個 frame 都會帶有一種 data，所以要馬是 HEADER frame 要馬是 DATA frame。另外每一個 frame 都會帶有 frame header 來標識其所屬的 stream&lt;/li&gt;
&lt;li&gt;message 就是一系列的 frame 組合成，對應邏輯上的 request 或 response&lt;/li&gt;
&lt;li&gt;stream 就是在一個 TCP connection 中雙向且抽象的 bytes flow，一個 stream 可以傳遞一個或多個 message。一個 TCP connection 可以有任意數量的 stream&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;首先 &lt;strong&gt;為什麼要改成二進制？&lt;/strong&gt; 是為了提升解析訊息的速度&lt;/p&gt;
&lt;p&gt;在 HTTP/1.x 的時代，光解析訊息就有四種方法，但在 HTTP/2，因為訊息都是 binary 所以只需要一種方法就可以通用的解析所有訊息&lt;/p&gt;
&lt;p&gt;接下來， &lt;strong&gt;為什麼要切分訊息？&lt;/strong&gt; 是為了提升連線的傳輸利用率&lt;/p&gt;
&lt;p&gt;HTTP/1.x 的時候傳輸訊息雖然也可以被切成 chunk 來傳輸，但因為沒有 stream 的概念，所以不等同一 request/response 所有的 chunk 傳送完畢，是不能傳送下一個，否則無法識別該 chunk 屬於哪一個 request/reponse&lt;/p&gt;
&lt;p&gt;而在 HTTP/2 因為傳輸訊息都被切成 frame 並且可以識別屬於哪一個 stream，所以可以交錯且雙向的發出，也就引出下一個特性&lt;/p&gt;
&lt;h4 id=&#34;multiplexing&#34;&gt;Multiplexing&lt;/h4&gt;
&lt;p&gt;基於 Binary Protocol 的機制，HTTP/2 允許 client 透過同一個 TCP connection 同步發送多個 request 給 server，而 server 也能透過同一個 TCP connection 同步回傳，減少額外的 RTT，並且因為每個 frame 都能識別屬於哪一個 stream，所以不需要依照收到的順序回覆，而可以交錯的回傳 frame，client 端會依照 frame 本身攜帶的 stream header 組裝相關的 frame&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;multiplexing 多路複用通常表示在一個頻道上傳輸多路訊號或資料流的過程和技術&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以 stream 的角度來看，因為每條 stream 在同一時間只會容納一個 request 以及對應的一系列 response，所以 stream 並不能達成 multiplexing&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dcvgho2zc/image/upload/v1639989101/Tech%20Blog/stream.png&#34; alt=&#34;HTTP/2 Stream&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Image from &lt;a href=&#34;https://sookocheff.com/post/networking/how-does-http-2-work/&#34;&gt;How Does HTTP/2 Work?&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;但 TCP connection 實際上可以容納多條 stream，所以同一條 TCP connection 是可以達成 multiplexing 的&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dcvgho2zc/image/upload/v1639989278/Tech%20Blog/multiplexing.png&#34; alt=&#34;HTTP/2 Multiplexing&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Image from &lt;a href=&#34;https://freecontent.manning.com/mental-model-graphic-how-is-http-1-1-different-from-http-2/&#34;&gt;How is HTTP/1.1 different from HTTP/2?&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;也就是說 HTTP/2 並不需要在同一 TCP connection 上等待前一個 request 或 response 完成，就可以發送下一個 request 或 response，因此解決了 HTTP/1.x 的 HOL Blocking 問題，並且也因此真正達到只需要在 client/server 之間建立一條 TCP connection 即可完成所有通訊，也大幅降低 server 端為了對不同 client 維持多條連線的效能損耗&lt;/p&gt;
&lt;h4 id=&#34;stream-prioritization&#34;&gt;Stream Prioritization&lt;/h4&gt;
&lt;p&gt;即使 HTTP/2 已經透過 multiplexing 大大提升連線傳輸效率，但在現今網頁可能動輒上百個不同的元素需要分別下載的環境下，但畢竟頻寬還是有限的，而且 TCP 連線初始的 slow start 仍然存在，意味著除非有 cache，否則網頁剛載入的速度仍然是有限的，而不見得網頁每一個元素都有立即下載的急迫性，或者有些元素下載是有相依性的&lt;/p&gt;
&lt;p&gt;所以 HTTP/2 提供在 stream 標記相依關係 (dependency) 及權重 (weight) 的機制，之後 HTTP/2 會自行處理以滿足條件&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dcvgho2zc/image/upload/v1639990493/Tech%20Blog/stream-prioritization.png&#34; alt=&#34;Stream Prioritization&#34;&gt;&lt;/p&gt;
&lt;p&gt;Image from &lt;a href=&#34;https://www.twblogs.net/a/5eec25f11f92b2f1a17cc4aa&#34;&gt;Http2特性——Binary framing layer&amp;ndash;push&amp;mdash;HPACK&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;header-compression&#34;&gt;Header Compression&lt;/h4&gt;
&lt;p&gt;另外在 HTTP/1.1 中，因為要支援許多擴充功能，所以在 header 中加了許多特性，造成傳輸上的 overhead&lt;/p&gt;
&lt;p&gt;但在實際應用上，例如同一個網頁的 request 雖然很多，但 header 可能都長得 87 趴像，但是每次都還是要傳輸一樣的 header 就造成重複浪費&lt;/p&gt;
&lt;p&gt;所以在 HTTP/2 中就針對 header 採用 HPACK 演算法做壓縮，原理大致上就是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;將 header 區分靜態字典 (static table) 及動態字典 (dynamic table)&lt;/li&gt;
&lt;li&gt;static table 就是一些常見的 header 表&lt;/li&gt;
&lt;li&gt;dynamic table 則是依據 FIFO 原則動態添加內容的表&lt;/li&gt;
&lt;li&gt;client/server 都支援依據 RFC 7541 的 Appendix B 所列的霍夫曼編碼表 (Huffman Code) 來對 header 進行編碼&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dcvgho2zc/image/upload/v1639991899/Tech%20Blog/hpack.png&#34; alt=&#34;HPACK Header Compression&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Image from &lt;a href=&#34;https://www.cnblogs.com/ghj1976/p/4586529.html&#34;&gt;为 HTTP/2 头压缩专门设计的 HPACK&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&#34;server-push&#34;&gt;Server Push&lt;/h4&gt;
&lt;p&gt;為了達成 server 端主動推送訊息給 client 端，一直以來都有各種嘗試在 HTTP 上達成類似的效果，包括 Polling, Long Polling, Server Sent Event(SSE) 等等，但實際上除了 WebSocket 有利用到 HTTP 建立連線這種沾到邊的協定以外，其他透過 HTTP 的傳送訊息的方式都不能真正做到兩端不經請求主動推送訊息給對方 (bidirectional unsolicited communication)，&lt;strong&gt;包括 HTTP/2 也沒有達成&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Polling 是在 client 端設 timer 輪詢，以達到近似 server 端有準備好的資料就可以隨時推送到 client 端的效果&lt;/li&gt;
&lt;li&gt;Long Polling 則是維持 request 直到 server 端準備好後送出 response，client 端收到後再立刻發出 request 等待下一次 server 端的 response，以達成類似 server 端隨時推送 response 的效果&lt;/li&gt;
&lt;li&gt;SSE 則是利用 HTTP event-stream 讓 server 端可以針對同一個 request 多次回覆 response，來達成類似 server 端主動 push 的效果&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;實際上 HTTP/2 的 server push 在效果上等同 SSE，讓 server 端可以針對一個 request 進行多次的 response&lt;/p&gt;
&lt;p&gt;由於不像 SSE 會占用一整個 TCP connection，HTTP/2 的一個 request 的 context 只佔用一個 stream，而不影響其他 stream，所以並不會阻塞其他 request/response，所以在許多應用情況下，這樣的 server push 已經跟真正不依賴 client request 而進行主動 server push 的效果相差無幾&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dcvgho2zc/image/upload/v1639994509/Tech%20Blog/server-push.webp&#34; alt=&#34;HTTP/2 Server Push&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Image from &lt;a href=&#34;https://www.medianova.com/en-blog/high-performance-with-http-2-push/&#34;&gt;High Performance with HTTP / 2 PUSH&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;http2-problem&#34;&gt;HTTP/2 Problem&lt;/h3&gt;
&lt;p&gt;HTTP/2 就如同曾經的 HTTP/1.1 一樣，繼承了前一代的優點，並更進一步優化了效能，但同樣也少不了一些問題，有些爭議在協商階段就已浮現，例如有關加密跟 HOL Blocking 等問題&lt;/p&gt;
&lt;h4 id=&#34;mandate-tls-encryption&#34;&gt;Mandate TLS Encryption&lt;/h4&gt;
&lt;p&gt;其實在協商過程就已經針對這代協定是否要強制 TLS 加密有過爭論，因為加密連線畢竟在效能上有所損耗，而有些應用場景並不需要使用加密連線，甚至有些場景不適合使用 TLS 加密方式，例如在許多小型裝置上的通訊，並不適合使用 TLS 加密，因為 TLS 憑證需要定時更新，而小型裝置更新不便且數量眾多，因此並不適合使用該加密方式&lt;/p&gt;
&lt;p&gt;因此實際上最終 HTTP/2 的協定並沒有強制要求實作 TLS 加密&lt;/p&gt;
&lt;p&gt;BUT，又是這個 BUT&lt;/p&gt;
&lt;p&gt;其實許多主流瀏覽器實際上都只實作了基於 TLS 的 HTTP/2，因而成為事實上 (de facto) 的標準&lt;/p&gt;
&lt;h4 id=&#34;opportunistic-encryption&#34;&gt;Opportunistic Encryption&lt;/h4&gt;
&lt;p&gt;另外還有被批評未能支援機會性加密 (opportunistic encryption)，類似 SMTP 常用的 STARTTLS，主要用來防禦被動監聽 (passive monitoring)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;被動監聽就是利用複製網路流量來取得通訊訊息的手法，例如 wireshark 擷取封包。但其實被動監聽並不一定都用來攻擊，也常被用做 trouble shooting 的手段&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;機會性加密不像 TLS 加密涉及到身分認證、金鑰管理並需要事先設定組態，否則無法開始安全通訊，因此變成要馬「完全安全」要馬「完全不安全」；機會性加密則不進行身分驗證，在建立連接時，如果對方也支援加密連接時才開始進行加密請求，如果加密請求失敗，則退回到明文&lt;/p&gt;
&lt;p&gt;雖然機會性加密無法防禦主動攻擊 (例如中間人攻擊)，也不能替代完整的加密方案，但其主要用意就是在條件允許時就盡可能使用加密通訊&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;中間人攻擊就是類似同時對 client 偽造 server、對 server 偽造 client，並交換其所收到的資料，使兩端都認為它們正通過一個私密的連接與對方直接對話&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;並且因為 IETF 制定的 RFC 7528 Best Current Practive 188 中指出，被動監聽應被當作一種攻擊，而 IETF 制定的標準應採取抵禦被動監聽的手段，因此 HTTP/2 也被批評違反 IETF 自身制定的準則&lt;/p&gt;
&lt;h4 id=&#34;tcp-hol-blocking&#34;&gt;TCP HOL Blocking&lt;/h4&gt;
&lt;p&gt;前面有提到 HTTP/2 解決了 Application Layer 的 HOL Blocking 問題，但並沒有處理 Transport Layer 的 TCP Blocking 問題&lt;/p&gt;
&lt;p&gt;TCP 作為一個 Transport Layer 的協定，其特點就是可靠的傳輸，而且同樣也是有序的，所以在一系列有序的 packet 傳輸過程中，只要其中一個 packet 因為某種原因傳輸失敗需要重新傳輸或尚未收到，就會導致後續 packet 只能等待前面的 packet 完成傳輸，而形成 TCP HOL Blocking 問題&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dcvgho2zc/image/upload/v1640057331/Tech%20Blog/tcp-hol-blocking.png&#34; alt=&#34;TCP HOL Blocking&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Image from &lt;a href=&#34;https://medium.com/ably-realtime/http-3-deep-dive-9318f7d6834d&#34;&gt;HTTP/3 deep dive&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;而因為 HTTP/2 仍然是基於 TCP 的協定，所以同樣受到 TCP HOL Blocking 問題的影響，即使在單一 TCP connection 用上 multiplexing，但仍可能因為 packet loss 而導致整條 TCP connection 的所有 stream 被阻塞&lt;/p&gt;
&lt;h2 id=&#34;whats-next&#34;&gt;What&amp;rsquo;s Next?&lt;/h2&gt;
&lt;p&gt;對於 TCP HOL Blocking 問題的處理，因為 TCP 已經是廣泛使用的協定，要直接對 TCP 做修改影響太大，所以就產生 QUIC (Quick UDP Internet Connections) 這個也是 Transport Layer 的協定直接避開 TCP HOL Blocking 問題，並且更適合在現今移動端的環境使用&lt;/p&gt;
&lt;p&gt;QUIC 從名稱就看的出來是基於 UDP 這個同樣也是 Transport Layer 協定而制定出來協定，它的主要目標就在提供幾乎等同於 TCP 的可靠性，但同時減少延遲&lt;/p&gt;
&lt;p&gt;首先是簡化建立連線期間的握手，將多個步驟整合，這就大大降低了建立連線的成本&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dcvgho2zc/image/upload/v1640057493/Tech%20Blog/quic-https-handshake.gif&#34; alt=&#34;QUIC HTTPS handshake&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Image from &lt;a href=&#34;https://cloud.google.com/blog/products/gcp/introducing-quic-support-https-load-balancing&#34;&gt;Google Cloud&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;接著使用 UDP 傳輸，但為了達成接近 TCP 的可靠性，選擇在 QUIC 層級進行資料糾錯恢復的控制，QUIC 在修復單一 stream 時仍可以自由處理其他資料，所以即使單一請求發生錯誤也不會影響到其他請求&lt;/p&gt;
&lt;p&gt;QUIC 還有一個目標是提高切換網路期間的效能，這點在移動端環境非常重要，例如我們手機常常在 WiFi 跟行動網路之間切換，如果在 TCP 上發生了，首先需要等待現有連接一個一個逾時，然後再根據需要重新建立，這中間的延遲就高了。而 QUIC 會包含一個連接識別碼 Connection ID，用來標識 client/server 之間的連接，而不論 IP 位址，如此只需要傳送一個包含此 Connection ID 的 packet 即可重新建立連接&lt;/p&gt;
&lt;p&gt;因為有著這些更符合現今網路環境的優點，所以 HTTP-over-QUIC 也已被正式提出要求更名為 HTTP/3，雖然仍還只是 Internet Draft，但已經被超過七成的瀏覽器所支援或實作，包括 Chrome, Edge, Firefox, Safari 14 等&lt;/p&gt;
&lt;p&gt;HTTP/3 同樣在語意上繼承 HTTP/2，不過 HTTP/2 並不能直接與 QUIC 兼容，因為 HTTP/2 在 Application Layer 的 frame 與 QUIC 在 Transport Layer 切分的 packet 不能直接映射，而且 QUIC 已經在 Transport Layer 處理了 multiplexing，所以不需要 HTTP/2 在 Application Layer 再處理一次&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/dcvgho2zc/image/upload/v1640057950/Tech%20Blog/TCP-vs-QUIC-Basic-Diagram.png&#34; alt=&#34;TCP vs QUIC&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Image from &lt;a href=&#34;https://ma.ttias.be/googles-quic-protocol-moving-web-tcp-udp/&#34;&gt;Google’s QUIC protocol: moving the web from TCP to UDP&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;參考連結&#34;&gt;參考連結&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/HTTP/2&#34;&gt;HTTP/2 Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/496897/&#34;&gt;HTTP／1.0／1.1／2.0的區別以及http和https的區別&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/TCP_congestion_control&#34;&gt;TCP congestion control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/HTTP_pipelining&#34;&gt;HTTP pipelining&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/a/40688337/7605040&#34;&gt;Why is pipelining disabled in modern browsers?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Head-of-line_blocking&#34;&gt;Head-of-line blocking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://abhishekvrshny.medium.com/head-of-line-hol-blocking-in-http-1-and-http-2-50b24e9e3372&#34;&gt;Head-of-line (HOL) blocking in HTTP/1 and HTTP/2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sookocheff.com/post/networking/how-does-http-2-work/&#34;&gt;How Does HTTP/2 Work?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc7541&#34;&gt;RFC-7541&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Best_current_practice&#34;&gt;Best current practice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/HTTP/2_Server_Push&#34;&gt;HTTP/2 Server Push&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/HTTP/3&#34;&gt;HTTP/3 Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://livebook.manning.com/book/http2-in-action&#34;&gt;HTTP/2 in Action&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
- https://blog.idontwannarock.me/2021/12/http2/ - This website by Howard Wang is licensed under a Creative Common Attribution-ShareAlike 4.0 International License.</description>
        </item>
    
    
    
        <item>
        <title>在 Batch Script 壓縮檔案</title>
        <link>https://blog.idontwannarock.me/2021/12/zip_in_batch_script/</link>
        <pubDate>Thu, 16 Dec 2021 15:32:25 +0800</pubDate>
        
        <guid>https://blog.idontwannarock.me/2021/12/zip_in_batch_script/</guid>
        <description>Howard Tech Note https://blog.idontwannarock.me/2021/12/zip_in_batch_script/ -&lt;p&gt;因為目前公司沒有專職 SRE 或 DevOps 幫忙做 CI/CD，身為小小後端工程師只好自己想辦法，偏偏目前用到的 tech stack 包括 .net framework，所以必須跟 Windows 環境的 batch file 打交道來替代習慣的 shell 檔，其中有個步驟必須要壓縮/解壓縮資料夾&lt;/p&gt;
&lt;h2 id=&#34;tar&#34;&gt;Tar&lt;/h2&gt;
&lt;p&gt;研究了一下，很興奮的發現 tar 在 command prompt 跟 powershell 都可以用，那代表我在 batch 檔裡面使用沒問題ＲＲＲ&lt;/p&gt;
&lt;p&gt;所以可以這樣用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-batch&#34; data-lang=&#34;batch&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:&lt;span style=&#34;color:#6272a4&#34;&gt;: zip&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tar -cvzf &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;path and name to archive.tar&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;path to folder to compress&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:&lt;span style=&#34;color:#6272a4&#34;&gt;: unzip&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tar -xvzf &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;path and name to archive.tar&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;microsoftpowershellarchive-module&#34;&gt;Microsoft.Powershell.Archive Module&lt;/h2&gt;
&lt;p&gt;很可惜，這個方法有一個小小的問題&lt;/p&gt;
&lt;p&gt;tar 基本上是從 Windows 10 或 Windows Server 2019 才開始支援，很不巧，我手上有個環境是 Windows Server 2016&amp;hellip;&lt;/p&gt;
&lt;p&gt;基於可以用原生就絕不多安裝東西的自虐原則，好險又找到了另一個方法，powershell 有個 archive 的模組可以用！&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# zip&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Compress-Archive&lt;/span&gt; -Path &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;path to folder to compress&amp;#34;&lt;/span&gt; -DestinationPath &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;path and name to archive.zip&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# unzip&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Expand-Archive&lt;/span&gt; -Path &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;path and name to archive.zip&amp;#34;&lt;/span&gt; -DestinationPath &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;path to unzip archive.zip&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;參考連結&#34;&gt;參考連結&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://techcommunity.microsoft.com/t5/containers/tar-and-curl-come-to-windows/ba-p/382409&#34;&gt;Tar and Curl Come to Windows!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/zh-tw/powershell/module/microsoft.powershell.archive/?view=powershell-7.2&amp;amp;viewFallbackFrom=powershell-5.0&#34;&gt;Microsoft.PowerShell.Archive&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
- https://blog.idontwannarock.me/2021/12/zip_in_batch_script/ - This website by Howard Wang is licensed under a Creative Common Attribution-ShareAlike 4.0 International License.</description>
        </item>
    
    
    
        <item>
        <title>Sql Server 備份方式</title>
        <link>https://blog.idontwannarock.me/2021/11/sql_server_backup/</link>
        <pubDate>Tue, 16 Nov 2021 11:58:47 +0800</pubDate>
        
        <guid>https://blog.idontwannarock.me/2021/11/sql_server_backup/</guid>
        <description>Howard Tech Note https://blog.idontwannarock.me/2021/11/sql_server_backup/ -&lt;p&gt;最近工作上碰到需要對 Sql Server 做 snapshot 的場合，所以就順便來研究一下怎麼對 Sql Server 做備份&lt;/p&gt;
&lt;p&gt;按照過去的經驗，我第一個想法就是找 Sql Server 有沒有類似 mysqldump 或 pg_dump 的工具可以直接將 schema 及 data 導出成 SQL 檔，這樣方便閱讀也方便各種場景下重建資料庫，尤其是在資料庫的 table 數量及資料量並不算大的前提下&lt;/p&gt;
&lt;p&gt;結果，我太天真了，Microsoft 怎麼可能這麼好用 (誤)，人家就是要走自己的路！&lt;/p&gt;
&lt;h2 id=&#34;備份檔案格式&#34;&gt;備份檔案格式&lt;/h2&gt;
&lt;p&gt;Sql Server 備份出來的檔案格式有以下幾種&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bak: schema + data + log + file，適合做定時備份，因為他會保持包含 index 在內的資料以維持 single point of time 的 transactionally consistent&lt;/li&gt;
&lt;li&gt;DACPAC: schema，適合建立測試環境或比對各環境版本；但也支持下參數加上 data 的備份。實際上是 xml 的壓縮檔&lt;/li&gt;
&lt;li&gt;BACPAC: schema + data，適合轉移或 archive db。schema 部分與 DACPAC 相同，只是加上用 BCP 匯出資料&lt;/li&gt;
&lt;li&gt;sql&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;備份工具&#34;&gt;備份工具&lt;/h2&gt;
&lt;p&gt;主要有以下幾種備份工具&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/sql/tools/sqlcmd-utility?view=sql-server-ver15&#34;&gt;SqlCmd (官方)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/sql/tools/bcp-utility?view=sql-server-ver15&#34;&gt;BCP (官方)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/sql/relational-databases/server-management-objects-smo/getting-started-in-smo?view=sql-server-ver15&#34;&gt;SMO (官方)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/sql/tools/sqlpackage/sqlpackage?view=sql-server-ver15&#34;&gt;SqlPackage.exe (官方)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dbatools.io/&#34;&gt;dbatools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Microsoft/mssql-scripter&#34;&gt;mssql-scripter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sqlcmd-官方&#34;&gt;SqlCmd (官方)&lt;/h3&gt;
&lt;p&gt;需要安裝 Sql Server 或 Microsoft Command Line Utility。若 powershell 要使用，還需要安裝 SqlServer 模組&lt;/p&gt;
&lt;p&gt;只能產生出 bak 檔，可包含 schema 及 data，但本身並不包含建立 database&lt;/p&gt;
&lt;h3 id=&#34;bcp-官方&#34;&gt;BCP (官方)&lt;/h3&gt;
&lt;p&gt;針對同步大量資料的工具，不支援同步 schema&lt;/p&gt;
&lt;h3 id=&#34;smo-官方&#34;&gt;SMO (官方)&lt;/h3&gt;
&lt;p&gt;這已經算是要寫程式來控制備份機制了，除了可以用 powershell 來寫以外，其實也可以直接寫 c# 專案來使用這個 library 做備份工作&lt;/p&gt;
&lt;p&gt;只要有安裝過 Sql Server 後就會內附該有的 dll&lt;/p&gt;
&lt;p&gt;會產生 schema 及 data 的 sql script，但我沒找到產生建立 database 部分的選項可以做設定&lt;/p&gt;
&lt;p&gt;可以參考這篇 &lt;a href=&#34;https://www.red-gate.com/simple-talk/databases/sql-server/database-administration-sql-server/automated-script-generation-with-powershell-and-smo/&#34;&gt;Automated Script-generation with Powershell and SMO&lt;/a&gt; 來撰寫 powershell 檔&lt;/p&gt;
&lt;h3 id=&#34;sqlpackageexe-官方&#34;&gt;SqlPackage.exe (官方)&lt;/h3&gt;
&lt;p&gt;可以不需要安裝 sql server，是獨立的程式，而且跨平台&lt;/p&gt;
&lt;p&gt;可以選擇 extract (產出 DACPAC) 或 export (產出 BACPAC)&lt;/p&gt;
&lt;p&gt;dacpac 只是壓縮檔，解開後，schema 的部分都是 xml，data 就是用 bcp 輸出的檔案。bacpac 也是一樣&lt;/p&gt;
&lt;p&gt;不過 SqlPackage 有幾個問題&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Extract dacpac 也可以包含 data (&lt;code&gt;ExtractAllTableData=&#39;True&#39;&lt;/code&gt;)，而且還可以設定是否要 verify (&lt;code&gt;VerifyExtraction=&#39;False&#39;&lt;/code&gt;)，這樣 Export bacpac 不知道要拿來幹嘛&lt;/li&gt;
&lt;li&gt;還有 Export 不能關閉 verify (&lt;code&gt;VerifyExtraction=&#39;False&#39;&lt;/code&gt;)，會出現以下警告，所以甚至像是在 store procedure 內有用到別的 database 的狀況也會被拒絕&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;*** &amp;lsquo;VerifyExtraction&amp;rsquo; is not a valid argument for the &amp;lsquo;Export&amp;rsquo; action.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;dbatools&#34;&gt;dbatools&lt;/h3&gt;
&lt;p&gt;這是一個第三方套件，功能多到看不完，但官方文件雖然列的一堆功能，但使用者要怎麼使用坦白說我覺得不是很友善&lt;/p&gt;
&lt;h3 id=&#34;mssql-scripter&#34;&gt;mssql-scripter&lt;/h3&gt;
&lt;p&gt;需要安裝並設定好 Python 的環境變數，然後用 pip 安裝&lt;/p&gt;
&lt;p&gt;可以產生 schema 及 data 的 sql script&lt;/p&gt;
&lt;p&gt;對本地安裝的 Sql Server 操作沒問題，但我拿它來對 docker container 中的 mssql 操作會報權限問題&lt;/p&gt;
&lt;h2 id=&#34;結論&#34;&gt;結論&lt;/h2&gt;
&lt;p&gt;因為考慮到資料庫 table 以及非 log 資料並不多，所以最後選擇用 powershell 操作 smo 的方式產出 sql 檔的方式做 snapshot&lt;/p&gt;
&lt;p&gt;以下是我參考這篇 &lt;a href=&#34;https://www.red-gate.com/simple-talk/databases/sql-server/database-administration-sql-server/automated-script-generation-with-powershell-and-smo/&#34;&gt;Automated Script-generation with Powershell and SMO&lt;/a&gt; 撰寫的 powershell 檔&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;param&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$datasource&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$username&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$password&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$backupPath&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# set &amp;#34;Option Explicit&amp;#34; to catch subtle errors&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;set-psdebug&lt;/span&gt; -strict
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# you can opt to stagger on, bleeding, if an error occurs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$ErrorActionPreference&lt;/span&gt; = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;stop&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# create backup directory if not exist&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;New-Item&lt;/span&gt; -ItemType Directory -Force -Path &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$backupPath&lt;/span&gt; | &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Out-Null&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;cd &lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$backupPath&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# get current date in yyyyMMdd format&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$currentDate&lt;/span&gt; = &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Get-Date&lt;/span&gt; -format yyyyMMdd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Write-Output&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Current Date = &lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$currentDate&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# get the latest backup directory&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Get-ChildItem&lt;/span&gt; -Directory -Path . | &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Sort-Object&lt;/span&gt; CreationTime -Descending | &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Select-Object&lt;/span&gt; -First &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; -ExpandProperty Name -OutVariable latestDir | &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Out-Null&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Write-Output&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Latest Backup Directory = &lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$latestDir&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# get the latest version of today&amp;#39;s backups&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$currentVersion&lt;/span&gt; = &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$latestDir&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-Match&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$currentDate&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$currentVersion&lt;/span&gt; = &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$latestDir&lt;/span&gt;.Substring(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$currentDate&lt;/span&gt;.Length + &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Write-Output&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Current Version = &lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$currentVersion&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# create directory for the next version of backup&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$nextVersion&lt;/span&gt; = [int]&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$currentVersion&lt;/span&gt; + &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Write-Output&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Next Version = &lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$nextVersion&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$nextVersionDir&lt;/span&gt; = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;$(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$backupPath&lt;/span&gt;)&lt;span style=&#34;color:#f1fa8c&#34;&gt;\&lt;/span&gt;$(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$currentDate&lt;/span&gt;)&lt;span style=&#34;color:#f1fa8c&#34;&gt;_&lt;/span&gt;$(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$nextVersion&lt;/span&gt;)&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;New-Item&lt;/span&gt; -ItemType Directory -Force -Path &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$nextVersionDir&lt;/span&gt; | &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Out-Null&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# load SMO assembly&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$msPrefix&lt;/span&gt; = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Microsoft.SqlServer&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[System.Reflection.Assembly]::LoadWithPartialName(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$msPrefix&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;.SMO&amp;#34;&lt;/span&gt;) | &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;out-null&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[System.Reflection.Assembly]::LoadWithPartialName(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$msPrefix&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;.SMOExtended&amp;#34;&lt;/span&gt;) | &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;out-null&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$smoPrefix&lt;/span&gt; = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$msPrefix&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;.Management.Smo&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# set connection&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$server&lt;/span&gt; = &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;New-Object&lt;/span&gt; (&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$smoPrefix&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;.Server&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$datasource&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$server&lt;/span&gt;.ConnectionContext.LoginSecure = $false
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$server&lt;/span&gt;.ConnectionContext.set_Login(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$username&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$server&lt;/span&gt;.ConnectionContext.set_Password(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$password&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# check connection&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$server&lt;/span&gt;.Version &lt;span style=&#34;color:#ff79c6&#34;&gt;-eq&lt;/span&gt; $null ) {&lt;span style=&#34;color:#ff79c6&#34;&gt;Throw&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Can&amp;#39;t find the instance &lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$datasource&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# loop through databases names to do back up&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$database&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$server&lt;/span&gt;.databases)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;# skip system databases&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$database&lt;/span&gt;.Name -in &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Master&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Model&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;MSDB&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;TempDB&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;SSISDB&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;distribution&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;ReportServer&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;ReportServerTempDB&amp;#39;&lt;/span&gt;) {&lt;span style=&#34;color:#ff79c6&#34;&gt;continue&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;# skip offline databases&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$database&lt;/span&gt;.Status &lt;span style=&#34;color:#ff79c6&#34;&gt;-ne&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Normal&amp;#39;&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Write-Output&lt;/span&gt; (&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Skipping Offline: {0}&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-f&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$database&lt;/span&gt;.Name)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;continue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$backupFile&lt;/span&gt; = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;$(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$nextVersionDir&lt;/span&gt;)&lt;span style=&#34;color:#f1fa8c&#34;&gt;\&lt;/span&gt;$(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$database&lt;/span&gt;.Name)&lt;span style=&#34;color:#f1fa8c&#34;&gt;.sql&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Write-Output&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Start to back up &lt;/span&gt;$(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$database&lt;/span&gt;.Name)&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;# manually add create database sql statement at the beginning of the sql file&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;New-Item&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$backupFile&lt;/span&gt; -ItemType File | &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Out-Null&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Add-Content&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$backupFile&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;USE [master]&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Add-Content&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$backupFile&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;GO&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Add-Content&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$backupFile&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Drop Database if exists [&lt;/span&gt;$(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$database&lt;/span&gt;.Name)&lt;span style=&#34;color:#f1fa8c&#34;&gt;];&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Add-Content&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$backupFile&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;GO&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Add-Content&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$backupFile&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;USE [master]&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Add-Content&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$backupFile&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;GO&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Add-Content&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$backupFile&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;CREATE DATABASE [&lt;/span&gt;$(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$database&lt;/span&gt;.Name)&lt;span style=&#34;color:#f1fa8c&#34;&gt;]&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Add-Content&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$backupFile&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;GO&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Add-Content&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$backupFile&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;USE [&lt;/span&gt;$(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$database&lt;/span&gt;.Name)&lt;span style=&#34;color:#f1fa8c&#34;&gt;]&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Add-Content&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$backupFile&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;GO&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Add-Content&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$backupFile&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;# set export configuration&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$transfer&lt;/span&gt; = &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;New-Object&lt;/span&gt; (&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$smoPrefix&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;.Transfer&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$database&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$transfer&lt;/span&gt;.Options.ScriptSchema = $true
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$transfer&lt;/span&gt;.Options.ScriptData = $true
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$transfer&lt;/span&gt;.Options.ScriptBatchTerminator = $true
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$transfer&lt;/span&gt;.Options.ToFileOnly = $true
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$transfer&lt;/span&gt;.Options.AppendToFile = $true
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$transfer&lt;/span&gt;.Options.Encoding = &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;New-Object&lt;/span&gt; (&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;System.Text.UTF8Encoding&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$transfer&lt;/span&gt;.Options.AllowSystemObjects = $false
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$transfer&lt;/span&gt;.Options.Permissions = $true
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$transfer&lt;/span&gt;.Options.SchemaQualify = $true
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$transfer&lt;/span&gt;.Options.ExtendedProperties = $true
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$transfer&lt;/span&gt;.Options.DRIAll = $true
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$transfer&lt;/span&gt;.Options.Indexes = $true
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$transfer&lt;/span&gt;.Options.Triggers = $true
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$transfer&lt;/span&gt;.Options.IncludeHeaders = $true
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$transfer&lt;/span&gt;.Options.IncludeIfNotExists = $true
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$transfer&lt;/span&gt;.Options.Filename = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$backupFile&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$transfer&lt;/span&gt;.Options.EnforceScriptingOptions = $true
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;# start scripting&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$transfer&lt;/span&gt;.EnumScriptTransfer()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Write-Output&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Finished backing up &lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$databaseName&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt; to &lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$backupFile&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://blog.idontwannarock.me/2021/11/sql_server_backup/ - This website by Howard Wang is licensed under a Creative Common Attribution-ShareAlike 4.0 International License.</description>
        </item>
    
    
    
        <item>
        <title>Hugo 半自動部署</title>
        <link>https://blog.idontwannarock.me/2021/11/hugo_semi_auto_deploy/</link>
        <pubDate>Wed, 03 Nov 2021 16:29:03 +0800</pubDate>
        
        <guid>https://blog.idontwannarock.me/2021/11/hugo_semi_auto_deploy/</guid>
        <description>Howard Tech Note https://blog.idontwannarock.me/2021/11/hugo_semi_auto_deploy/ -&lt;p&gt;這篇主要在講將以往所有手動的步驟，包括網站建置及發佈到 GitHub Pages 等，盡量調整為一個 script 來處理&lt;/p&gt;
&lt;p&gt;起因是因為種種因素，所以這個 Blog 停更了很久，其實也就是懶，還有之前沒有找到符合我要求的佈景主題。所以把手動的步驟減少，懶惰的理由就少了一個&lt;/p&gt;
&lt;p&gt;至於佈景主題我自己是有幾個要求:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;主要是給 Blog 用。這個要求是因為其實有很多佈景主題是給 Portfolio, Landing Page 等等使用的，所以首頁或 pages 的功能很強，文件都在講這些，但我都不需要&lt;/li&gt;
&lt;li&gt;文章要在側邊自動生成 Table of Content。這個就是 Blog 的要求，很多佈景主題是沒有支援這個功能的&lt;/li&gt;
&lt;li&gt;要有 Category 跟 Tag 的功能&lt;/li&gt;
&lt;li&gt;風格簡單&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;這些要求看起來很基本，但不知道為什麼，就算只滿足 2、3 項的交集都極少。目前找到最符合要求的就是 &lt;a href=&#34;https://themes.gohugo.io/themes/hugo-theme-diary/&#34;&gt;Diary&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;換 theme 的部分參考&lt;a href=&#34;https://gohugo.io/getting-started/quick-start/#step-3-add-a-theme&#34;&gt;官網&lt;/a&gt;，沒什麼好說的&lt;/p&gt;
&lt;p&gt;主要講如何部署到 GitHub Pages 的部分&lt;/p&gt;
&lt;h2 id=&#34;部署到-github-pages&#34;&gt;部署到 GitHub Pages&lt;/h2&gt;
&lt;p&gt;以我的了解，主要有三種方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直接部署&lt;/li&gt;
&lt;li&gt;資料夾部署&lt;/li&gt;
&lt;li&gt;分支部署&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;直接部署&#34;&gt;直接部署&lt;/h3&gt;
&lt;p&gt;就是只單獨把建置 (&lt;code&gt;hugo&lt;/code&gt;) 出來的 &lt;code&gt;public&lt;/code&gt; 資料夾推到 GitHub main branch，然後在 repo 的 Pages 設定頁面指定 Source 為 main branch&lt;/p&gt;
&lt;h3 id=&#34;資料夾部署&#34;&gt;資料夾部署&lt;/h3&gt;
&lt;p&gt;這個方式是把整個專案包含原始檔都推到 GitHub main branch，然後在 repo 的 Pages 設定頁面指定 Source 為 main branch 的 docs 資料夾&lt;/p&gt;
&lt;p&gt;因為 GitHub 只認根目錄或 docs 資料夾的內容，所以在 config 檔裡面要加上 &lt;code&gt;publishDir: &amp;quot;docs&amp;quot;&lt;/code&gt; 的設定項，建置出來的靜態網站才會在 docs 資料夾裡面&lt;/p&gt;
&lt;h3 id=&#34;分支部署&#34;&gt;分支部署&lt;/h3&gt;
&lt;p&gt;這個方式是將專案原始檔跟建置出來的靜態網站放在不同的分支，讓 GitHub 以分支來部署&lt;/p&gt;
&lt;p&gt;這有兩種做法，要看你 Git 的版本 (2.5+) 是否有支援 &lt;a href=&#34;https://git-scm.com/docs/git-worktree&#34;&gt;&lt;code&gt;git worktree&lt;/code&gt;&lt;/a&gt; 指令，如果沒有支援，就要改用 &lt;code&gt;git clone&lt;/code&gt; 的方式&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git worktree&lt;/code&gt; 指令是在 2.5 版 2015 年加入的，所以我只研究 &lt;code&gt;git worktree&lt;/code&gt; 的作法&lt;/p&gt;
&lt;p&gt;首先先把 public 資料夾加入 .gitignore 檔，讓 public 資料夾的內容都不會被 commit 到放原始檔的 main 分支&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;btw，之前 GitHub 為了政治正確，所以把行之有年的 master 分支名稱都改為 main，所以你看到官網的文件都只會看到 main 分支，指的就是 master。但其實你要用 master 也沒有不行的樣子&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;接著建立要放靜態網站的分支 gh-pages (名稱應該也是隨意)，但要將其建立為 orphan branch 以免將原始碼帶進去，並建立一個空的 commit 並設定對應 GitHub 的遠端分支&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git checkout --orphan gh-pages
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git reset --hard
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git commit --allow-empty -m &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;feat: init gh-pages branch&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push origin gh-pages
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git checkout master
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接著就是做幾件事:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;移除 public 資料夾以清除前一次建置出來的靜態網站&lt;/li&gt;
&lt;li&gt;以 &lt;code&gt;git worktree&lt;/code&gt; 指令將 gh-pages 分支開在 public 資料夾&lt;/li&gt;
&lt;li&gt;建置網站&lt;/li&gt;
&lt;li&gt;將 public 資料夾建置出來的內容 commit 到 gh-pages&lt;/li&gt;
&lt;li&gt;將 gh-pages 分支推送到 GitHub&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以下是我用來建置並部署到 GitHub Pages 的 script&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;DIR&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;$(&lt;/span&gt;dirname &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$0&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$DIR&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$DIR&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt; does not exist&amp;#34;&lt;/span&gt; &amp;amp; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;exit&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;$(&lt;/span&gt;git status -s&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;The working directory is dirty. Please commit any pending changes.&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;exit&lt;/span&gt; 1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Deleting old publication&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rm -rf public
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir public
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git worktree prune
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rm -rf .git/worktree/public/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Checking out gh-pages branch into public&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git worktree add -B gh-pages public origin/gh-pages
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Removing existing files&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rm -rf public/*
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Generating site&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Updating gh-pages branch&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;cd&lt;/span&gt; public &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git add --all &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git commit -m &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;feat: publish to gh-pages (publish.sh)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;cd&lt;/span&gt; ..
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# publish&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push origin gh-pages
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 script 裡面我有先檢查是否還有未 commit 的修改，然後做完整的清除，才去建置網站&lt;/p&gt;
&lt;p&gt;推到 GitHub 後，要記在 repo 的 Pages 設定頁面指定 Source 為 gh-pages branch&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://bwaycer.github.io/hugo_tutorial.hugo/tutorials/github-pages-blog/&#34;&gt;Hosting on GitHub Pages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
- https://blog.idontwannarock.me/2021/11/hugo_semi_auto_deploy/ - This website by Howard Wang is licensed under a Creative Common Attribution-ShareAlike 4.0 International License.</description>
        </item>
    
    
    
        <item>
        <title>Spring Boot 實作 API 版本控制</title>
        <link>https://blog.idontwannarock.me/2019/09/spring_api_version_with_swagger_security/</link>
        <pubDate>Thu, 19 Sep 2019 15:53:36 +0800</pubDate>
        
        <guid>https://blog.idontwannarock.me/2019/09/spring_api_version_with_swagger_security/</guid>
        <description>Howard Tech Note https://blog.idontwannarock.me/2019/09/spring_api_version_with_swagger_security/ -&lt;p&gt;本文目的是為了探討在 Spring Boot Web 專案中，實作 API 版本控制，並兼容 Swagger 及 Spring Security 的解決方式&lt;/p&gt;
&lt;p&gt;需要有 Spring Boot、Spring MVC、Spring Security 及 Swagger 的基礎概念會比較好理解&lt;/p&gt;
&lt;h1 id=&#34;api-版本控制&#34;&gt;API 版本控制&lt;/h1&gt;
&lt;p&gt;常見的 API 版本控制方式有三種: URI, header, content-type&lt;/p&gt;
&lt;p&gt;考量到 RESTful API 其中的一個好處是方便快取，使用 header 跟 content-type 的方式則可能無法正確的快取以及達成 idempotent，所以我個人採用的是在 URI 中加入版本號的方式&lt;/p&gt;
&lt;p&gt;再來因為有時候面對的專案有數量眾多的 handler，導致每次修改版本號都要手動修改每一支 handler 對應的 uri，這樣既麻煩又不潮，所以一定要研究一下怎麼在 Spring Boot 專案中利用註解的方式自動幫 handler 對應的 uri 自動插入版本號&lt;/p&gt;
&lt;h1 id=&#34;tech-stack&#34;&gt;Tech Stack&lt;/h1&gt;
&lt;p&gt;專案採用的是 Spring Boot 2.0 架構，Java 1.8 版本&lt;/p&gt;
&lt;p&gt;有關 Maven 依賴如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;org.springframework.boot:spring-boot-starter-web:2.1.x&lt;/li&gt;
&lt;li&gt;org.springframework.boot:spring-boot-starter-security:2.1.x&lt;/li&gt;
&lt;li&gt;io.springfox:springfox-swagger2:2.9.2&lt;/li&gt;
&lt;li&gt;io.springfox:springfox-swagger-ui:2.9.2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這邊強調要採用 Spring Boot 主要是因為想要利用 Spring Boot auto configuration 的功能，也因為想要利用這個功能，所以過程才會這麼曲折&amp;hellip;&lt;/p&gt;
&lt;h1 id=&#34;常見作法及整合問題&#34;&gt;常見作法及整合問題&lt;/h1&gt;
&lt;p&gt;網路上 API 版本控制的文章的做法都雷同&lt;/p&gt;
&lt;p&gt;通常都是先建立自訂 &lt;code&gt;ApiVersion&lt;/code&gt; 註解，裡面有版本號屬性，可以是 &lt;code&gt;int&lt;/code&gt; 也可以是字串，通常都會有預設值，然後容許加註在類別或方法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; java.lang.annotation.*&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@Target&lt;span style=&#34;color:#ff79c6&#34;&gt;({&lt;/span&gt;ElementType&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;TYPE&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; ElementType&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;METHOD&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@Retention&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;RetentionPolicy&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;RUNTIME&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; @interface ApiVersion &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;再來寫 &lt;code&gt;ApiVersionCondition&lt;/code&gt; 實作 &lt;code&gt;RequestCondition&lt;/code&gt; 介面來判斷 request 跟 handler mapping 的條件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.springframework.web.servlet.mvc.condition.RequestCondition&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; javax.servlet.http.HttpServletRequest&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; java.util.regex.Matcher&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; java.util.regex.Pattern&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;ApiVersionCondition&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;implements&lt;/span&gt; RequestCondition&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;ApiVersionCondition&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; apiVersion&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;static&lt;/span&gt; Pattern VERSION_PREFIX_PATTERN &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Pattern&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;compile&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;/v(\\d+)/&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;ApiVersionCondition&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; apiVersion&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;apiVersion&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; apiVersion&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @Override
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; ApiVersionCondition &lt;span style=&#34;color:#50fa7b&#34;&gt;combine&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;ApiVersionCondition other&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; ApiVersionCondition&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;other&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;getApiVersion&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @Override
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; ApiVersionCondition &lt;span style=&#34;color:#50fa7b&#34;&gt;getMatchingCondition&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;HttpServletRequest request&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Matcher m &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; VERSION_PREFIX_PATTERN&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;matcher&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;request&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;getRequestURI&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;m&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;find&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; version &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Integer&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;parseInt&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;m&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;group&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;version &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;=&lt;/span&gt; getApiVersion&lt;span style=&#34;color:#ff79c6&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @Override
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;compareTo&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;ApiVersionCondition other&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; HttpServletRequest request&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; other&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;getApiVersion&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; getApiVersion&lt;span style=&#34;color:#ff79c6&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;getApiVersion&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; apiVersion&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;setApiVersion&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; apiVersion&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;apiVersion&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; apiVersion&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接著寫自訂 &lt;code&gt;CustomRequestMappingHandlerMapping&lt;/code&gt; 類別，繼承 &lt;code&gt;RequestMappingHandlerMapping&lt;/code&gt; 並 override &lt;code&gt;getCustomTypeCondition(Class&amp;lt;?&amp;gt; handlerType)&lt;/code&gt; 跟 &lt;code&gt;getCustomMethodCondition(Method method)&lt;/code&gt; 這兩個方法，以分別取得類別跟方法上的 &lt;code&gt;ApiVersion&lt;/code&gt; 註解，並據此建立 &lt;code&gt;ApiVersionCondition&lt;/code&gt; 給 Spring MVC 做 request mapping 時調用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.springframework.core.annotation.AnnotationUtils&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.springframework.web.servlet.mvc.condition.*&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.springframework.web.servlet.mvc.method.RequestMappingInfo&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; java.lang.reflect.Method&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;ApiVersionHandlerMapping&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;extends&lt;/span&gt; RequestMappingHandlerMapping &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @Override
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; RequestCondition&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; getCustomTypeCondition&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;Class&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; handlerType&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ApiVersion apiVersion &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; AnnotationUtils&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;findAnnotation&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;handlerType&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; ApiVersion&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; createRequestCondition&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;apiVersion&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @Override
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; RequestCondition&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; getCustomMethodCondition&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;Method method&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ApiVersion apiVersion &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; AnnotationUtils&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;findAnnotation&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;method&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; ApiVersion&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; createRequestCondition&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;apiVersion&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;private&lt;/span&gt; RequestCondition&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;ApiVersionCondition&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;createRequestCondition&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;ApiVersion apiVersion&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;apiVersion &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; apiVersion&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; ApiVersionCondition&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;apiVersion&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最後再建立一個設定類別繼承 &lt;code&gt;WebMvcConfigurationSupport&lt;/code&gt; 類別並 override &lt;code&gt;requestMappingHandlerMapping()&lt;/code&gt; 方法來提供自訂的 &lt;code&gt;CustomRequestMappingHandlerMapping&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.springframework.context.annotation.Configuration&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@Configuration
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;WebMvcConfig&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;extends&lt;/span&gt; WebMvcConfigurationSupport &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @Override
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; RequestMappingHandlerMapping &lt;span style=&#34;color:#50fa7b&#34;&gt;requestMappingHandlerMapping&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ApiVersionHandlerMapping handlerMapping &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; ApiVersionHandlerMapping&lt;span style=&#34;color:#ff79c6&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        handlerMapping&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;setOrder&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        handlerMapping&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;setInterceptors&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;getInterceptors&lt;span style=&#34;color:#ff79c6&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; handlerMapping&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這樣就可以在 controller 開心地加上 &lt;code&gt;ApiVersion&lt;/code&gt; 註解啦&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.springframework.http.ResponseEntity&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.springframework.web.bind.annotation.*&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@ApiVersion
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@RequestMapping&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;home&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@RestController
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;HomeController&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @GetMapping&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; ResponseEntity&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; hello&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; ResponseEntity&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;ok&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Hello world!&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @ApiVersion&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @GetMapping&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; ResponseEntity&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; helloV2&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; ResponseEntity&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;ok&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Nice to meet you!&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;BUT，人生就是這個 BUT&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;當你要兼容 Swagger 的時候，事情就沒這麼簡單惹，你會發現馬德，swagger-ui.html 開起來打 API 怎麼都沒有版本號？！&lt;/p&gt;
&lt;p&gt;其實到這邊本文才要正式開始，否則你隨便 google 都是這樣的內容，我還寫個毛&lt;/p&gt;
&lt;h2 id=&#34;兼容-swagger&#34;&gt;兼容 Swagger&lt;/h2&gt;
&lt;p&gt;首先，要整合 Swagger 有個問題，Swagger 會讀取 handler 的 &lt;code&gt;RequestMappingInfo&lt;/code&gt; 來產生文件；但前面的作法其實是 request 進來後，利用 &lt;code&gt;RequestCondition&lt;/code&gt; 來邏輯上將 request 導向 handler，實際上的 path 沒有改變，所以 Swagger 當然讀不到正確的 uri 來產生文件&lt;/p&gt;
&lt;p&gt;於是就有了另外一種做法&lt;/p&gt;
&lt;p&gt;在前面寫好的 &lt;code&gt;CustomRequestMappingHandlerMapping&lt;/code&gt; 中，另外再 override &lt;code&gt;getMappingForMethod(Method method, Class&amp;lt;?&amp;gt; handlerType)&lt;/code&gt; 方法去調整 &lt;code&gt;RequestMappingInfo&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;這部分的作法其實要看狀況，但網路上有些範例不知道是不是比較早期的文章，還有用到 &lt;code&gt;Proxy&lt;/code&gt; 來操作的寫法，我是覺得有點不必要&lt;/p&gt;
&lt;p&gt;Spring MVC 其實在 &lt;code&gt;RequestMappingInfo&lt;/code&gt; 裡面已經有很靈活的 constructor 可以做這方面的設定，並且提供方法可以跟原有的 &lt;code&gt;RequestMappingInfo&lt;/code&gt; 做合併&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@Override
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; RequestMappingInfo &lt;span style=&#34;color:#50fa7b&#34;&gt;getMappingForMethod&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;Method method&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; Class&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; handlerType&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    RequestMappingInfo info &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;getMappingForMethod&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;method&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; handlerType&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;info &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ApiVersion methodAnnotation &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; AnnotationUtils&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;findAnnotation&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;method&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; ApiVersion&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;methodAnnotation &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        RequestCondition&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; methodCondition &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; getCustomMethodCondition&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;method&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        info &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; createApiVersionInfo&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;methodAnnotation&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; methodCondition&lt;span style=&#34;color:#ff79c6&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;combine&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;info&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ApiVersion typeAnnotation &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; AnnotationUtils&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;findAnnotation&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;handlerType&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; ApiVersion&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;typeAnnotation &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            RequestCondition&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; typeCondition &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; getCustomTypeCondition&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;handlerType&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            info &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; createApiVersionInfo&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;typeAnnotation&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; typeCondition&lt;span style=&#34;color:#ff79c6&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;combine&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;info&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; info&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;private&lt;/span&gt; RequestMappingInfo &lt;span style=&#34;color:#50fa7b&#34;&gt;createApiVersionInfo&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;ApiVersion annotation&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; RequestCondition&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; customCondition&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; RequestMappingInfo&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; PatternsRequestCondition&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;v&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;concat&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;valueOf&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;annotation&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;()))),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; RequestMethodsRequestCondition&lt;span style=&#34;color:#ff79c6&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; ParamsRequestCondition&lt;span style=&#34;color:#ff79c6&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; HeadersRequestCondition&lt;span style=&#34;color:#ff79c6&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; ConsumesRequestCondition&lt;span style=&#34;color:#ff79c6&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; ProducesRequestCondition&lt;span style=&#34;color:#ff79c6&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            customCondition&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這時候再打開 swagger-ui.html，就會覺得空氣是多麼清新，世界是多麼美好&lt;/p&gt;
&lt;h2 id=&#34;spring-security-設定&#34;&gt;Spring Security 設定&lt;/h2&gt;
&lt;p&gt;當然，因為現在很多 handler 的 uri 不一樣了，設定 Spring Security 哪些請求要擋哪些不用的部分當然也要改&lt;/p&gt;
&lt;p&gt;最簡單就是在繼承 &lt;code&gt;WebSecurityConfigurerAdapter&lt;/code&gt; 的設定類別那邊手動加版本號，我自己是採用這種方式，因為考慮 Spring Security 本來就是安全考量要盡量嚴謹，會開放不用做驗證的部分應該本來就很少，所以手動修改這部分我覺得可以接受&lt;/p&gt;
&lt;p&gt;另外提醒一下如果要使用 swagger-ui.html，要將相關的靜態資源開放，建議可以做在繼承 &lt;code&gt;WebSecurityConfigurerAdapter&lt;/code&gt; 的設定類別的 &lt;code&gt;configure(HttpSecurity httpSecurity)&lt;/code&gt; 方法中，可以省下另外註冊 resource 的功夫&lt;/p&gt;
&lt;h2 id=&#34;spring-boot-auto-configuration-失效問題&#34;&gt;Spring Boot auto configuration 失效問題&lt;/h2&gt;
&lt;p&gt;其實這樣寫完還有一個問題，萬一我有其他自訂部分有用到從 &lt;code&gt;WebMvcConfigurer&lt;/code&gt; 繼承來的方法，你會發現馬德，全都失效了&lt;/p&gt;
&lt;p&gt;崩╰(〒皿〒)╯潰&lt;/p&gt;
&lt;p&gt;這是因為前面繼承到萬惡的 &lt;code&gt;WebMvcConfigurationSupport&lt;/code&gt; 了&lt;/p&gt;
&lt;p&gt;Spring Boot 的原則是 convention over configuration，所以它有很多自動設定，關於 Spring MVC 的部分就是 &lt;code&gt;WebMvcAutoConfiguration&lt;/code&gt; 在管&lt;/p&gt;
&lt;p&gt;而不論是 &lt;code&gt;@EnableWebMvc&lt;/code&gt; 註解或直接繼承 &lt;code&gt;WebMvcConfigurationSupport&lt;/code&gt; 都會停用 &lt;code&gt;WebMvcAutoConfiguration&lt;/code&gt;，Spring Boot 就會改用你 &lt;code&gt;@EnableWebMvc&lt;/code&gt; 註解的類別或直接繼承 &lt;code&gt;WebMvcConfigurationSupport&lt;/code&gt; 的類別來做設定；如果剛好你需要的自訂部分在這裡沒有想辦法設定進去，那你繼承 &lt;code&gt;WebMvcConfigurer&lt;/code&gt; 的設定就白寫了&lt;/p&gt;
&lt;p&gt;解決的關鍵點就是 &lt;code&gt;WebMvcRegistrations&lt;/code&gt; 介面，看是要實作介面還是匿名類別的 &lt;code&gt;@Bean&lt;/code&gt; 給 Spring Boot 都可以&lt;/p&gt;
&lt;p&gt;我是寫在繼承 &lt;code&gt;WebMvcConfigurer&lt;/code&gt; 的設定類別裡面，讓 Sring MVC 相關設定集中&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.springframework.boot.autoconfigure.web.servlet.WebMvcRegistrations&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.springframework.context.annotation.Bean&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.springframework.context.annotation.Configuration&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.springframework.web.servlet.config.annotation.WebMvcConfigurer&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@Configuration
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;CustomWebMvcConfigurer&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;implements&lt;/span&gt; WebMvcConfigurer &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @Bean
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; WebMvcRegistrations &lt;span style=&#34;color:#50fa7b&#34;&gt;webMvcRegistrationsRequestMappingHandlerMapping&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; WebMvcRegistrations&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            @Override
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; RequestMappingHandlerMapping &lt;span style=&#34;color:#50fa7b&#34;&gt;getRequestMappingHandlerMapping&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; ApiVersionHandlerMapping&lt;span style=&#34;color:#ff79c6&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;至此就可以把前面寫的 &lt;code&gt;WebMvcConfig&lt;/code&gt; 刪掉啦&lt;/p&gt;
&lt;p&gt;至於沒找到 &lt;code&gt;WebMvcRegistrations&lt;/code&gt; 介面的朋友，要不就是你 Spring Boot 版本太低，不然就只能改用 &lt;code&gt;WebMvcRegistrationsAdpater&lt;/code&gt; 試試看了 (攤手)&lt;/p&gt;
- https://blog.idontwannarock.me/2019/09/spring_api_version_with_swagger_security/ - This website by Howard Wang is licensed under a Creative Common Attribution-ShareAlike 4.0 International License.</description>
        </item>
    
    
    
        <item>
        <title>Spring Security 整合 RBAC</title>
        <link>https://blog.idontwannarock.me/2019/05/spring_security_rbac/</link>
        <pubDate>Thu, 30 May 2019 15:33:07 +0800</pubDate>
        
        <guid>https://blog.idontwannarock.me/2019/05/spring_security_rbac/</guid>
        <description>Howard Tech Note https://blog.idontwannarock.me/2019/05/spring_security_rbac/ -&lt;p&gt;目前比較主流的 &lt;a href=&#34;https://en.wikipedia.org/wiki/Role-based_access_control&#34;&gt;Role-based Access Control, RBAC&lt;/a&gt; 算是比較成熟且彈性的權限架構，若要在 Spring Security 實作 RBAC 並搭配 JWT 或 OAuth 2.0，大概要探討兩個問題&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;是否值得為了減少查詢資料源的次數，而將角色或權限直接置入 JWT 或 Authorization Server 回傳的 token&lt;/li&gt;
&lt;li&gt;是否採取 Spring Security 原生只使用最細粒度的權限來進行存取控制&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;關於第一個問題，目前的思考點大概就是考量系統的併發度跟使用者總數&lt;/p&gt;
&lt;p&gt;如果需要高併發，那自然希望盡量減少查詢資料的次數或資料量，盡量避免同時大量消耗 DB 資源；相反的，如果不需要高併發，那每次驗證都重新取得角色及權限資料也沒關係&lt;/p&gt;
&lt;p&gt;使用者數量的考量也是類似，如果每次查詢的成本太高，則盡量減少查詢的次數&lt;/p&gt;
&lt;p&gt;而第二個問題，則是要考量實際的業務場景&lt;/p&gt;
&lt;p&gt;如果角色跟權限很大量且複雜，或可能要考慮角色分層甚至使用者群組，或不同 Domain 有不同的權限邏輯，則可能用 Spring Security 原生方式會不敷使用，相對如果角色權限結構簡單，則直接使用原生方式可能成本較低&lt;/p&gt;
&lt;p&gt;所以以下探討主要專注於使用 Spring Security 提供的自訂空間來實作較為複雜的存取控制&lt;/p&gt;
&lt;h1 id=&#34;spring-security-權限架構&#34;&gt;Spring Security 權限架構&lt;/h1&gt;
&lt;p&gt;首先要探討 Spring Security 原生提供的權限架構&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GrantedAuthority: 可以將每個 GrantedAuthority 想成是個別的 privilege，所以在 Spring Security 中，authority 就是 privilege 的概念&lt;/li&gt;
&lt;li&gt;Role: 在 Spring Security 中為了保持彈性，Role 可以當作 Authority 也可以當作一組 Authority 的組合
&lt;ul&gt;
&lt;li&gt;Role as Authority: 直接把 Role 當成一種 Authority 的情況，就是將 Role 當作一個有 ROLE_ 前綴的字串，這種情況下 Role 跟 Authority 就只是語意上的差別&lt;/li&gt;
&lt;li&gt;Role as Container: Role 可以包含一組 Authority，Spring Security 在這個概念上沒有提供太多指引說明，需要自行實作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.baeldung.com/spring-security-granted-authority-vs-role&#34;&gt;Granted Authority Versus Role in Spring Security&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以概念上 Spring Security 的 Role 比較像是有特別命名方式 (ROLE_ 前綴) 的一種 Authority，因此在預設中，&lt;code&gt;hasAuthority(&#39;ROLE_ADMIN&#39;)&lt;/code&gt; 跟 &lt;code&gt;hasRole(&#39;ADMIN&#39;)&lt;/code&gt; 是一樣的&lt;/p&gt;
&lt;p&gt;在 Spring Security 中 Role as Authority 最明顯的例子就是 SimpleGrantedAuthority，建構子直接吃 role 字串，&lt;code&gt;getAuthority()&lt;/code&gt; 方法也直接吐回 role 字串屬性&lt;/p&gt;
&lt;p&gt;因此，如果要建立 Role 跟 Authority 分離的權限架構，首先要確認的是在設定 access control 時，&lt;code&gt;hasRole()&lt;/code&gt; 跟 &lt;code&gt;hasAuthority()&lt;/code&gt; 兩個方法到底是用什麼機制、從哪裡取得&lt;/p&gt;
&lt;p&gt;Spring Security 的整體架構分成驗證跟存取控制兩個部分，由於驗證部分會由 API 搭配 JWT 做掉大部分，甚至未來整合 OAuth 2.0，所以需要探討的只有如何在驗證過程將使用者資料及權限放入 SecurityContext 中讓後續的存取控制使用，並且存取控制部分如何依照使用者資料及權限進行控制&lt;/p&gt;
&lt;h2 id=&#34;userdetailsservice&#34;&gt;&lt;code&gt;UserDetailsService&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;要在驗證過程將使用者資料及權限放入 SecurityContext 中，最簡單就是實作 &lt;code&gt;UserDetailsService&lt;/code&gt; 的 &lt;code&gt;loadUserByUsername&lt;/code&gt; 方法，然後將自訂的 &lt;code&gt;UserDetailsService&lt;/code&gt; 提供給 &lt;code&gt;AuthenticationManager&lt;/code&gt; 即可&lt;/p&gt;
&lt;p&gt;這部分主要還是要考慮繼承 &lt;code&gt;UserDetails&lt;/code&gt; 物件後，如何設定權限部分以及該將什麼樣的資料放入 Authentication 的 authorities 中&lt;/p&gt;
&lt;h2 id=&#34;accessdecisionvoter-及-accessdecisionmanager&#34;&gt;&lt;code&gt;AccessDecisionVoter&lt;/code&gt; 及 &lt;code&gt;AccessDecisionManager&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;而存取控制的邏輯部分就要實作 &lt;code&gt;AccessDecisionVoter&lt;/code&gt; 的 &lt;code&gt;vote&lt;/code&gt; 方法&lt;/p&gt;
&lt;p&gt;voter 可以選擇回傳三種決策:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ACCESS_GRANTED&lt;/code&gt;: 通過&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ACCESS_DENIED&lt;/code&gt;: 否決&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ACCESS_ABSTAIN&lt;/code&gt;: 棄權&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;實作完 voter 後，要將 voter 加入 &lt;code&gt;AccessDecisionManager&lt;/code&gt;，而 &lt;code&gt;AccessDecisionManager&lt;/code&gt; 預設有三種決策策略&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AffirmativeBased&lt;/code&gt;: 任何 voter 回傳通過即可&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ConsensusBased&lt;/code&gt;: 通過數大於否決數，忽略棄權&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UnanimousBased&lt;/code&gt;: 所有 voter 通過或棄權，也就是不能有任何否決&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.baeldung.com/spring-security-custom-voter&#34;&gt;Custom AccessDecisionVoters in Spring Security&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這部分就只能基於實際業務邏輯做考量&lt;/p&gt;
- https://blog.idontwannarock.me/2019/05/spring_security_rbac/ - This website by Howard Wang is licensed under a Creative Common Attribution-ShareAlike 4.0 International License.</description>
        </item>
    
    
    
        <item>
        <title>Github Flow 簡介</title>
        <link>https://blog.idontwannarock.me/2019/05/github_flow_intro/</link>
        <pubDate>Wed, 29 May 2019 10:52:45 +0800</pubDate>
        
        <guid>https://blog.idontwannarock.me/2019/05/github_flow_intro/</guid>
        <description>Howard Tech Note https://blog.idontwannarock.me/2019/05/github_flow_intro/ -&lt;p&gt;&lt;a href=&#34;https://guides.github.com/introduction/flow/&#34;&gt;Understanding the GitHub flow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GitHub flow 只有一條原則：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;在 master 的任何 commit 永遠都是可以被部署的&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以所有要做開發的 branch 都直接從 master 分支出去，不論是 feature 或 fix&lt;/p&gt;
&lt;p&gt;開發的每個 commit 都要寫清楚 message，註明該 commit 做的變動以及理由等等&lt;/p&gt;
&lt;p&gt;當開發到一定階段後，就可以對 master 開 Pull Request, PR，這在 GitHub flow 很重要&lt;/p&gt;
&lt;p&gt;如果是用 Fork &amp;amp; Pull 模式，PR 就是用來通知專案維護者關於你希望他們考慮的變更；如果是用 Shared Repository 模式，則 PR 就像是用來開一個討論空間，在 merge 到 master 之前來做 code review 或針對特定變更的討論&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Fork &amp;amp; Pull 模式就是需要先 fork 後再 pull 到本機做開發，完成並 push 後，開 PR 要求合併到主專案&lt;/p&gt;
&lt;p&gt;Shared Repository 模式則是直接可以對主專案開 branch 做開發&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在開 PR 之後，還是可以在該分支繼續開發，可以是有關討論的變更或 fix 等，重要的是要在 commit message 寫清楚變更以及變更的理由或決策的脈絡&lt;/p&gt;
&lt;p&gt;在變更經過討論並測試完畢後，在 merge 到 master 之前，直接用分支的 commit 部署到 production 做最後的驗證，如果有問題，則用 master 上的 commit 重新部署到 production 來回復&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;所以在 GitHub flow 中，測試是很重要的部分&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;當變更通過部署在 production 的驗證後，就可以將該變更 merge 到 master，此時 PR 就結束，並會留下該變更的整個紀錄，讓其他人了解整個變更的流程以及脈絡&lt;/p&gt;
&lt;p&gt;而且因為 PR 可以連結 Issue，當 PR 被 merge 後，關聯到的 Issue 也會同時關閉&lt;/p&gt;
- https://blog.idontwannarock.me/2019/05/github_flow_intro/ - This website by Howard Wang is licensed under a Creative Common Attribution-ShareAlike 4.0 International License.</description>
        </item>
    
    
  </channel>
</rss> 